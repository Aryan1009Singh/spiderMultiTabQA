{
    "activity_1": {
        "Faculty": "The Faculty table stores information about all faculty members in the university. The `FacID` column stores the unique identification number of each faculty member. The `Lname` and `Fname` columns store the last and first name of the faculty member, respectively. The `Rank` column stores the faculty member's academic rank, such as Professor, Associate Professor, or Assistant Professor. The `Sex` column indicates the gender of the faculty member, while the `Phone` column stores their phone number. The `Room` column stores the faculty member's office room number, and the `Building` column indicates the building where their office is located.",
        "Activity": "The Activity table stores information about various activities that take place in the university. The `actid` column represents the unique identification number of each activity. The `activity_name` column stores the name of the activity, such as \"Computer Science Club Meeting\" or \"Volunteer Event.\"",
        "Participates_in": "The Participates_in table records the participation of students in various activities. The `stuid` column represents the student ID of the participating student, referencing the `StuID` from the Student table. The `actid` column represents the activity ID of the activity the student is participating in, referencing the `actid` from the Activity table. This table essentially maps students to the activities they participate in.",
        "Faculty_Participates_in": "The Faculty_Participates_in table records the participation of faculty members in various activities. The `FacID` column represents the faculty member's ID, referencing the `FacID` from the Faculty table. The `actid` column represents the activity ID of the activity the faculty member is participating in, referencing the `actid` from the Activity table. This table essentially maps faculty members to the activities they participate in.",
        "Student": "The Student table stores information about all students enrolled in the university. The `StuID` column stores the unique identification number of each student. The `LName` and `Fname` columns store the last and first name of the student, respectively. The `Age` column stores the student's age. The `Sex` column indicates the gender of the student. The `Major` column stores the student's major, which could be represented by a code or a foreign key referencing another table with major information. The `Advisor` column stores the ID of the faculty member who is the student's advisor, referencing the `FacID` from the Faculty table. The `city_code` column stores the city code representing the student's city of residence."
    },
    "aircraft": {
        "pilot": "Stores information about all the pilots. The column Pilot_Id is the unique identifier for each pilot. The Name column stores the pilot's full name. The Age column stores the age of the pilot.",
        "aircraft": "Stores information about different aircraft models. The Aircraft_ID is the unique identifier for each aircraft model. The Aircraft column stores the name of the aircraft model, for example, Boeing 747. The Description column provides a brief description of the aircraft model. The Max_Gross_Weight column stores the maximum gross weight that the aircraft can carry, which includes the weight of the aircraft, passengers, cargo, and fuel. The Total_disk_area column stores the total disk area of the aircraft wings, which is the area of the wings when they are fully extended. The Max_disk_Loading column stores the maximum disk loading of the aircraft, which is the ratio of the aircraft's weight to the total disk area of its wings.",
        "match": "Stores information about air races. The Round column is the round number of the race. The Location column stores the location of the race. The Country column stores the country where the race was held. The Date column stores the date when the race was held. The Fastest_Qualifying column stores the name of the pilot who achieved the fastest qualifying time. The Winning_Pilot column stores the name of the pilot who won the race. The Winning_Aircraft column stores the model of the aircraft that won the race.",
        "airport": "Stores information about airports. The Airport_ID is the unique identifier for each airport. The Airport_Name column stores the name of the airport. The Total_Passengers column stores the total number of passengers that the airport served in a specific year. The %_Change_2007 column stores the percentage change in the number of passengers from the previous year. The International_Passengers column stores the number of international passengers that the airport served in a specific year. The Domestic_Passengers column stores the number of domestic passengers that the airport served in a specific year. The Transit_Passengers column stores the number of transit passengers that the airport served in a specific year. The Aircraft_Movements column stores the number of aircraft movements that occurred at the airport in a specific year. The Freight_Metric_Tonnes column stores the total amount of freight in metric tonnes that was handled by the airport in a specific year.",
        "airport_aircraft": "Stores information about which aircraft models operate at which airports. The ID column is the unique identifier for each record in the table. The Airport_ID column refers to the Airport_ID in the airport table. The Aircraft_ID column refers to the Aircraft_ID in the aircraft table."
    },
    "allergy_1": {
        "Allergy_Type": "This table stores information about different allergy types. The \"Allergy\" column contains the name of a specific allergy, for example, \"Peanut\" or \"Dairy.\" The \"AllergyType\" column provides a broader classification of the allergy, such as \"Food\" or \"Environmental.\" This table essentially acts as a reference table to categorize allergies into broader types.",
        "Has_Allergy": "This table links students with their specific allergies. The \"StuID\" column references the student's unique identification number in the \"Student\" table. The \"Allergy\" column refers to the specific allergy from the \"Allergy_Type\" table, indicating which allergy a particular student has. This table essentially creates a many-to-many relationship between students and allergies, allowing each student to have multiple allergies and each allergy to be associated with multiple students.",
        "Student": "This table contains information about each student. The \"StuID\" column is the primary key, uniquely identifying each student. The \"LName\" and \"Fname\" columns store the student's last and first names respectively. The \"Age\" column records the student's age, while the \"Sex\" column indicates their gender. The \"Major\" column stores the student's major of study, likely referencing a corresponding table with major details. The \"Advisor\" column contains the ID of the student's advisor, referencing the advisor's details in another table. Finally, the \"city_code\" column stores a three-character code representing the city where the student resides, likely referencing a table with city details."
    },
    "apartment_rentals": {
        "Apartment_Buildings": "This table stores information about apartment buildings. Each building is identified by a unique building_id, and the table also stores the building's short name, full name, description, address, manager's name, and phone number. For example, the first row of the table might represent a building with id 1, called \"The Grand Apartments\" (short name) or \"The Grand Apartments at the Park\" (full name), with a description of \"Luxury apartment living in the heart of the city,\" an address of \"123 Main Street, Anytown, USA,\" managed by \"John Smith,\" and a phone number of \"555-123-4567.\"",
        "Apartments": "This table stores information about individual apartments within apartment buildings. Each apartment has a unique apt_id, and is associated with a specific building_id. The table also stores the apartment's type code (e.g., \"studio,\" \"1 bedroom,\" etc.), its number (e.g., \"A101\"), and the number of bathrooms, bedrooms, and rooms. For example, the first row of the table might represent an apartment with id 101, located in building 1, with a type code \"1 bedroom,\" a number \"A101,\" 1 bathroom, 1 bedroom, and a total of 3 rooms.",
        "Apartment_Facilities": "This table stores information about the facilities available in each apartment. It links apartments (identified by their apt_id) to specific facilities (identified by their facility_code). For example, the first row of the table might represent apartment 101 having a \"pool\" facility.",
        "Guests": "This table stores information about guests who may stay in the apartments. Each guest has a unique guest_id, and the table also stores their gender code (e.g., \"M\" for male, \"F\" for female), first name, last name, and date of birth. For example, the first row of the table might represent a guest with id 1001, male gender, named John Smith, born on January 1, 1980.",
        "Apartment_Bookings": "This table stores information about bookings made for apartments. Each booking has a unique apt_booking_id, and is associated with a specific apartment (apt_id) and guest (guest_id). The table also stores the booking status code (e.g., \"confirmed,\" \"cancelled,\" etc.), the booking start date, and the booking end date. For example, the first row of the table might represent a booking with id 2001, for apartment 101, made by guest 1001, with a status code of \"confirmed,\" starting on January 15, 2023, and ending on January 22, 2023.",
        "View_Unit_Status": "This table provides a snapshot of the availability status of each apartment at different points in time. It links apartments (identified by their apt_id) to bookings (identified by their apt_booking_id) and a specific status_date. It also indicates whether the apartment is available (available_yn = 1) or not (available_yn = 0) on that date. For example, the first row of the table might represent apartment 101, booked under booking 2001, being unavailable (available_yn = 0) on January 15, 2023."
    },
    "architecture": {
        "architect": "This table stores information about architects. The `id` column uniquely identifies each architect. The `name` column stores the architect's full name. The `nationality` column specifies the architect's country of origin. The `gender` column indicates the architect's gender.",
        "bridge": "This table stores information about bridges. The `architect_id` column references the `id` column in the `architect` table, linking each bridge to its architect. The `id` column is a unique identifier for each bridge. The `name` column stores the bridge's name. The `location` column specifies the city or region where the bridge is located. The `length_meters` column stores the bridge's length in meters. The `length_feet` column stores the bridge's length in feet.",
        "mill": "This table stores information about mills. The `architect_id` column references the `id` column in the `architect` table, linking each mill to its architect. The `id` column is a unique identifier for each mill. The `location` column specifies the city or region where the mill is located. The `name` column stores the mill's name. The `type` column indicates the type of mill, such as a flour mill or a saw mill. The `built_year` column stores the year the mill was constructed. The `notes` column can store any additional relevant information about the mill."
    },
    "assets_maintenance": {
        "Third_Party_Companies": "This table stores information about third-party companies that provide services to the organization. The `company_id` is a unique identifier for each company. `company_type` specifies the type of company, for example, \"SUPP\" for supplier or \"CONT\" for contractor. `company_name` stores the company's name, while `company_address` holds the address of the company. `other_company_details` allows for storing additional information about the company, which may not be captured in the other fields.",
        "Maintenance_Contracts": "This table maintains details about maintenance contracts between the organization and third-party companies. Each contract is identified by a unique `maintenance_contract_id`.  `maintenance_contract_company_id` links the contract to a specific company in the `Third_Party_Companies` table.  `contract_start_date` and `contract_end_date` indicate the duration of the contract. `other_contract_details` allows for storing any additional information related to the maintenance contract.",
        "Parts": "This table lists different parts used in assets. Each part is identified by a unique `part_id`. `part_name` holds the name of the part, and `chargeable_yn` indicates whether the part is chargeable or not. `chargeable_amount` specifies the price if the part is chargeable. `other_part_details` can store additional information about the part, such as its manufacturer or specifications.",
        "Skills": "This table contains information about various skills required for maintenance work. Each skill is identified by a unique `skill_id`. `skill_code` is a short code for the skill, while `skill_description` provides a detailed description of the skill.",
        "Staff": "This table stores information about the organization's staff. Each staff member has a unique `staff_id`. `staff_name` stores the name of the staff member, `gender` records their gender, and `other_staff_details` allows for storing additional information about the staff member, such as their department or contact details.",
        "Assets": "This table maintains records of all assets owned by the organization. Each asset has a unique `asset_id`. `maintenance_contract_id` links the asset to a specific maintenance contract in the `Maintenance_Contracts` table. `supplier_company_id` links the asset to a company in the `Third_Party_Companies` table. `asset_details` holds a description of the asset, while `asset_make` and `asset_model` specify the brand and model of the asset. `asset_acquired_date` and `asset_disposed_date` record the dates when the asset was acquired and disposed of, respectively. `other_asset_details` allows for storing additional information about the asset.",
        "Asset_Parts": "This table connects assets to the parts they are comprised of.  `asset_id` and `part_id` are foreign keys to the `Assets` and `Parts` tables respectively. Each row indicates that a specific part is used in a specific asset.",
        "Maintenance_Engineers": "This table maintains information about maintenance engineers employed by third-party companies. Each engineer has a unique `engineer_id`. `company_id` links the engineer to a company in the `Third_Party_Companies` table. `first_name` and `last_name` store the engineer's first and last names. `other_details` can store additional information about the engineer, such as their contact details.",
        "Engineer_Skills": "This table connects engineers to the skills they possess.  `engineer_id` and `skill_id` are foreign keys to the `Maintenance_Engineers` and `Skills` tables respectively. Each row indicates that a specific engineer possesses a particular skill.",
        "Fault_Log": "This table records details about faults reported on assets. Each fault entry has a unique `fault_log_entry_id`. `asset_id` links the fault to a specific asset in the `Assets` table. `recorded_by_staff_id` identifies the staff member who recorded the fault.  `fault_log_entry_datetime` specifies the date and time when the fault was recorded. `fault_description` provides a description of the fault. `other_fault_details` allows for storing additional information about the fault.",
        "Engineer_Visits": "This table maintains details about engineer visits to address faults on assets. Each visit is identified by a unique `engineer_visit_id`.  `contact_staff_id` identifies the staff member who contacted the engineer for the visit. `engineer_id` links the visit to a specific engineer in the `Maintenance_Engineers` table. `fault_log_entry_id` links the visit to a specific fault in the `Fault_Log` table. `fault_status` indicates the current status of the fault. `visit_start_datetime` and `visit_end_datetime` record the start and end times of the engineer's visit.  `other_visit_details` allows for storing any additional information related to the visit.",
        "Part_Faults": "This table lists common faults that occur with parts. Each fault is identified by a unique `part_fault_id`. `part_id` links the fault to a specific part in the `Parts` table. `fault_short_name` is a short code for the fault, and `fault_description` provides a detailed description. `other_fault_details` allows for storing additional information about the fault.",
        "Fault_Log_Parts": "This table connects fault entries to specific part faults.  `fault_log_entry_id` and `part_fault_id` are foreign keys to the `Fault_Log` and `Part_Faults` tables respectively.  `fault_status` specifies the current status of the part fault.",
        "Skills_Required_To_Fix": "This table links part faults to the skills required to fix them.  `part_fault_id` and `skill_id` are foreign keys to the `Part_Faults` and `Skills` tables respectively. Each row indicates that a specific skill is needed to address a particular part fault."
    },
    "baseball_1": {
        "all_star": "This table stores information regarding all-star players in Major League Baseball. It contains details like the player's ID, the year they were selected as an all-star, the number of the all-star game they played in, the game's unique ID, the team they played for, the league they belonged to, the number of games they played in the all-star game, and their starting position in the game.",
        "appearances": "This table records the number of games played by a player in various roles during a particular season. It includes information such as the year, the team's ID, the league ID, the player's ID, the total number of games played, the number of games started, the number of games played in batting positions (including designated hitter), the number of games played in defense, and games played in each specific position.",
        "manager_award": "This table holds data about awards received by managers in Major League Baseball. It contains information about the player's ID, the award ID, the year the award was given, the league the manager was in, any details about a tie for the award, and any notes about the award.",
        "player_award": "This table stores details about awards given to players in Major League Baseball. It includes the player's ID, the award's ID, the year the award was given, the league the player was in, any information about a tie for the award, and any notes about the award.",
        "manager_award_vote": "This table contains voting information for manager awards in Major League Baseball. It holds data about the award's ID, the year the award was voted on, the league the award was given in, the player's ID, the number of points the player received, the maximum points possible, and the number of first-place votes received.",
        "player_award_vote": "This table stores voting information for player awards in Major League Baseball. It contains information about the award's ID, the year the award was voted on, the league the award was given in, the player's ID, the number of points the player received, the maximum points possible, and the number of first-place votes received.",
        "batting": "This table keeps track of batting statistics for players in Major League Baseball during a particular season. It includes information about the player's ID, the year, the stint (a period of time a player plays for a specific team), the team's ID, the league ID, the number of games played, the number of at-bats, the number of runs scored, the number of hits, doubles, triples, home runs, runs batted in, stolen bases, caught stealing, walks, strikeouts, intentional walks, hit by pitch, sacrifice hits, sacrifice flies, and the number of games played in the infield.",
        "batting_postseason": "This table records the batting statistics of players in the Major League Baseball postseason. It includes data about the year, the round of the playoffs, the player's ID, the team's ID, the league ID, the number of games played, the number of at-bats, the number of runs scored, the number of hits, doubles, triples, home runs, runs batted in, stolen bases, caught stealing, walks, strikeouts, intentional walks, hit by pitch, sacrifice hits, sacrifice flies, and the number of games played in the infield.",
        "player_college": "This table stores information about the colleges attended by Major League Baseball players. It includes the player's ID, the college's ID, and the year the player attended the college.",
        "fielding": "This table contains fielding statistics for players in Major League Baseball during a particular season. It includes information about the player's ID, the year, the stint, the team's ID, the league ID, the player's position, the number of games played, the number of games started, the number of innings played, the number of putouts, assists, errors, double plays, passed balls, wild pitches, stolen bases allowed, caught stealing, and the number of times a runner was thrown out at home plate.",
        "fielding_outfield": "This table stores specific outfielding statistics for players in Major League Baseball during a particular season. It includes the player's ID, the year, the stint, and the number of games played at each outfield position (left field, center field, and right field).",
        "fielding_postseason": "This table records fielding statistics of players in the Major League Baseball postseason. It includes information about the player's ID, the year, the team's ID, the league ID, the round of the playoffs, the player's position, the number of games played, the number of games started, the number of innings played, the number of putouts, assists, errors, double plays, triple plays, passed balls, stolen bases allowed, and caught stealing.",
        "hall_of_fame": "This table stores information about players who have been inducted into the Baseball Hall of Fame. It includes the player's ID, the year they were voted on, the voting body, the number of ballots cast, the number of votes needed to be inducted, the number of votes received, whether they were inducted, the category they were inducted in, and any notes about the induction.",
        "home_game": "This table keeps track of the home games played by teams in Major League Baseball during a particular season. It includes information about the year, the league ID, the team's ID, the park ID where the games were played, the first and last date of the season, the number of games played at the park, the number of games for which tickets were available, and the total attendance at the park for the season.",
        "manager": "This table stores information about managers in Major League Baseball during a particular season. It includes data about the player's ID, the year, the team's ID, the league ID, the number of games managed during the season, the number of wins, losses, the team's ranking, and whether the manager was also a player on the team.",
        "manager_half": "This table records manager statistics for each half of a Major League Baseball season. It includes data about the player's ID, the year, the team's ID, the league ID, the half of the season, the number of games managed, the number of wins, losses, and the team's ranking.",
        "player": "This table stores information about all players in Major League Baseball. It includes the player's ID, their birth year, month, and day, birth country, state, and city, death year, month, and day, death country, state, and city, their first and last name, given name, weight, height, batting hand, throwing hand, debut date, final game date, RetroID, and BBRefID.",
        "park": "This table stores information about ballparks in Major League Baseball. It includes the park ID, the park's name, its alias, the city, state, and country it is located in.",
        "pitching": "This table contains pitching statistics for players in Major League Baseball during a particular season. It includes information about the player's ID, the year, the stint, the team's ID, the league ID, the number of wins, losses, games pitched, games started, complete games, shutouts, saves, innings pitched (in outs), hits allowed, earned runs allowed, home runs allowed, walks allowed, strikeouts, batting average of opposing hitters, earned run average, intentional walks, wild pitches, hit by pitch, balks, batters faced, games finished, runs allowed, sacrifice hits allowed, sacrifice flies allowed, and the number of games played in the infield.",
        "pitching_postseason": "This table records pitching statistics of players in the Major League Baseball postseason. It includes information about the player's ID, the year, the round of the playoffs, the team's ID, the league ID, the number of wins, losses, games pitched, games started, complete games, shutouts, saves, innings pitched (in outs), hits allowed, earned runs allowed, home runs allowed, walks allowed, strikeouts, batting average of opposing hitters, earned run average, intentional walks, wild pitches, hit by pitch, balks, batters faced, games finished, runs allowed, sacrifice hits allowed, sacrifice flies allowed, and the number of games played in the infield.",
        "salary": "This table stores information about the salaries of Major League Baseball players during a particular season. It includes the year, the team's ID, the league ID, the player's ID, and the player's salary.",
        "college": "This table stores information about colleges in the United States. It includes the college's ID, the college's full name, the city it is located in, the state it is located in, and the country it is located in.",
        "postseason": "This table contains information about the Major League Baseball postseason, including the teams that competed, their wins, losses, and ties in each round. It includes the year, the round of the playoffs, the winning team's ID and league ID, the losing team's ID and league ID, the number of wins, losses, and ties.",
        "team": "This table stores information about teams in Major League Baseball during a particular season. It includes the year, the league ID, the team's ID, the franchise ID, the division ID, the team's ranking, the number of games played, the number of home games played, the number of wins, losses, whether they won their division, wild card, league, or World Series, the number of runs scored, at-bats, hits, doubles, triples, home runs, walks, strikeouts, stolen bases, caught stealing, hit by pitch, sacrifice flies, runs allowed, earned runs allowed, earned run average, complete games pitched, shutouts, saves, innings pitched, hits allowed, home runs allowed, walks allowed, strikeouts allowed, errors, double plays, fielding percentage, team name, ballpark name, attendance, ballpark factor, park factor, team ID on Baseball-Reference.com, team ID from Lahman Database version 4.5, and team ID on Retrosheet.org.",
        "team_franchise": "This table stores information about franchises in Major League Baseball. It includes the franchise ID, the franchise name, whether the franchise is active, and the name of the associated team in the National Association of Base Ball Players.",
        "team_half": "This table stores information about the performance of teams in Major League Baseball during each half of a particular season. It includes the year, the league ID, the team's ID, the half of the season, the division ID, whether they won their division, the team's ranking, the number of games played, the number of wins, and the number of losses."
    },
    "behavior_monitoring": {
        "Ref_Address_Types": "This table stores information about different address types used in the database. The address_type_code column contains a unique code that identifies each address type. The address_type_description column provides a brief description of the address type. For example, the first row of this table might be: \"address_type_code\" : \"HOME\", \"address_type_description\" : \"Home Address\".",
        "Ref_Detention_Type": "This table stores information about different types of detention assigned to students. The detention_type_code column contains a unique code that identifies each detention type. The detention_type_description column provides a brief description of the detention type. For example, the first row of this table might be: \"detention_type_code\" : \"LATE\", \"detention_type_description\" : \"Late to Class\".",
        "Ref_Incident_Type": "This table stores information about different types of incidents that occur in the school. The incident_type_code column contains a unique code that identifies each incident type. The incident_type_description column provides a brief description of the incident type. For example, the first row of this table might be: \"incident_type_code\" : \"FIGHT\", \"incident_type_description\" : \"Physical Fight\".",
        "Addresses": "This table stores information about different addresses in the database. The address_id column is a unique identifier for each address. The line_1, line_2, and line_3 columns store the street address. The city column stores the city name. The zip_postcode column stores the zip code or postal code. The state_province_county column stores the state, province, or county name. The country column stores the country name. The other_address_details column can be used to store any additional information about the address, such as an apartment number or a specific building name.",
        "Students": "This table stores information about students enrolled in the school. The student_id column is a unique identifier for each student. The address_id column links each student to their address information stored in the Addresses table. The first_name, middle_name, and last_name columns store the student's name. The cell_mobile_number column stores the student's cell phone number. The email_address column stores the student's email address. The date_first_rental column stores the date the student first enrolled in the school. The date_left_university column stores the date the student left the school. The other_student_details column can be used to store any additional information about the student.",
        "Teachers": "This table stores information about teachers working in the school. The teacher_id column is a unique identifier for each teacher. The address_id column links each teacher to their address information stored in the Addresses table. The first_name, middle_name, and last_name columns store the teacher's name. The gender column stores the teacher's gender. The cell_mobile_number column stores the teacher's cell phone number. The email_address column stores the teacher's email address. The other_details column can be used to store any additional information about the teacher.",
        "Assessment_Notes": "This table stores notes written by teachers about students. The notes_id column is a unique identifier for each note. The student_id column links the note to the student it is about. The teacher_id column links the note to the teacher who wrote it. The date_of_notes column stores the date the note was written. The text_of_notes column stores the actual text of the note. The other_details column can be used to store any additional information about the note.",
        "Behavior_Incident": "This table stores information about behavioral incidents involving students. The incident_id column is a unique identifier for each incident. The incident_type_code column links the incident to the incident type stored in the Ref_Incident_Type table. The student_id column links the incident to the student involved. The date_incident_start column stores the date and time the incident started. The date_incident_end column stores the date and time the incident ended. The incident_summary column stores a brief summary of the incident. The recommendations column stores any recommendations made about the incident. The other_details column can be used to store any additional information about the incident.",
        "Detention": "This table stores information about detention assigned to students. The detention_id column is a unique identifier for each detention. The detention_type_code column links the detention to the detention type stored in the Ref_Detention_Type table. The teacher_id column links the detention to the teacher who assigned it. The datetime_detention_start column stores the date and time the detention started. The datetime_detention_end column stores the date and time the detention ended. The detention_summary column stores a brief summary of the detention. The other_details column can be used to store any additional information about the detention.",
        "Student_Addresses": "This table stores information about the addresses of students. The student_id column links the address to the student it belongs to. The address_id column links the address to the address information stored in the Addresses table. The date_address_from column stores the date the student started living at the address. The date_address_to column stores the date the student stopped living at the address. The monthly_rental column stores the amount of rent the student pays for the address. The other_details column can be used to store any additional information about the address.",
        "Students_in_Detention": "This table stores information about students who are assigned to detention. The student_id column links the detention to the student it is assigned to. The detention_id column links the detention to the detention information stored in the Detention table. The incident_id column links the detention to the incident that led to the detention."
    },
    "bike_1": {
        "station": "This table stores information about different bike stations in the city. The 'id' column is a unique identifier for each station. The 'name' column stores the name of the station. 'lat' and 'long' columns store the latitude and longitude coordinates of the station, respectively. 'dock_count' column stores the total number of docks at the station. The 'city' column stores the city where the station is located. Finally, the 'installation_date' column stores the date when the station was installed.",
        "status": "This table stores real-time information about the availability of bikes and docks at each station. The 'station_id' column links each status record to a specific station in the 'station' table. 'bikes_available' and 'docks_available' columns indicate the number of bikes and docks available at that station at the specific time. The 'time' column records the timestamp when this status information was captured.",
        "trip": "This table stores information about individual bike trips taken by users. 'id' is a unique identifier for each trip. 'duration' stores the duration of the trip in seconds. 'start_date' and 'end_date' columns store the timestamps of when the trip started and ended. 'start_station_name' and 'end_station_name' specify the names of the stations where the trip began and ended. 'bike_id' represents the identifier of the bike used for the trip. 'subscription_type' indicates the type of subscription the user had at the time of the trip. Finally, 'zip_code' stores the zip code of the user who took the trip.",
        "weather": "This table stores weather data for different zip codes, potentially corresponding to the locations of the bike stations. 'date' column stores the date for which the weather information is recorded.  The remaining columns store various weather parameters for that date, including maximum, mean, and minimum values for temperature, dew point, humidity, sea level pressure, visibility, wind speed, and gust speed. 'precipitation_inches' indicates the amount of precipitation received. 'cloud_cover' represents the cloud coverage. 'events' stores any notable weather events that occurred on that day. 'wind_dir_degrees' indicates the direction of the wind in degrees. Finally, 'zip_code' identifies the specific zip code for which the weather data is recorded."
    },
    "body_builder": {
        "body_builder": "This table stores information about bodybuilders and their weightlifting performance.  Each row represents a different bodybuilder, identified by their unique Body_Builder_ID. The People_ID column links this table to the \"people\" table, allowing us to access additional information about the bodybuilder. The Snatch, Clean_Jerk, and Total columns represent the bodybuilder's best recorded lifts in these weightlifting categories. Snatch is the maximum weight lifted in a single movement from the floor to an overhead position. Clean_Jerk is the maximum weight lifted in a two-part movement where the barbell is first raised to the shoulders and then overhead. Total represents the combined maximum weight lifted in Snatch and Clean_Jerk.",
        "people": "This table stores personal information about individuals, including their name, height, weight, birth date, and birth place. Each row represents a different individual, identified by their unique People_ID. The Name column stores the individual's full name. Height and Weight store the individual's recorded height and weight. Birth_Date represents the individual's date of birth, and Birth_Place stores the location where the individual was born. This table can be joined with the \"body_builder\" table to provide more comprehensive information about bodybuilders, such as their personal details."
    },
    "book_2": {
        "publication": "This table stores information about the publications of books. Each row represents a specific publication of a book, identified by a unique `Publication_ID`.  The `Book_ID` column links each publication to a specific book in the `book` table. The `Publisher` column stores the name of the publisher who released the book. The `Publication_Date` column records the date when the book was published. Finally, the `Price` column stores the price of the published book.",
        "book": "This table stores information about different books. Each row represents a specific book, identified by a unique `Book_ID`. The `Title` column stores the title of the book. The `Issues` column might be related to the number of editions or reprints of the book. The `Writer` column stores the name of the author who wrote the book."
    },
    "browser_web": {
        "Web_client_accelerator": "This table stores information about various web client accelerators. Each row represents a different web client accelerator, with the `id` column acting as the primary key. The `name` column stores the name of the web client accelerator. The `Operating_system` column specifies the operating system that the accelerator is designed for. The `Client` column likely indicates the type of client using the accelerator, such as a desktop browser or a mobile app. Finally, the `Connection` column potentially describes the type of connection used by the accelerator, such as a wired or wireless connection.",
        "browser": "This table contains information about different web browsers. Each row corresponds to a unique browser. The `id` column acts as the primary key. The `name` column stores the name of the browser, such as Chrome, Firefox, or Safari. The `market_share` column represents the estimated percentage of the overall web browser market that a particular browser holds.",
        "accelerator_compatible_browser": "This table describes the compatibility between web client accelerators and web browsers. Each row represents a specific combination of a web client accelerator and a web browser. The `accelerator_id` column links to the `id` column in the `Web_client_accelerator` table, indicating the specific accelerator. Similarly, the `browser_id` column links to the `id` column in the `browser` table, indicating the specific browser. The `compatible_since_year` column records the year from which the accelerator became compatible with the corresponding browser. This table allows you to determine which accelerators are compatible with which browsers and since what year."
    },
    "candidate_poll": {
        "candidate": "This table stores information about political candidates. Each candidate has a unique Candidate_ID, and is linked to a specific person in the people table through the People_ID column. The Poll_Source column identifies the source of the poll data, while the Date column specifies when the poll was conducted. The Support_rate, Consider_rate, Oppose_rate, and Unsure_rate columns represent the percentage of respondents who indicated support, consideration, opposition, or uncertainty about the candidate, respectively.",
        "people": "This table stores basic information about individuals, including their People_ID, sex, name, date of birth, height, and weight. Each person has a unique People_ID that serves as the primary key for this table. The sex column indicates the person's gender, while the Name column stores their full name. The Date_of_Birth column records their birth date, and the Height and Weight columns store their physical measurements."
    },
    "cinema": {
        "film": "This table stores information about films. The Film_ID column is the unique identifier for each film. Rank_in_series represents the film's position within a series, while Number_in_season indicates the film's episode number within a specific season. The Title column stores the name of the film, Directed_by lists the director, Original_air_date records the original air date, and Production_code contains the unique production code associated with the film.",
        "cinema": "This table contains information about various cinemas. Cinema_ID acts as the unique identifier for each cinema. Name stores the name of the cinema, Openning_year records the year the cinema opened, Capacity indicates the number of seats in the cinema, and Location stores the physical location of the cinema.",
        "schedule": "This table records the schedule of films at different cinemas. The Cinema_ID and Film_ID columns together form the primary key and uniquely identify each entry. The Date column indicates the date on which the film is screened, while Show_times_per_day specifies the number of times the film is shown on that day. Finally, the Price column stores the ticket price for the film."
    },
    "city_record": {
        "city": "Stores information about cities in China. The table contains the following columns: City_ID is a unique identifier for each city, City is the English name of the city, Hanzi is the name of the city written in traditional Chinese characters, Hanyu_Pinyin is the romanized pronunciation of the city name using the Pinyin system, Regional_Population is the population of the city and its surrounding region, and GDP is the Gross Domestic Product of the city.",
        "match": "Stores information about football matches. The table contains the following columns: Match_ID is a unique identifier for each match, Date is the date of the match, Venue is the location of the match, Score is the score of the match, Result is the final result of the match, and Competition is the name of the football tournament or competition where the match took place.",
        "temperature": "Stores information about average monthly temperatures in different cities in China. The table contains the following columns: City_ID is a foreign key that references the City_ID in the city table, which specifies the city that the temperature data is for. The remaining columns represent the average temperature in degrees Celsius for each month of the year.",
        "hosting_city": "Stores information about which city hosted a particular match. The table contains the following columns: Year is the year the match was held, Match_ID is a foreign key that references the Match_ID in the match table, which specifies the match that was hosted by the city, and Host_City is a foreign key that references the City_ID in the city table, which specifies the city that hosted the match."
    },
    "climbing": {
        "mountain": "Stores information about different mountains around the world. Each mountain has a unique Mountain_ID, a name, its height in meters, its prominence (how much taller it is than the surrounding terrain), the mountain range it belongs to, and the country it is located in.",
        "climber": "This table stores information about climbers who have ascended mountains. Each climber has a unique Climber_ID, a name, their country of origin, the time they completed their climb (formatted as text), the number of points they earned for the climb (presumably based on the difficulty or prominence of the mountain), and the Mountain_ID of the mountain they climbed. The Mountain_ID references the mountain table, allowing us to link climbers to specific mountains."
    },
    "club_1": {
        "Student": "This table stores information about students. The `StuID` column contains a unique identifier for each student. The `LName` and `Fname` columns store the last and first names of the student, respectively. The `Age` column stores the age of the student. The `Sex` column stores the student's gender. The `Major` column contains a reference to the student's major, which is likely stored in another table. The `Advisor` column contains a reference to the student's advisor, which is also likely stored in another table. Finally, the `city_code` column stores the city code of the city where the student resides.",
        "Club": "This table stores information about clubs. The `ClubID` column contains a unique identifier for each club. The `ClubName` column stores the name of the club. The `ClubDesc` column stores a description of the club. Finally, the `ClubLocation` column stores the location of the club.",
        "Member_of_club": "This table stores information about the members of different clubs. The `StuID` column contains a reference to a student in the `Student` table, indicating the student who is a member of the club. The `ClubID` column contains a reference to a club in the `Club` table, indicating the club the student is a member of. Finally, the `Position` column stores the position held by the student in the club."
    },
    "coffee_shop": {
        "shop": "Stores information about each shop.  The `Shop_ID` column is the unique identifier for each shop. `Address` stores the physical address of the shop. `Num_of_staff` indicates the number of staff working at the shop, although the type is `text` suggesting it could be a range or description rather than a precise number.  `Score` likely represents a customer rating or score for the shop. `Open_Year` stores the year the shop was established.",
        "member": "Stores information about members of the system. The `Member_ID` is a unique identifier for each member. `Name` stores the member's name, `Membership_card` likely refers to the member's unique membership card number. `Age` stores the member's age in years. `Time_of_purchase` is likely the total time a member has been a member or the total number of purchases they've made. `Level_of_membership` represents the membership tier or level of the member, possibly with different benefits associated with each level. `Address` stores the member's physical address.",
        "happy_hour": "Stores information about happy hour events at different shops. The `HH_ID` is a unique identifier for each happy hour event. `Shop_ID` links to a specific shop where the happy hour is taking place, using a foreign key relationship with the `shop` table.  `Month` indicates the month in which the happy hour event occurs. `Num_of_shaff_in_charge` specifies the number of staff assigned to handle the happy hour event.",
        "happy_hour_member": "Stores information about members who participated in a particular happy hour event. The `HH_ID` and `Member_ID` columns together act as a composite primary key, linking to the corresponding `happy_hour` and `member` tables, respectively. `Total_amount` represents the total amount spent by a member during that specific happy hour event."
    },
    "college_2": {
        "classroom": "Stores information about all the classrooms in the university. The `building` column contains the name of the building where the classroom is located, the `room_number` column stores the unique room number within the building, and the `capacity` column stores the maximum number of students that can be accommodated in the classroom. For example, the first row in the classroom table indicates a classroom located in Lamberton building, with room number 134 and a capacity of 10 students.",
        "department": "Stores information about all the departments in the university. The `dept_name` column contains the name of the department, the `building` column stores the name of the building where the department's office is located, and the `budget` column stores the department's annual budget. For example, the first row in the department table indicates a Civil Engineering department whose office is located in Chandler building, and has an annual budget of $255,041.46.",
        "course": "Stores information about all the courses offered by the university. The `course_id` column contains the unique course ID, the `title` column stores the course's title, the `dept_name` column stores the department which offers this course, and the `credits` column stores the number of credits this course is worth. For example, the first row in the course table indicates a course with ID 787, titled \"C  Programming\", offered by the Mech. Eng. department and worth 4 credits.",
        "instructor": "Stores information about all the instructors at the university. The `ID` column contains the unique instructor ID, the `name` column stores the instructor's name, the `dept_name` column stores the department which employs the instructor, and the `salary` column stores the instructor's annual salary. For example, the first row in the instructor table indicates an instructor with ID 63395, named \"McKinnon\", employed by the Cybernetics department and earns a salary of $94,333.99.",
        "section": "Stores information about different sections of a course offered in a particular semester and year. The `course_id` column stores the course ID, the `sec_id` column stores the section ID of the course, the `semester` column stores the semester in which the section is offered, the `year` column stores the year in which the section is offered, the `building` column stores the building where the section is held, the `room_number` column stores the room number within the building, and the `time_slot_id` column stores the time slot assigned to this section. For example, the first row in the section table indicates section 1 of course 313 offered in the Fall semester of 2010. It is held in Chandler building, room 804 and has time slot ID N.",
        "teaches": "Stores information about which instructor teaches which section of a course. The `ID` column stores the instructor ID, the `course_id` column stores the course ID, the `sec_id` column stores the section ID of the course, the `semester` column stores the semester in which the instructor teaches the section, and the `year` column stores the year in which the instructor teaches the section. For example, the first row in the teaches table indicates instructor 34175 teaches section 1 of course 747 in the Spring semester of 2004.",
        "student": "Stores information about the students enrolled at the university. The `ID` column contains the unique student ID, the `name` column stores the student's name, the `dept_name` column stores the department which the student is majoring in, and the `tot_cred` column stores the total number of credits earned by the student. For example, the first row in the student table indicates a student with ID 24746, named \"Schrefl\", majoring in History and has earned 4 credits.",
        "takes": "Stores information about which student took which section of a course and their grades. The `ID` column stores the student ID, the `course_id` column stores the course ID, the `sec_id` column stores the section ID of the course, the `semester` column stores the semester in which the student took the section, the `year` column stores the year in which the student took the section, and the `grade` column stores the grade received by the student for the course. For example, the first row in the takes table indicates student 65901 took section 1 of course 401 in the Fall semester of 2003, and received a grade of \"C-\".",
        "prereq": "Stores information about the prerequisite courses for each course. The `course_id` column stores the course ID for which prerequisites are defined, and the `prereq_id` column stores the course ID of the prerequisite course. For example, the first row in the prereq table indicates that course 376 has a prerequisite of course 130."
    },
    "college_3": {
        "Student": "Stores information about students in a university or college. The StuID column is the student's unique identification number. LName and Fname represent the student's last name and first name, respectively. Age stores the student's age. Sex indicates the student's gender. Major stores the department ID the student is majoring in. Advisor stores the faculty ID of the student's advisor. City_code stores the code of the city where the student lives.",
        "Faculty": "Stores information about faculty members in a university or college. The FacID column is the faculty member's unique identification number. Lname and Fname represent the faculty member's last name and first name, respectively. Rank stores the faculty member's academic rank (e.g., Professor, Associate Professor, Assistant Professor). Sex indicates the faculty member's gender. Phone stores the faculty member's phone number. Room stores the faculty member's office room number. Building stores the building where the faculty member's office is located.",
        "Department": "Stores information about departments in a university or college. The DNO column is the department's unique identification number. Division stores a code representing the division the department belongs to (e.g., CS, Math, etc.). DName represents the department's full name. Room stores the department's office room number. Building stores the building where the department's office is located. DPhone stores the department's phone number.",
        "Member_of": "Stores information about faculty members' affiliations with different departments. The FacID column references the faculty member from the Faculty table. The DNO column references the department from the Department table. Appt_Type stores the type of appointment the faculty member has in the department (e.g., \"Full-Time\", \"Part-Time\", \"Adjunct\"). This table helps track which faculty members are associated with which departments and their roles within those departments.",
        "Course": "Stores information about courses offered at the university or college. The CID column is the course's unique identification number. CName represents the course's full name. Credits stores the number of credit hours the course is worth. Instructor stores the faculty ID of the instructor teaching the course, referencing the Faculty table. Days stores the days of the week the course meets. Hours stores the time of day the course meets. DNO stores the department ID that offers the course, referencing the Department table.",
        "Minor_in": "Stores information about students' minor specializations. The StuID column references the student from the Student table. The DNO column references the department from the Department table. This table tracks which students are minoring in which departments.",
        "Enrolled_in": "Stores information about students' enrollments in courses. The StuID column references the student from the Student table. The CID column references the course from the Course table. Grade stores the student's grade in the course, referencing the Gradeconversion table. This table helps track which students are enrolled in which courses and their grades in those courses.",
        "Gradeconversion": "Stores information about the numerical equivalent of letter grades. The lettergrade column represents the letter grade awarded (e.g., A, B, C, etc.). Gradepoint stores the corresponding numerical grade point value for each letter grade. This table is used to convert letter grades to numerical grades for GPA calculations."
    },
    "company_employee": {
        "people": "This table stores information about individuals. The `People_ID` column uniquely identifies each person. The `Age` column stores the age of the person. The `Name` column holds the person's name. The `Nationality` column indicates the nationality of the individual. Finally, the `Graduation_College` column stores the name of the college from which the person graduated.",
        "company": "This table stores information about different companies. The `Company_ID` column uniquely identifies each company. The `Name` column holds the company's name. The `Headquarters` column indicates the location of the company's headquarters. The `Industry` column specifies the industry that the company operates in. The `Sales_in_Billion` column stores the company's annual sales in billions of dollars. The `Profits_in_Billion` column stores the company's annual profits in billions of dollars. The `Assets_in_Billion` column stores the company's total assets in billions of dollars. Finally, the `Market_Value_in_Billion` column stores the company's market value in billions of dollars.",
        "employment": "This table stores information about the employment relationship between people and companies. The `Company_ID` column references the `Company_ID` from the `company` table, indicating which company the person is employed by. The `People_ID` column references the `People_ID` from the `people` table, indicating which person is employed. The `Year_working` column indicates the year in which the person began working at the company."
    },
    "company_office": {
        "buildings": "This table contains information about various buildings across different cities. The `id` column represents the unique identifier for each building. The `name` column stores the name of the building. The `City` column indicates the city where the building is located. The `Height` column records the height of the building in some unit (likely feet or meters). The `Stories` column stores the number of floors in the building. Finally, the `Status` column indicates the current status of the building, which could be things like \"Completed,\" \"Under Construction,\" or \"Proposed.\"",
        "Companies": "This table contains information about different companies. The `id` column represents the unique identifier for each company. The `name` column stores the name of the company. The `Headquarters` column indicates the location of the company's headquarters. The `Industry` column stores the industry in which the company operates. The `Sales_billion` column records the company's annual sales revenue in billions of dollars. The `Profits_billion` column stores the company's annual profits in billions of dollars. The `Assets_billion` column records the company's total assets in billions of dollars. Lastly, the `Market_Value_billion` column stores the company's market value in billions of dollars.",
        "Office_locations": "This table stores information about the office locations of companies within buildings. The `building_id` column references the `id` column in the `buildings` table, indicating the specific building where the office is located. The `company_id` column references the `id` column in the `Companies` table, indicating the specific company that has an office in the building. The `move_in_year` column indicates the year when the company moved into the building."
    },
    "county_public_safety": {
        "county_public_safety": "Stores information about public safety in each county, including population, police officers, and crime statistics. Each row represents a unique county, identified by its `County_ID`. `Name` is the name of the county. `Population` represents the total number of residents in the county.  `Police_officers` indicates the number of sworn police officers in the county. `Residents_per_officer` calculates the ratio of residents to police officers, providing insight into police coverage.  `Case_burden` likely represents the number of cases handled by police, indicating the workload.  `Crime_rate` indicates the crime rate per 100,000 people, suggesting the level of crime activity. `Police_force` might denote the type of police force (e.g., county sheriff, city police).  `Location` provides the geographic location of the county.",
        "city": "Stores demographic information about cities within each county. Each row represents a unique city identified by its `City_ID`.  `County_ID` links each city to its corresponding county in the `county_public_safety` table. `Name` is the name of the city. The columns `White`, `Black`, `Amerindian`, `Asian`, `Multiracial`, and `Hispanic` represent the percentage of the city's population belonging to each racial or ethnic group. This information allows analysis of the demographic makeup of cities within each county."
    },
    "cre_Docs_and_Epenses": {
        "Ref_Document_Types": "Stores information about all the different document types that are used in the database. The Document_Type_Code column contains a unique code that identifies each document type. The Document_Type_Name column stores the name of the document type, while the Document_Type_Description column contains a more detailed description of the document type.",
        "Ref_Budget_Codes": "Stores information about different budget codes. The Budget_Type_Code column contains a unique code identifying each budget type. The Budget_Type_Description column contains a description of each budget type, which could include information about the purpose of the budget, the intended use of the funds, etc.",
        "Projects": "Stores information about different projects. The Project_ID column contains a unique code identifying each project. The Project_Details column contains information about the project itself, such as the project title, description, location, and other relevant details.",
        "Documents": "Stores information about different documents, such as reports, contracts, invoices, etc. The Document_ID column contains a unique code identifying each document. The Document_Type_Code column is a foreign key referencing the Ref_Document_Types table, indicating the type of document. The Project_ID column is a foreign key referencing the Projects table, linking the document to a specific project. The Document_Date column stores the date when the document was created or received. The Document_Name column stores the name of the document, and the Document_Description column contains a brief description of the document. The Other_Details column stores any additional information about the document, such as its file size, author, or other relevant details.",
        "Statements": "Stores information about different statements, which are likely related to the documents. The Statement_ID column contains a unique code identifying each statement. The Statement_Details column contains a description of the statement, providing details about its content and purpose.",
        "Documents_with_Expenses": "Stores information about expenses related to documents. The Document_ID column is a foreign key referencing the Documents table, linking the expenses to a specific document. The Budget_Type_Code column is a foreign key referencing the Ref_Budget_Codes table, indicating the type of budget used for the expense. The Document_Details column contains a detailed description of the expense, including the amount, date, vendor, and other relevant details.",
        "Accounts": "Stores information about different accounts related to statements. The Account_ID column contains a unique code identifying each account. The Statement_ID column is a foreign key referencing the Statements table, linking the account to a specific statement. The Account_Details column contains a description of the account, including its name, purpose, and other relevant details."
    },
    "cre_Doc_Control_Systems": {
        "Ref_Document_Types": "This table contains information about the different types of documents that the company handles. The `document_type_code` column is a unique identifier for each type of document. The `document_type_description` column provides a detailed description of the document type. For example, a sample row might contain the information `document_type_code`: \"INV\" and `document_type_description`: \"Invoice\".",
        "Roles": "This table defines the different roles that employees can have within the company. The `role_code` column is a unique identifier for each role. The `role_description` column provides a descriptive name for the role. For example, a sample row might contain the information `role_code`: \"MGR\" and `role_description`: \"Manager\".",
        "Addresses": "This table stores information about different addresses. The `address_id` column is a unique identifier for each address. The `address_details` column contains the complete address details. For example, a sample row might contain the information `address_id`: 1 and `address_details`: \"123 Main Street, Anytown, CA 12345\".",
        "Ref_Document_Status": "This table contains information about the different statuses that a document can have. The `document_status_code` column is a unique identifier for each document status. The `document_status_description` column provides a descriptive name for the document status. For example, a sample row might contain the information `document_status_code`: \"DRAFT\" and `document_status_description`: \"Draft\".",
        "Ref_Shipping_Agents": "This table contains information about the different shipping agents that the company uses. The `shipping_agent_code` column is a unique identifier for each shipping agent. The `shipping_agent_name` column provides the name of the shipping agent. The `shipping_agent_description` column provides a more detailed description of the shipping agent. For example, a sample row might contain the information `shipping_agent_code`: \"FEDEX\" and `shipping_agent_name`: \"FedEx\" and `shipping_agent_description`: \"Federal Express Corporation\".",
        "Documents": "This table contains information about all the documents handled by the company. The `document_id` column is a unique identifier for each document. The `document_status_code` column references the status of the document using the `document_status_code` from the `Ref_Document_Status` table. The `document_type_code` column references the type of document using the `document_type_code` from the `Ref_Document_Types` table. The `shipping_agent_code` column references the shipping agent used for the document using the `shipping_agent_code` from the `Ref_Shipping_Agents` table. The `receipt_date` column stores the date when the document was received. The `receipt_number` column stores the receipt number associated with the document. The `other_details` column contains any additional information about the document. For example, a sample row might contain the information `document_id`: 1, `document_status_code`: \"DRAFT\", `document_type_code`: \"INV\", `shipping_agent_code`: \"FEDEX\", `receipt_date`: \"2023-03-08\", `receipt_number`: \"12345\", and `other_details`: \"Invoice for order # 1000\".",
        "Employees": "This table stores information about all the employees in the company. The `employee_id` column is a unique identifier for each employee. The `role_code` column references the employee's role using the `role_code` from the `Roles` table. The `employee_name` column stores the employee's name. The `other_details` column contains any additional information about the employee. For example, a sample row might contain the information `employee_id`: 1, `role_code`: \"MGR\", `employee_name`: \"John Doe\", and `other_details`: \"Manager of Sales\".",
        "Document_Drafts": "This table keeps track of the different drafts created for each document. The `document_id` column references the document using the `document_id` from the `Documents` table. The `draft_number` column is a unique identifier for each draft of the document. The `draft_details` column contains any additional information about the draft. For example, a sample row might contain the information `document_id`: 1 and `draft_number`: 1 and `draft_details`: \"Draft version submitted to client\".",
        "Draft_Copies": "This table tracks the copies created for each draft of a document. The `document_id` column references the document using the `document_id` from the `Documents` table. The `draft_number` column references the specific draft of the document using the `draft_number` from the `Document_Drafts` table. The `copy_number` column is a unique identifier for each copy of the draft. For example, a sample row might contain the information `document_id`: 1, `draft_number`: 1, and `copy_number`: 1.",
        "Circulation_History": "This table records the history of how the different copies of drafts were circulated among employees. The `document_id` column references the document using the `document_id` from the `Documents` table. The `draft_number` column references the draft of the document using the `draft_number` from the `Document_Drafts` table. The `copy_number` column references the specific copy of the draft using the `copy_number` from the `Draft_Copies` table. The `employee_id` column references the employee who received the copy using the `employee_id` from the `Employees` table. For example, a sample row might contain the information `document_id`: 1, `draft_number`: 1, `copy_number`: 1, and `employee_id`: 1.",
        "Documents_Mailed": "This table stores information about when documents were mailed to specific addresses. The `document_id` column references the document using the `document_id` from the `Documents` table. The `mailed_to_address_id` column references the address where the document was mailed using the `address_id` from the `Addresses` table. The `mailing_date` column records the date when the document was mailed. For example, a sample row might contain the information `document_id`: 1, `mailed_to_address_id`: 1, and `mailing_date`: \"2023-03-09\"."
    },
    "cre_Doc_Tracking_DB": {
        "Ref_Document_Types": "This table contains information about different types of documents that are stored in the database. The `Document_Type_Code` is a unique identifier for each type of document and is a character string of length 15. The `Document_Type_Name` is the name of the document type and is a string of up to 255 characters. The `Document_Type_Description` provides a detailed explanation of the document type and is also a string of up to 255 characters.",
        "Ref_Calendar": "This table represents a calendar and stores information about each date. The `Calendar_Date` column stores the date and is a DATETIME data type. The `Day_Number` column represents the sequential day number within the year, starting from 1 for January 1st.",
        "Ref_Locations": "This table stores details about different locations within the company where documents can be stored. The `Location_Code` column is a unique identifier for each location, stored as a character string of length 15. The `Location_Name` column stores the name of the location, while the `Location_Description` provides a detailed description of the location.",
        "Roles": "This table contains details about different roles within the company. The `Role_Code` column is a unique identifier for each role and is a character string of length 15. The `Role_Name` column stores the name of the role and the `Role_Description` provides a more detailed description of the role.",
        "All_Documents": "This table stores information about all documents stored in the company. The `Document_ID` is a unique identifier for each document. The `Date_Stored` column stores the date when the document was stored in the database, and is linked to the `Ref_Calendar` table through a foreign key. The `Document_Type_Code` column is a foreign key referencing the `Ref_Document_Types` table and specifies the type of the document. The `Document_Name` and `Document_Description` columns store the name and a brief description of the document respectively, and the `Other_Details` column can store any additional information related to the document.",
        "Employees": "This table stores information about all employees of the company. The `Employee_ID` is a unique identifier for each employee. The `Role_Code` is a foreign key referencing the `Roles` table and indicates the employee's role in the company. The `Employee_Name` column stores the employee's name, `Gender_MFU` stores the employee's gender (likely 'M' for male, 'F' for female, and 'U' for unspecified), and `Date_of_Birth` stores the employee's date of birth. The `Other_Details` column can store additional information about the employee.",
        "Document_Locations": "This table maintains information about the movement of documents between different locations. The `Document_ID` column is a foreign key referencing the `All_Documents` table and identifies the specific document. The `Location_Code` column is a foreign key referencing the `Ref_Locations` table and indicates the location where the document is stored. The `Date_in_Location_From` and `Date_in_Locaton_To` columns store the date when the document arrived at the location and the date when it was moved from the location respectively, and are linked to the `Ref_Calendar` table via foreign keys.",
        "Documents_to_be_Destroyed": "This table stores information about documents that are scheduled for destruction. The `Document_ID` is a foreign key referencing the `All_Documents` table and identifies the specific document. The `Destruction_Authorised_by_Employee_ID` is a foreign key referencing the `Employees` table and identifies the employee who authorized the destruction of the document. The `Destroyed_by_Employee_ID` is another foreign key referencing the `Employees` table and identifies the employee who actually destroyed the document. The `Planned_Destruction_Date` and `Actual_Destruction_Date` columns store the planned and actual dates of destruction, and are linked to the `Ref_Calendar` table via foreign keys. The `Other_Details` column can store additional information related to the document destruction."
    },
    "cre_Drama_Workshop_Groups": {
        "Ref_Payment_Methods": "This table contains information about the different payment methods that can be used. The `payment_method_code` column stores a unique code that identifies each payment method. The `payment_method_description` column stores a descriptive name for the payment method.",
        "Ref_Service_Types": "This table stores information about the different types of services offered. The `Service_Type_Code` column stores a unique code that identifies each service type. The `Parent_Service_Type_Code` column stores a code for the parent service type, if any. The `Service_Type_Description` column stores a descriptive name for the service type.",
        "Addresses": "This table contains information about addresses. The `Address_ID` column stores a unique identifier for each address. The `Line_1` and `Line_2` columns store the street address information. The `City_Town` column stores the city or town. The `State_County` column stores the state or county. The `Other_Details` column can be used to store any additional information about the address.",
        "Products": "This table contains information about the products that are sold. The `Product_ID` column stores a unique identifier for each product. The `Product_Name` column stores the name of the product. The `Product_Price` column stores the price of the product. The `Product_Description` column stores a description of the product. The `Other_Product_Service_Details` column can be used to store any additional information about the product.",
        "Marketing_Regions": "This table contains information about the different marketing regions. The `Marketing_Region_Code` column stores a unique code that identifies each marketing region. The `Marketing_Region_Name` column stores the name of the marketing region. The `Marketing_Region_Descriptrion` column stores a description of the marketing region. The `Other_Details` column can be used to store any additional information about the marketing region.",
        "Clients": "This table contains information about the clients. The `Client_ID` column stores a unique identifier for each client. The `Address_ID` column stores the address of the client. The `Customer_Email_Address` column stores the email address of the client. The `Customer_Name` column stores the name of the client. The `Customer_Phone` column stores the phone number of the client. The `Other_Details` column can be used to store any additional information about the client.",
        "Drama_Workshop_Groups": "This table contains information about the drama workshop groups. The `Workshop_Group_ID` column stores a unique identifier for each workshop group. The `Address_ID` column stores the address of the workshop group. The `Currency_Code` column stores the currency code for the workshop group. The `Marketing_Region_Code` column stores the marketing region for the workshop group. The `Store_Name` column stores the name of the store for the workshop group. The `Store_Phone` column stores the phone number of the store for the workshop group. The `Store_Email_Address` column stores the email address of the store for the workshop group. The `Other_Details` column can be used to store any additional information about the workshop group.",
        "Performers": "This table contains information about the performers. The `Performer_ID` column stores a unique identifier for each performer. The `Address_ID` column stores the address of the performer. The `Customer_Name` column stores the name of the performer. The `Customer_Phone` column stores the phone number of the performer. The `Customer_Email_Address` column stores the email address of the performer. The `Other_Details` column can be used to store any additional information about the performer.",
        "Customers": "This table contains information about the customers. The `Customer_ID` column stores a unique identifier for each customer. The `Address_ID` column stores the address of the customer. The `Customer_Name` column stores the name of the customer. The `Customer_Phone` column stores the phone number of the customer. The `Customer_Email_Address` column stores the email address of the customer. The `Other_Details` column can be used to store any additional information about the customer.",
        "Stores": "This table contains information about the stores. The `Store_ID` column stores a unique identifier for each store. The `Address_ID` column stores the address of the store. The `Marketing_Region_Code` column stores the marketing region for the store. The `Store_Name` column stores the name of the store. The `Store_Phone` column stores the phone number of the store. The `Store_Email_Address` column stores the email address of the store. The `Other_Details` column can be used to store any additional information about the store.",
        "Bookings": "This table contains information about the bookings made by clients. The `Booking_ID` column stores a unique identifier for each booking. The `Customer_ID` column stores the ID of the client making the booking. The `Workshop_Group_ID` column stores the ID of the workshop group being booked. The `Status_Code` column stores the current status of the booking. The `Store_ID` column stores the ID of the store where the booking was made. The `Order_Date` column stores the date the booking was made. The `Planned_Delivery_Date` column stores the planned delivery date for the booking. The `Actual_Delivery_Date` column stores the actual delivery date for the booking. The `Other_Order_Details` column can be used to store any additional information about the booking.",
        "Performers_in_Bookings": "This table contains information about which performers are participating in which bookings. The `Order_ID` column stores the ID of the booking. The `Performer_ID` column stores the ID of the performer participating in the booking.",
        "Customer_Orders": "This table contains information about the orders made by customers. The `Order_ID` column stores a unique identifier for each order. The `Customer_ID` column stores the ID of the customer who placed the order. The `Store_ID` column stores the ID of the store where the order was placed. The `Order_Date` column stores the date the order was placed. The `Planned_Delivery_Date` column stores the planned delivery date for the order. The `Actual_Delivery_Date` column stores the actual delivery date for the order. The `Other_Order_Details` column can be used to store any additional information about the order.",
        "Order_Items": "This table contains information about the individual items ordered. The `Order_Item_ID` column stores a unique identifier for each order item. The `Order_ID` column stores the ID of the order to which the item belongs. The `Product_ID` column stores the ID of the product being ordered. The `Order_Quantity` column stores the quantity of the product ordered. The `Other_Item_Details` column can be used to store any additional information about the order item.",
        "Invoices": "This table contains information about the invoices generated for orders. The `Invoice_ID` column stores a unique identifier for each invoice. The `Order_ID` column stores the ID of the order that the invoice is for. The `payment_method_code` column stores the code of the payment method used for the invoice. The `Product_ID` column stores the ID of the product being invoiced. The `Order_Quantity` column stores the quantity of the product being invoiced. The `Other_Item_Details` column can be used to store any additional information about the invoice. The `Order_Item_ID` column stores the ID of the order item associated with the invoice.",
        "Services": "This table contains information about the services offered by the drama workshop groups. The `Service_ID` column stores a unique identifier for each service. The `Service_Type_Code` column stores the code of the service type. The `Workshop_Group_ID` column stores the ID of the workshop group offering the service. The `Product_Description` column stores a description of the service. The `Product_Name` column stores the name of the service. The `Product_Price` column stores the price of the service. The `Other_Product_Service_Details` column can be used to store any additional information about the service.",
        "Bookings_Services": "This table contains information about which services are included in which bookings. The `Order_ID` column stores the ID of the booking. The `Product_ID` column stores the ID of the service included in the booking.",
        "Invoice_Items": "This table contains information about the individual items included in an invoice. The `Invoice_Item_ID` column stores a unique identifier for each invoice item. The `Invoice_ID` column stores the ID of the invoice to which the item belongs. The `Order_ID` column stores the ID of the order related to the invoice item. The `Order_Item_ID` column stores the ID of the order item related to the invoice item. The `Product_ID` column stores the ID of the product being invoiced. The `Order_Quantity` column stores the quantity of the product being invoiced. The `Other_Item_Details` column can be used to store any additional information about the invoice item."
    },
    "cre_Theme_park": {
        "Ref_Hotel_Star_Ratings": "This table stores information about different star ratings for hotels. The `star_rating_code` column represents the unique code for a star rating, which is a character string. The `star_rating_description` column describes the star rating, which is a text string that provides more details about the rating, such as \"5 Star\" or \"3 Star\".",
        "Locations": "This table holds information about various locations. The `Location_ID` column is a unique integer identifier for each location. The `Location_Name` column stores the name of the location, which is a text string. The `Address` column contains the address of the location, which is another text string. Finally, the `Other_Details` column provides additional information about the location, which is also a text string.",
        "Ref_Attraction_Types": "This table defines different types of tourist attractions. The `Attraction_Type_Code` column is a unique character string representing each attraction type. The `Attraction_Type_Description` column provides a detailed description of the attraction type, which is a text string.",
        "Visitors": "This table contains information about visitors, or tourists. The `Tourist_ID` column is a unique integer identifier for each visitor. The `Tourist_Details` column stores additional information about the visitor, such as their name or contact information, which is a text string.",
        "Features": "This table lists various features that tourist attractions might have. The `Feature_ID` column is a unique integer identifier for each feature. The `Feature_Details` column provides a text string description of the feature.",
        "Hotels": "This table stores information about hotels. The `hotel_id` column is a unique integer identifier for each hotel. The `star_rating_code` column is a character string that links to the star rating for the hotel from the `Ref_Hotel_Star_Ratings` table. The `pets_allowed_yn` column is a single character that indicates whether pets are allowed at the hotel. The `price_range` column stores the approximate price range for the hotel. The `other_hotel_details` column contains additional information about the hotel as a text string.",
        "Tourist_Attractions": "This table stores information about tourist attractions. The `Tourist_Attraction_ID` column is a unique integer identifier for each attraction. The `Attraction_Type_Code` column links to the type of attraction from the `Ref_Attraction_Types` table, which is a character string. The `Location_ID` column links to the location of the attraction from the `Locations` table, which is an integer. The `How_to_Get_There` column provides instructions on how to reach the attraction, which is a text string. The `Name` column stores the name of the attraction as a text string. The `Description` column gives a brief description of the attraction as a text string. The `Opening_Hours` column specifies the opening hours of the attraction as a text string. Finally, the `Other_Details` column contains any other additional information about the attraction, which is a text string.",
        "Street_Markets": "This table stores information about street markets, which are a specific type of tourist attraction. The `Market_ID` column is a unique integer identifier for each street market. The `Market_Details` column provides additional information about the street market, which is a text string. It is important to note that this table is linked to the `Tourist_Attractions` table through the `Market_ID` column, meaning each street market is also a tourist attraction.",
        "Shops": "This table stores information about shops, which are another type of tourist attraction. The `Shop_ID` column is a unique integer identifier for each shop. The `Shop_Details` column provides additional information about the shop, which is a text string. Similar to the street markets, shops are also linked to the `Tourist_Attractions` table through the `Shop_ID` column, indicating that each shop is also a tourist attraction.",
        "Museums": "This table stores information about museums, which are another type of tourist attraction. The `Museum_ID` column is a unique integer identifier for each museum. The `Museum_Details` column provides additional information about the museum, which is a text string. Museums, like shops and street markets, are also linked to the `Tourist_Attractions` table through the `Museum_ID` column, meaning each museum is also a tourist attraction.",
        "Royal_Family": "This table stores information about royal family sites, which are a type of tourist attraction. The `Royal_Family_ID` column is a unique integer identifier for each royal family site. The `Royal_Family_Details` column provides additional information about the royal family site, which is a text string. Like other types of attractions, royal family sites are linked to the `Tourist_Attractions` table through the `Royal_Family_ID` column, meaning each royal family site is also a tourist attraction.",
        "Theme_Parks": "This table stores information about theme parks, which are a type of tourist attraction. The `Theme_Park_ID` column is a unique integer identifier for each theme park. The `Theme_Park_Details` column provides additional information about the theme park, which is a text string. Theme parks, similar to other attraction types, are linked to the `Tourist_Attractions` table through the `Theme_Park_ID` column, indicating that each theme park is also a tourist attraction.",
        "Visits": "This table stores information about visits to tourist attractions by tourists. The `Visit_ID` column is a unique integer identifier for each visit. The `Tourist_Attraction_ID` column links to the specific tourist attraction that was visited from the `Tourist_Attractions` table, which is an integer. The `Tourist_ID` column links to the visitor who made the visit from the `Visitors` table, which is also an integer. The `Visit_Date` column records the date and time of the visit. The `Visit_Details` column provides additional details about the visit, which is a text string.",
        "Photos": "This table stores information about photos taken at tourist attractions. The `Photo_ID` column is a unique integer identifier for each photo. The `Tourist_Attraction_ID` column links to the specific tourist attraction where the photo was taken from the `Tourist_Attractions` table, which is an integer. The `Name` column stores the name of the photo as a text string. The `Description` column provides a description of the photo as a text string. The `Filename` column stores the name of the file where the photo is stored. Finally, the `Other_Details` column contains any other additional information about the photo, which is a text string.",
        "Staff": "This table stores information about staff members working at tourist attractions. The `Staff_ID` column is a unique integer identifier for each staff member. The `Tourist_Attraction_ID` column links to the specific tourist attraction where the staff member works from the `Tourist_Attractions` table, which is an integer. The `Name` column stores the name of the staff member as a text string. The `Other_Details` column provides additional information about the staff member, which is a text string.",
        "Tourist_Attraction_Features": "This table establishes a relationship between tourist attractions and their features. The `Tourist_Attraction_ID` column links to the specific tourist attraction from the `Tourist_Attractions` table, which is an integer. The `Feature_ID` column links to the specific feature from the `Features` table, which is also an integer. This table allows you to track which features are associated with which tourist attractions."
    },
    "csu_1": {
        "Campuses": "The `Campuses` table stores information about different campuses.  The `Id` column uniquely identifies each campus. The `Campus` column contains the name of the campus. The `Location` column stores the location of the campus, which might be a city or town. The `County` column indicates the county where the campus is located. The `Year` column denotes the year for which the data is relevant. For example, the first row of the `Campuses` table might represent information about the \"San Diego\" campus, located in \"San Diego\" city, in \"San Diego\" county, and the data is for the year 2023.",
        "csu_fees": "The `csu_fees` table contains information about the campus fees for different campuses. The `Campus` column is a foreign key that references the `Id` column in the `Campuses` table, indicating the specific campus for which the fee applies. The `Year` column represents the year for which the fee is valid. The `CampusFee` column stores the fee amount for the specific campus and year. For instance, the first row of the `csu_fees` table might represent the campus fee for the \"San Diego\" campus in the year 2023, which is $1200.",
        "degrees": "The `degrees` table stores information about the number of degrees awarded by different campuses. The `Year` column indicates the year for which the degree data is recorded. The `Campus` column is a foreign key that references the `Id` column in the `Campuses` table, linking the degree data to the specific campus. The `Degrees` column represents the total number of degrees awarded by the campus in the given year. For example, the first row of the `degrees` table might represent the \"San Diego\" campus in the year 2023 and show that 1000 degrees were awarded that year.",
        "discipline_enrollments": "The `discipline_enrollments` table contains data about the number of undergraduate and graduate students enrolled in different disciplines at each campus. The `Campus` column is a foreign key that references the `Id` column in the `Campuses` table, associating the enrollment data with the specific campus. The `Discipline` column represents the specific academic discipline, like engineering or business. The `Year` column indicates the year for which the enrollment data is recorded. The `Undergraduate` column stores the number of undergraduate students enrolled in that discipline at that campus in that year. Similarly, the `Graduate` column represents the number of graduate students enrolled in the discipline. For example, the first row of the `discipline_enrollments` table might show the enrollment data for the \"San Diego\" campus in the year 2023 for the discipline of \"Engineering\", with 500 undergraduate students and 100 graduate students enrolled.",
        "enrollments": "The `enrollments` table stores information about the total enrollment and full-time equivalent (FTE) enrollment at each campus. The `Campus` column is a foreign key that references the `Id` column in the `Campuses` table, linking the enrollment data to the specific campus. The `Year` column indicates the year for which the enrollment data is recorded. The `TotalEnrollment_AY` column represents the total number of students enrolled at the campus in that year. The `FTE_AY` column stores the full-time equivalent enrollment for the campus in that year. For example, the first row of the `enrollments` table might represent data for the \"San Diego\" campus in the year 2023, indicating that 10,000 students were enrolled and the FTE enrollment was 7,500.",
        "faculty": "The `faculty` table stores information about the number of faculty members at each campus. The `Campus` column is a foreign key that references the `Id` column in the `Campuses` table, associating the faculty data with the specific campus. The `Year` column indicates the year for which the faculty data is recorded. The `Faculty` column represents the total number of faculty members at the campus in that year. For instance, the first row of the `faculty` table might represent the \"San Diego\" campus in the year 2023 and show that there were 500 faculty members."
    },
    "culture_company": {
        "book_club": "This table contains information about books that were chosen by a book club. The `book_club_id` column uniquely identifies each book selection.  The `Year` column stores the year in which the book was chosen.  The `Author_or_Editor` column records the author or editor of the book. The `Book_Title` column stores the title of the book. The `Publisher` column stores the name of the publisher of the book. The `Category` column holds the genre or category of the book. The `Result` column likely stores information about the book club's overall opinion or feedback on the book, perhaps as a rating or a brief summary.",
        "movie": "This table stores information about movies. The `movie_id` column uniquely identifies each movie. The `Title` column stores the title of the movie. The `Year` column stores the year in which the movie was released. The `Director` column records the name of the director of the movie. The `Budget_million` column stores the budget of the movie in millions of dollars. The `Gross_worldwide` column stores the total worldwide gross earnings of the movie.",
        "culture_company": "This table holds information about companies involved in the cultural industry, specifically related to books and movies. The `Company_name` column stores the name of the company and serves as the primary key. The `Type` column specifies the type of company, for example, a publisher, production company, or distributor. The `Incorporated_in` column records the country or region where the company is incorporated. The `Group_Equity_Shareholding` column likely stores the percentage of equity held by a larger group in the company. The `book_club_id` column references a corresponding book from the `book_club` table, indicating that the company is associated with a book selection by a book club. Similarly, the `movie_id` column references a corresponding movie from the `movie` table, suggesting that the company is involved in the production or distribution of that movie."
    },
    "customers_and_addresses": {
        "Addresses": "Stores information about the addresses of customers. The table has seven columns: `address_id`, `address_content`, `city`, `zip_postcode`, `state_province_county`, `country`, and `other_address_details`. `address_id` is the unique identifier for each address. `address_content` stores the complete address of the customer. `city` stores the city name of the address. `zip_postcode` stores the zip code or postal code of the address. `state_province_county` stores the state, province, or county name of the address. `country` stores the country name of the address. `other_address_details` stores any additional details about the address, such as apartment number or building name.",
        "Products": "Stores information about the products sold by the company. The table has two columns: `product_id` and `product_details`. `product_id` is the unique identifier for each product. `product_details` stores a textual description of the product, which could include details about its features, specifications, or any other relevant information.",
        "Customers": "Stores information about the customers of the company. The table has five columns: `customer_id`, `payment_method`, `customer_name`, `date_became_customer`, and `other_customer_details`. `customer_id` is the unique identifier for each customer. `payment_method` stores the preferred payment method used by the customer, such as credit card or debit card. `customer_name` stores the full name of the customer. `date_became_customer` stores the date when the customer first made a purchase from the company. `other_customer_details` stores any additional details about the customer, such as their contact number or email address.",
        "Customer_Addresses": "Stores information about the different addresses associated with each customer, including the type of address (e.g., home, work, billing) and the dates when the address was active. The table has five columns: `customer_id`, `address_id`, `date_address_from`, `address_type`, and `date_address_to`. `customer_id` references the `customer_id` from the `Customers` table, indicating which customer this address belongs to. `address_id` references the `address_id` from the `Addresses` table, indicating the specific address details. `date_address_from` stores the date when the address became active for the customer. `address_type` identifies the type of address, such as \"home\", \"work\", \"billing\", etc. `date_address_to` stores the date when the address became inactive for the customer, if applicable.",
        "Customer_Contact_Channels": "Stores information about the various contact channels used by customers to communicate with the company. The table has five columns: `customer_id`, `channel_code`, `active_from_date`, `active_to_date`, and `contact_number`. `customer_id` references the `customer_id` from the `Customers` table, indicating which customer this contact information belongs to. `channel_code` stores a code representing the contact channel, such as \"email\", \"phone\", \"SMS\", etc. `active_from_date` stores the date when the customer started using this contact channel. `active_to_date` stores the date when the customer stopped using this contact channel, if applicable. `contact_number` stores the contact number associated with the channel.",
        "Customer_Orders": "Stores information about the orders placed by customers. The table has five columns: `order_id`, `customer_id`, `order_status`, `order_date`, and `order_details`. `order_id` is the unique identifier for each order. `customer_id` references the `customer_id` from the `Customers` table, indicating which customer placed the order. `order_status` stores the current status of the order, such as \"pending\", \"shipped\", \"delivered\", etc. `order_date` stores the date when the order was placed. `order_details` stores additional information about the order, such as the total order amount, shipping address, or any special instructions.",
        "Order_Items": "Stores information about the items included in each order. The table has three columns: `order_id`, `product_id`, and `order_quantity`. `order_id` references the `order_id` from the `Customer_Orders` table, indicating which order this item belongs to. `product_id` references the `product_id` from the `Products` table, indicating the specific product being ordered. `order_quantity` stores the number of units of the product ordered."
    },
    "customers_and_invoices": {
        "Customers": "This table stores information about all the customers who have accounts with the company. The `customer_id` column is the unique identifier for each customer. `customer_first_name`, `customer_middle_initial`, and `customer_last_name` store the customer's full name. `gender` is the customer's gender,  `email_address` is their email address, `login_name` is their username, `login_password` is their password for the account, `phone_number` is their phone number, `town_city` is the city they live in, `state_county_province` is the state or province, and `country` is the country where they reside.",
        "Orders": "This table stores information about all the orders that have been placed by customers. The `order_id` column is the unique identifier for each order. `customer_id` is the foreign key that links each order to a specific customer in the `Customers` table. `date_order_placed` is the date and time when the order was placed. `order_details` contains any additional information about the order, such as special requests or order notes.",
        "Invoices": "This table stores information about all the invoices generated for orders. The `invoice_number` column is the unique identifier for each invoice. `order_id` is the foreign key that links each invoice to a specific order in the `Orders` table. `invoice_date` is the date the invoice was issued.",
        "Accounts": "This table stores information about the accounts that customers have with the company. The `account_id` column is the unique identifier for each account. `customer_id` is the foreign key that links each account to a specific customer in the `Customers` table. `date_account_opened` is the date the customer opened their account. `account_name` is the name of the account. `other_account_details` contains any additional information about the account, such as account type or balance.",
        "Product_Categories": "This table stores information about different categories of products sold by the company. The `production_type_code` column is the unique identifier for each product category. `product_type_description` is the name of the product category. `vat_rating` is the value-added tax (VAT) rate associated with the product category.",
        "Products": "This table stores information about all the products sold by the company. The `product_id` column is the unique identifier for each product. `parent_product_id` stores the ID of a parent product, if the product is a variant of another product. `production_type_code` is the foreign key that links each product to a specific product category in the `Product_Categories` table. `unit_price` is the price per unit of the product. `product_name` is the name of the product. `product_color` is the color of the product. `product_size` is the size of the product.",
        "Financial_Transactions": "This table stores information about all financial transactions related to customer accounts and orders. `transaction_id` is not a primary key and can be used to uniquely identify each transaction. `account_id` is the foreign key that links each transaction to a specific account in the `Accounts` table. `invoice_number` is the foreign key that links each transaction to a specific invoice in the `Invoices` table. `transaction_type` indicates the type of transaction, such as payment, deposit, or withdrawal. `transaction_date` is the date and time of the transaction. `transaction_amount` is the amount of money involved in the transaction. `transaction_comment` is a brief description of the transaction. `other_transaction_details` contains any additional information about the transaction.",
        "Order_Items": "This table stores information about the individual items included in each order. `order_item_id` is the unique identifier for each order item. `order_id` is the foreign key that links each order item to a specific order in the `Orders` table. `product_id` is the foreign key that links each order item to a specific product in the `Products` table. `product_quantity` is the quantity of the product ordered. `other_order_item_details` contains any additional information about the order item, such as special requests or discounts.",
        "Invoice_Line_Items": "This table stores information about the individual line items included in each invoice. `order_item_id` is the foreign key that links each invoice line item to a specific order item in the `Order_Items` table. `invoice_number` is the foreign key that links each invoice line item to a specific invoice in the `Invoices` table. `product_id` is the foreign key that links each invoice line item to a specific product in the `Products` table. `product_title` is the name of the product included in the invoice line item. `product_quantity` is the quantity of the product included in the invoice line item. `product_price` is the price per unit of the product. `derived_product_cost` is the calculated cost of the product based on the quantity and price. `derived_vat_payable` is the calculated VAT payable on the product. `derived_total_cost` is the total cost of the product, including VAT."
    },
    "customers_and_products_contacts": {
        "Addresses": "This table stores information about different addresses.  The `address_id` column is a unique identifier for each address. `line_1_number_building` stores the first line of the address, which could include the street number, street name, and building number.  `city` stores the name of the city where the address is located.  `zip_postcode` stores the zip code or postal code associated with the address. `state_province_county`  stores the state, province, or county where the address is located.  Finally, `country` stores the name of the country where the address is located.",
        "Products": "This table stores information about different products. The `product_id` column is a unique identifier for each product. `product_type_code` stores a short code representing the type of product, which could be used for categorization. `product_name` stores the name of the product.  `product_price` stores the price of the product, which can be null if the price is not yet determined.",
        "Customers": "This table stores information about different customers. The `customer_id` column is a unique identifier for each customer.  `payment_method_code` stores a short code representing the preferred payment method for the customer.  `customer_number` stores a unique customer number that may be assigned to the customer. `customer_name` stores the name of the customer.  `customer_address` stores the address of the customer.  `customer_phone` stores the phone number of the customer.  `customer_email` stores the email address of the customer.",
        "Contacts": "This table stores information about the contacts associated with customers. The `contact_id` column is a unique identifier for each contact.  `customer_id` stores the ID of the customer this contact is associated with, ensuring a relationship with the Customers table. `gender` stores the gender of the contact.  `first_name` stores the first name of the contact.  `last_name` stores the last name of the contact.  `contact_phone` stores the phone number of the contact.",
        "Customer_Address_History": "This table stores a history of addresses associated with customers, including the start and end dates of the association.  `customer_id` stores the ID of the customer associated with the address, referencing the `customer_id` in the Customers table. `address_id` stores the ID of the address associated with the customer, referencing the `address_id` in the Addresses table. `date_from` stores the date when the customer first started using this address. `date_to` stores the date when the customer stopped using this address.  The `date_to` can be null if the customer is still using this address.",
        "Customer_Orders": "This table stores information about orders placed by customers. The `order_id` column is a unique identifier for each order. `customer_id` stores the ID of the customer who placed the order, referencing the `customer_id` in the Customers table.  `order_date` stores the date and time the order was placed.  `order_status_code` stores a short code representing the current status of the order.",
        "Order_Items": "This table stores information about items included in orders.  `order_item_id` is a unique identifier for each item within an order.  `order_id` stores the ID of the order this item belongs to, referencing the `order_id` in the Customer_Orders table. `product_id` stores the ID of the product included in the order, referencing the `product_id` in the Products table.  `order_quantity` stores the quantity of the product ordered."
    },
    "customers_campaigns_ecommerce": {
        "Premises": "Stores information about different premises. The `premise_id` column is the unique identifier for each premise. The `premises_type` column indicates the type of premise, for example, \"Home\", \"Office\", \"Warehouse\". The `premise_details` column contains a description of the premise.",
        "Products": "Stores information about different products. The `product_id` column is the unique identifier for each product. The `product_category` column indicates the category of the product, for example, \"Electronics\", \"Clothing\", \"Food\". The `product_name` column contains the name of the product.",
        "Customers": "Stores information about different customers. The `customer_id` column is the unique identifier for each customer. The `payment_method` column indicates the preferred payment method for the customer. The `customer_name` column contains the name of the customer. The `customer_phone` column contains the phone number of the customer. The `customer_email` column contains the email address of the customer. The `customer_address` column contains the physical address of the customer. The `customer_login` column contains the username used by the customer to login to the system. The `customer_password` column contains the password used by the customer to login to the system.",
        "Mailshot_Campaigns": "Stores information about different mailshot campaigns. The `mailshot_id` column is the unique identifier for each mailshot campaign. The `product_category` column indicates the category of products being advertised in the mailshot campaign. The `mailshot_name` column contains the name of the mailshot campaign. The `mailshot_start_date` column indicates the start date of the mailshot campaign. The `mailshot_end_date` column indicates the end date of the mailshot campaign.",
        "Customer_Addresses": "Stores information about the addresses of customers. The `customer_id` column links to the corresponding customer in the `Customers` table. The `premise_id` column links to the corresponding premise in the `Premises` table. The `date_address_from` column indicates the date from which the address is valid. The `address_type_code` column indicates the type of address, for example, \"Billing\", \"Shipping\". The `date_address_to` column indicates the date until which the address is valid.",
        "Customer_Orders": "Stores information about orders placed by customers. The `order_id` column is the unique identifier for each order. The `customer_id` column links to the corresponding customer in the `Customers` table. The `order_status_code` column indicates the current status of the order. The `shipping_method_code` column indicates the shipping method used for the order. The `order_placed_datetime` column indicates the date and time when the order was placed. The `order_delivered_datetime` column indicates the date and time when the order was delivered. The `order_shipping_charges` column contains the shipping charges for the order.",
        "Mailshot_Customers": "Stores information about customers who received mailshots. The `mailshot_id` column links to the corresponding mailshot campaign in the `Mailshot_Campaigns` table. The `customer_id` column links to the corresponding customer in the `Customers` table. The `outcome_code` column indicates the outcome of the mailshot campaign for the customer. The `mailshot_customer_date` column indicates the date when the customer received the mailshot.",
        "Order_Items": "Stores information about items included in orders. The `item_id` column is the unique identifier for each item in an order. The `order_item_status_code` column indicates the current status of the item in the order. The `order_id` column links to the corresponding order in the `Customer_Orders` table. The `product_id` column links to the corresponding product in the `Products` table. The `item_status_code` column indicates the status of the item itself, for example, \"Ordered\", \"Shipped\", \"Delivered\". The `item_delivered_datetime` column indicates the date and time when the item was delivered. The `item_order_quantity` column indicates the quantity of the product ordered."
    },
    "customers_card_transactions": {
        "Accounts": "This table stores information about the different accounts held by customers. The `account_id` column is a unique identifier for each account, while `customer_id` links the account to a specific customer in the `Customers` table. The `account_name` column stores the name of the account (e.g., \"Checking Account\", \"Savings Account\"), and `other_account_details` can hold additional information about the account, such as the account type, interest rate, or balance.",
        "Customers": "This table contains information about all the customers in the database. The `customer_id` column serves as a unique identifier for each customer. The columns `customer_first_name` and `customer_last_name` store the customer's full name. The `customer_address` column contains their address, while `customer_phone` and `customer_email` store their contact information. The `other_customer_details` column can hold additional information about the customer, such as their birthdate, gender, or any other relevant details.",
        "Customers_Cards": "This table stores information about the cards that are linked to customers. The `card_id` column is a unique identifier for each card. The `customer_id` column links the card to a customer in the `Customers` table. The `card_type_code` column specifies the type of card (e.g., \"Credit Card\", \"Debit Card\"), while `card_number` contains the card number. The `date_valid_from` and `date_valid_to` columns indicate the validity period of the card. The `other_card_details` column can hold additional information about the card, such as the cardholder's name or the security code.",
        "Financial_Transactions": "This table stores information about financial transactions associated with customers' accounts and cards. The `transaction_id` column is a unique identifier for each transaction. The `previous_transaction_id` column can be used to link transactions in a chain, for example, for tracking payments or transfers. The `account_id` and `card_id` columns link the transaction to a specific account or card in the corresponding tables. The `transaction_type` column specifies the type of transaction (e.g., \"Deposit\", \"Withdrawal\", \"Transfer\"). The `transaction_date` column indicates the date and time of the transaction. The `transaction_amount` column stores the amount of money involved in the transaction. The `transaction_comment` column allows for adding notes or descriptions to the transaction, and the `other_transaction_details` column can hold any other relevant information about the transaction."
    },
    "customer_complaints": {
        "Staff": "Stores information regarding all the staff members in the company. The column `staff_id` is the staff ID of each staff member, which is unique to each staff member. `gender` stores the gender of the staff member, represented by a single character. `first_name` and `last_name` store the first and last names of the staff member, respectively. `email_address` contains the email address of the staff member, and `phone_number` stores their phone number.",
        "Customers": "Stores information about all customers of the company. The column `customer_id` is a unique identifier for each customer. `customer_type_code` categorizes the customer based on their type, such as 'retail' or 'wholesale'.  `address_line_1` and `address_line_2` hold the customer's address details, while `town_city`, `state`, `email_address`, and `phone_number` store their town/city, state, email address, and phone number, respectively.",
        "Products": "Stores information about all products offered by the company. The column `product_id` is a unique identifier for each product. `parent_product_id`  references the ID of a parent product if the current product is a variant or bundle, otherwise it's NULL. `product_category_code` categorizes the product based on its type, such as 'electronics' or 'clothing'.  `date_product_first_available` and `date_product_discontinued` store the dates when the product was first available and discontinued, respectively. `product_name` and `product_description` contain the name and description of the product, and `product_price` stores the price of the product.",
        "Complaints": "Stores details of complaints raised by customers about products. The column `complaint_id` uniquely identifies each complaint. `product_id` links the complaint to the specific product involved. `customer_id` references the customer who raised the complaint. `complaint_outcome_code` indicates the final resolution of the complaint, such as 'resolved' or 'rejected'. `complaint_status_code` reflects the current status of the complaint, such as 'open' or 'closed'. `complaint_type_code` categorizes the complaint based on its nature, such as 'quality issue' or 'delivery delay'. `date_complaint_raised` and `date_complaint_closed` store the dates when the complaint was raised and closed, respectively. `staff_id` references the staff member who handled the complaint."
    },
    "customer_deliveries": {
        "Products": "This table stores information about all the products available for sale. The `product_id` column uniquely identifies each product. The `product_name` column stores the name of the product, while `product_price` stores the price of the product in decimal format. Finally, `product_description` provides a brief description of the product.",
        "Addresses": "This table stores the address details of various locations, including customer addresses, employee addresses, and delivery locations. Each address is uniquely identified by `address_id`.  The `address_details` column contains the street address, while `city`, `zip_postcode`, `state_province_county`, and `country` store the corresponding geographical information for the address.",
        "Customers": "This table holds information about customers who purchase products. Each customer has a unique `customer_id`. The `payment_method` column specifies how the customer typically pays for their orders. `customer_name`, `customer_phone`, and `customer_email` store the customer's contact information. Finally, `date_became_customer` records when the customer first started purchasing from the company.",
        "Regular_Orders": "This table represents regular orders placed by customers. Each order has a unique `regular_order_id`.  The `distributer_id` column links the order to the specific customer (`customer_id`) who placed the order. This table is used for tracking recurring orders placed by customers.",
        "Regular_Order_Products": "This table serves as a link between regular orders and the products included in each order.  It stores which specific products (`product_id`) are included in a given regular order (`regular_order_id`).",
        "Actual_Orders": "This table records actual orders placed by customers, representing the fulfillment of a regular order.  Each order has a unique `actual_order_id` and a `order_status_code` indicating the current state of the order. The `regular_order_id` links the actual order to the corresponding regular order. `actual_order_date` records the date and time the actual order was placed.",
        "Actual_Order_Products": "This table links actual orders to the specific products included in each order. It stores the `actual_order_id` and corresponding `product_id` for all products included in the actual order.",
        "Customer_Addresses": "This table stores the different addresses associated with customers. Each record represents a specific address (`address_id`) used by a particular customer (`customer_id`). `date_from` indicates when the customer started using this address.  `address_type` specifies the type of address (e.g., billing, shipping) and `date_to` indicates when the customer stopped using this address (if applicable).",
        "Delivery_Routes": "This table stores information about delivery routes used for delivering orders. Each route has a unique `route_id` and a descriptive `route_name`. `other_route_details` provides additional information about the delivery route.",
        "Delivery_Route_Locations": "This table connects specific locations (`location_address_id`) to delivery routes (`route_id`). Each location has a unique `location_code` and a descriptive `location_name`.",
        "Trucks": "This table maintains details about trucks used for deliveries. Each truck has a unique `truck_id`, a `truck_licence_number`, and a `truck_details` field describing the truck's characteristics.",
        "Employees": "This table stores information about employees, including their employee ID (`employee_id`), address (`employee_address_id`), name (`employee_name`), and phone number (`employee_phone`).",
        "Order_Deliveries": "This table records the details of order deliveries. The `location_code` specifies the delivery location, `actual_order_id` identifies the order being delivered, and `delivery_status_code` indicates the status of the delivery.  `driver_employee_id` identifies the employee delivering the order, `truck_id` identifies the truck used for delivery, and `delivery_date` records the date and time of delivery."
    },
    "debate": {
        "people": "This table stores information about individuals who participate in debates. Each row represents a unique person, identified by their unique `People_ID`.  The `District` column indicates the geographical area the person is from. The `Name` column holds the person's full name. The `Party` column specifies the political party the person is affiliated with.  Finally, the `Age` column records the person's age.",
        "debate": "This table holds information about debates that have taken place. Each row represents a distinct debate, uniquely identified by the `Debate_ID`. The `Date` column specifies the date the debate was held. The `Venue` column indicates the location of the debate. The `Num_of_Audience` column records the number of people who attended the debate.",
        "debate_people": "This table links participants to specific debates and records the outcome of the debate. Each row represents a unique pairing of two individuals in a particular debate, identified by the combination of `Debate_ID`, `Affirmative`, and `Negative`. The `Debate_ID` column references the debate in which the participants were involved. The `Affirmative` column identifies the person who argued in favor of the debate's topic. The `Negative` column identifies the person who argued against the topic. The `If_Affirmative_Win` column indicates whether the person arguing for the topic won the debate (True) or lost (False)."
    },
    "decoration_competition": {
        "college": "Stores information about different colleges. The `College_ID` is a unique identifier for each college. The `Name` column stores the name of the college. The `Leader_Name` column stores the name of the leader of the college. The `College_Location` column stores the location of the college.",
        "member": "Stores information about members who belong to colleges. The `Member_ID` is a unique identifier for each member. The `Name` column stores the name of the member. The `Country` column stores the country of origin of the member. The `College_ID` column stores the ID of the college the member belongs to. This column is a foreign key referencing the `College_ID` column in the `college` table, establishing a relationship between members and their respective colleges.",
        "round": "Stores information about members' participation in rounds of a competition. The `Round_ID` column represents a specific round in the competition. The `Member_ID` column stores the ID of the member participating in the round, and it is a foreign key referencing the `Member_ID` column in the `member` table. The `Decoration_Theme` column specifies the theme of decorations for the round. The `Rank_in_Round` column stores the rank of the member in that particular round. The combination of `Member_ID` and `Round_ID` forms the primary key for this table, indicating that a member can participate in multiple rounds, and each member-round combination is unique."
    },
    "department_management": {
        "department": "This table stores information about the different departments in the organization.  `Department_ID` is a unique identifier for each department. `Name` stores the name of the department. `Creation` stores information about when the department was created. `Ranking`  indicates the relative importance or status of the department within the organization. `Budget_in_Billions` represents the department's annual budget in billions of dollars. `Num_Employees` reflects the number of employees working in the department.",
        "head": "This table stores information about the heads of the departments. `head_ID` is a unique identifier for each head. `name` stores the head's name. `born_state` indicates the state where the head was born. `age` indicates the head's age in years.",
        "management": "This table maps department heads to specific departments. `department_ID` references the corresponding department from the `department` table. `head_ID` references the corresponding head from the `head` table. `temporary_acting` indicates whether the head is acting as a temporary head of the department."
    },
    "department_store": {
        "Addresses": "Stores information about different addresses. The `address_id` column is the unique identifier for each address. The `address_details` column stores the complete address, which could include information like street address, city, state, zip code, and country.",
        "Staff": "Stores information about different staff members. The `staff_id` column is the unique identifier for each staff member. The `staff_gender` column stores the gender of the staff member. The `staff_name` column stores the name of the staff member.",
        "Suppliers": "Stores information about suppliers. The `supplier_id` column is the unique identifier for each supplier. The `supplier_name` column stores the name of the supplier. The `supplier_phone` column stores the phone number of the supplier.",
        "Department_Store_Chain": "Stores information about department store chains. The `dept_store_chain_id` column is the unique identifier for each department store chain. The `dept_store_chain_name` column stores the name of the department store chain.",
        "Customers": "Stores information about customers. The `customer_id` column is the unique identifier for each customer. The `payment_method_code` column stores the code for the payment method used by the customer. The `customer_code` column stores the unique code for the customer. The `customer_name` column stores the name of the customer. The `customer_address` column stores the address of the customer. The `customer_phone` column stores the phone number of the customer. The `customer_email` column stores the email address of the customer.",
        "Products": "Stores information about different products. The `product_id` column is the unique identifier for each product. The `product_type_code` column stores the code for the type of product. The `product_name` column stores the name of the product. The `product_price` column stores the price of the product.",
        "Supplier_Addresses": "Stores information about the addresses of suppliers. The `supplier_id` column is the unique identifier for the supplier. The `address_id` column is the unique identifier for the address. The `date_from` column stores the date from which the address is valid for the supplier. The `date_to` column stores the date until which the address is valid for the supplier.",
        "Customer_Addresses": "Stores information about the addresses of customers. The `customer_id` column is the unique identifier for the customer. The `address_id` column is the unique identifier for the address. The `date_from` column stores the date from which the address is valid for the customer. The `date_to` column stores the date until which the address is valid for the customer.",
        "Customer_Orders": "Stores information about customer orders. The `order_id` column is the unique identifier for each order. The `customer_id` column is the unique identifier for the customer placing the order. The `order_status_code` column stores the code for the status of the order. The `order_date` column stores the date on which the order was placed.",
        "Department_Stores": "Stores information about department stores. The `dept_store_id` column is the unique identifier for each department store. The `dept_store_chain_id` column is the unique identifier for the department store chain to which the department store belongs. The `store_name` column stores the name of the department store. The `store_address` column stores the address of the department store. The `store_phone` column stores the phone number of the department store. The `store_email` column stores the email address of the department store.",
        "Departments": "Stores information about departments within department stores. The `department_id` column is the unique identifier for each department. The `dept_store_id` column is the unique identifier for the department store to which the department belongs. The `department_name` column stores the name of the department.",
        "Order_Items": "Stores information about the items in a customer order. The `order_item_id` column is the unique identifier for each item in an order. The `order_id` column is the unique identifier for the order. The `product_id` column is the unique identifier for the product.",
        "Product_Suppliers": "Stores information about the suppliers of products. The `product_id` column is the unique identifier for the product. The `supplier_id` column is the unique identifier for the supplier. The `date_supplied_from` column stores the date from which the supplier started supplying the product. The `date_supplied_to` column stores the date until which the supplier is supplying the product. The `total_amount_purchased` column stores the total amount of the product purchased from the supplier. The `total_value_purchased` column stores the total value of the product purchased from the supplier.",
        "Staff_Department_Assignments": "Stores information about the assignment of staff members to different departments. The `staff_id` column is the unique identifier for the staff member. The `department_id` column is the unique identifier for the department. The `date_assigned_from` column stores the date from which the staff member was assigned to the department. The `job_title_code` column stores the code for the job title of the staff member in the department. The `date_assigned_to` column stores the date until which the staff member was assigned to the department."
    },
    "device": {
        "device": "Stores information about different devices. The Device_ID is a unique identifier for each device. The Device column stores the name of the device, while Carrier stores the network provider for the device. Package_Version indicates the software version installed on the device, Applications lists the applications installed on the device, and Software_Platform specifies the operating system used by the device.",
        "shop": "Stores information about different shops. Each shop has a unique Shop_ID, and the table also contains the Shop_Name, Location, and Open_Date (presumably the date the shop opened). Open_Year is the year the shop opened, which is derived from Open_Date.",
        "stock": "Stores information about the stock of devices available at each shop. The primary key consists of Shop_ID and Device_ID, which means that each row represents a specific combination of a shop and a device. The Quantity column indicates the number of units of the particular device available at that shop."
    },
    "document_management": {
        "Roles": "Stores information about different roles within the system. Each role has a unique `role_code` and a descriptive `role_description`. This table is used to categorize users based on their permissions and access levels within the system.",
        "Users": "This table stores information about individual users of the system. Each user has a unique `user_id`, a `role_code` that links them to a specific role defined in the `Roles` table, a `user_name` for display purposes, a `user_login` used for authentication, and a `password` for security purposes.",
        "Document_Structures": "This table defines the hierarchical structure of documents within the system. Each document structure has a unique `document_structure_code`, a `parent_document_structure_code` indicating its position in the hierarchy, and a descriptive `document_structure_description`.",
        "Functional_Areas": "This table defines the functional areas within the system, which can be used to categorize documents. Each functional area has a unique `functional_area_code`, a `parent_functional_area_code` indicating its position in the hierarchy, and a descriptive `functional_area_description`.",
        "Images": "This table stores information about images used within the system. Each image has a unique `image_id`, an `image_alt_text` for accessibility purposes, an `image_name` for identification, and an `image_url` pointing to the location of the image.",
        "Documents": "This table stores information about the documents themselves. Each document has a unique `document_code`, a `document_structure_code` that links it to a specific document structure defined in the `Document_Structures` table, a `document_type_code` indicating its type, an `access_count` tracking how many times it has been accessed, and a `document_name` for display purposes.",
        "Document_Functional_Areas": "This table links documents to the functional areas they belong to. The `document_code` and `functional_area_code` form a composite primary key, ensuring that each document can be associated with multiple functional areas.",
        "Document_Sections": "This table defines the sections within a document. Each section has a unique `section_id`, a `document_code` linking it to a specific document defined in the `Documents` table, a `section_sequence` indicating its order within the document, a `section_code` for identification, and a `section_title` for display purposes.",
        "Document_Sections_Images": "This table links sections within documents to the images used in those sections. The `section_id` and `image_id` form a composite primary key, allowing for multiple images to be associated with a single section and vice versa."
    },
    "dorm_1": {
        "Student": "This table stores information about the students in the database. The `StuID` column contains the unique ID of each student, `LName` and `Fname` contain the last and first name of the student respectively. The `Age` column contains the age of the student, `Sex` represents the gender of the student with values `M` for male and `F` for female. The `Major` column contains a foreign key to the `Major` table, indicating the major of the student. The `Advisor` column contains a foreign key to the `Advisor` table, indicating the ID of the student's advisor. Finally, the `city_code` column contains a 3-character code that represents the city where the student resides.",
        "Dorm": "This table stores information about the dorms in the database. The `dormid` column contains the unique ID of each dorm, `dorm_name` contains the name of the dorm. `student_capacity` stores the maximum number of students that can reside in a dorm. The `gender` column represents the gender of the students who can reside in that dorm with values `M` for male and `F` for female.",
        "Dorm_amenity": "This table stores information about the amenities that dorms can have. The `amenid` column contains the unique ID of each amenity, and `amenity_name` contains the name of the amenity.",
        "Has_amenity": "This table establishes a relationship between dorms and the amenities they have. The `dormid` column contains a foreign key to the `Dorm` table, indicating the ID of the dorm. The `amenid` column contains a foreign key to the `Dorm_amenity` table, indicating the ID of the amenity.",
        "Lives_in": "This table stores information about the students who live in a particular dorm and their room number. The `stuid` column contains a foreign key to the `Student` table, indicating the ID of the student. The `dormid` column contains a foreign key to the `Dorm` table, indicating the ID of the dorm. The `room_number` column contains the room number of the student within the dorm."
    },
    "driving_school": {
        "Addresses": "Stores information about different addresses in the database. The `address_id` is a unique identifier for each address. `line_1_number_building` contains the street address including the house number and building name. The `city` stores the name of the city where the address is located. `zip_postcode` contains the zip code or postal code of the address.  `state_province_county` stores the state, province or county for the address. Finally, the `country` column stores the name of the country for the address.",
        "Staff": "Stores information about the staff members working in the organization. The `staff_id` is a unique identifier for each staff member. The `staff_address_id` is a foreign key that links this table to the `Addresses` table, indicating the address of the staff member. The `nickname`, `first_name`, `middle_name` and `last_name` columns store the staff member's name details. The `date_of_birth` stores the date of birth of the staff member. The `date_joined_staff` stores the date when the staff member joined the company. The `date_left_staff` stores the date when the staff member left the company, if applicable.",
        "Vehicles": "Stores information about various vehicles. The `vehicle_id` is a unique identifier for each vehicle. The `vehicle_details` stores a description of the vehicle, potentially including details like make, model, year, and any other relevant information.",
        "Customers": "Stores information about the customers of the organization. The `customer_id` is a unique identifier for each customer. The `customer_address_id` is a foreign key that links this table to the `Addresses` table, indicating the customer's address. The `customer_status_code` stores the customer's status, likely indicating active, inactive, or other relevant statuses. The `date_became_customer` stores the date when the customer became a customer of the organization. The `date_of_birth` stores the customer's date of birth. The `first_name` and `last_name` columns store the customer's first and last name, respectively. The `amount_outstanding` stores the amount of money the customer owes, if any. The `email_address` stores the customer's email address. The `phone_number` and `cell_mobile_phone_number` stores the customer's primary phone number and cell/mobile phone number, respectively.",
        "Customer_Payments": "Stores information about payments made by customers. The `customer_id` is a foreign key that links this table to the `Customers` table, indicating the customer who made the payment. The `datetime_payment` stores the date and time when the payment was made. The `payment_method_code` stores the method of payment used, potentially indicating credit card, debit card, cash, or other payment methods. The `amount_payment` stores the amount of money paid by the customer. The combination of `customer_id` and `datetime_payment` is used as the primary key for this table, ensuring that each payment made by a customer is uniquely identified.",
        "Lessons": "Stores information about lessons offered by the organization. The `lesson_id` is a unique identifier for each lesson. The `customer_id` is a foreign key that links this table to the `Customers` table, indicating the customer who booked the lesson. The `lesson_status_code` stores the status of the lesson, potentially indicating booked, cancelled, completed, or other relevant statuses. The `staff_id` is a foreign key that links this table to the `Staff` table, indicating the staff member who will be conducting the lesson. The `vehicle_id` is a foreign key that links this table to the `Vehicles` table, indicating the vehicle that will be used for the lesson. The `lesson_date` stores the date of the lesson. The `lesson_time` stores the time of the lesson. The `price` stores the price of the lesson."
    },
    "election": {
        "county": "The `county` table stores information about each county. The `County_Id` column represents a unique identifier for each county. The `County_name` column contains the name of the county. The `Population` column stores the population of the county, represented as a real number. The `Zip_code` column contains the zip code of the county.",
        "party": "The `party` table stores information about political parties. The `Party_ID` column represents a unique identifier for each party. The `Year` column stores the year of the election. The `Party` column stores the name of the political party. The `Governor`, `Lieutenant_Governor`, `Comptroller`, `Attorney_General`, and `US_Senate` columns store the names of the elected officials from that party for the respective positions.",
        "election": "The `election` table stores information about elected officials in each district. The `Election_ID` column represents a unique identifier for each elected official. The `Counties_Represented` column stores a list of counties represented by the elected official. The `District` column stores the district number of the official. The `Delegate` column stores the name of the elected official. The `Party` column stores the `Party_ID` of the party the official belongs to. The `First_Elected` column stores the year the official was first elected. The `Committee` column stores the name of the committee the official belongs to."
    },
    "election_representative": {
        "election": "This table stores information about elections. The `Election_ID` column is the unique identifier for each election. The `Representative_ID` column links each election to the representative who participated. The `Date` column stores the date of the election. The `Votes` column stores the total number of votes received by the representative in the election. The `Vote_Percent` column stores the percentage of votes received by the representative. The `Seats` column stores the number of seats won by the representative in the election. The `Place` column stores the position the representative finished in the election (e.g., 1st, 2nd).",
        "representative": "This table stores information about representatives. The `Representative_ID` column is the unique identifier for each representative. The `Name` column stores the name of the representative. The `State` column stores the state the representative represents. The `Party` column stores the political party the representative is affiliated with. The `Lifespan` column stores the representative's lifespan, likely in the format \"birth year - death year\" or \"birth year - present\"."
    },
    "entertainment_awards": {
        "festival_detail": "This table stores detailed information about various festivals. The `Festival_ID` column uniquely identifies each festival. `Festival_Name` contains the name of the festival.  `Chair_Name` refers to the name of the person responsible for organizing the festival. `Location` specifies the physical location where the festival takes place. `Year` indicates the year in which the festival was held. Finally, `Num_of_Audience` records the total number of attendees at the festival.",
        "artwork": "This table stores information about different artworks.  `Artwork_ID` uniquely identifies each artwork. `Type` specifies the category of the artwork (e.g., painting, sculpture, film). `Name` represents the title or name of the artwork.",
        "nomination": "This table stores information about nominations for artworks at festivals. `Artwork_ID` refers to the artwork that was nominated, linking to the `artwork` table. `Festival_ID` indicates the festival for which the nomination was submitted, linking to the `festival_detail` table. `Result` captures the outcome of the nomination, indicating whether the artwork won, lost, or received a special mention."
    },
    "entrepreneur": {
        "entrepreneur": "Stores information about entrepreneurs who are seeking investment for their companies. The Entrepreneur_ID is a unique identifier for each entrepreneur in the database. The People_ID links the entrepreneur to their corresponding entry in the \"people\" table, providing details like their name, height, weight, and date of birth. The Company column holds the name of the entrepreneur's business. The Money_Requested column indicates the amount of investment the entrepreneur is seeking. The Investor column specifies the name of the investor the entrepreneur is targeting for their investment.",
        "people": "Contains general information about individuals, including their name, height, weight, and date of birth. The People_ID acts as a primary key, uniquely identifying each individual in the database. The Name column stores the full name of the individual. The Height column records their height, potentially in meters or feet. The Weight column indicates their weight, potentially in kilograms or pounds. The Date_of_Birth column stores the individual's date of birth in a text format."
    },
    "e_government": {
        "Addresses": "Stores information about addresses. The column `address_id` uniquely identifies each address. `line_1_number_building` stores the first line of the address, which typically includes the house number and street name. `town_city` stores the town or city where the address is located. `zip_postcode` stores the postal code or zip code associated with the address. `state_province_county` stores the state, province, or county of the address. `country` stores the country where the address is located.",
        "Services": "Stores information about different services offered. The column `service_id` uniquely identifies each service. `service_type_code` stores a unique code representing the type of service. `service_name` stores the name of the service. `service_descriptio` provides a description of the service.",
        "Forms": "Stores information about forms related to services. The column `form_id` uniquely identifies each form. `form_type_code` stores a unique code representing the type of form. `service_id` stores the ID of the service the form is related to. `form_number` stores the form number or identifier. `form_name` stores the name of the form. `form_description` provides a description of the form.",
        "Individuals": "Stores information about individuals. The column `individual_id` uniquely identifies each individual. `individual_first_name` stores the individual's first name. `individual_middle_name` stores the individual's middle name. `inidividual_phone` stores the individual's phone number. `individual_email` stores the individual's email address. `individual_address` stores the individual's address. `individual_last_name` stores the individual's last name.",
        "Organizations": "Stores information about organizations. The column `organization_id` uniquely identifies each organization. `date_formed` stores the date the organization was formed. `organization_name` stores the name of the organization. `uk_vat_number` stores the organization's UK VAT number.",
        "Parties": "Stores information about parties, which could be individuals or organizations. The column `party_id` uniquely identifies each party. `payment_method_code` stores a code representing the party's preferred payment method. `party_phone` stores the party's phone number. `party_email` stores the party's email address.",
        "Organization_Contact_Individuals": "Stores information about the individuals who are contacts for organizations. The columns `individual_id` and `organization_id` together form the primary key and uniquely identify each contact relationship. `date_contact_from` stores the date from which the individual became a contact for the organization. `date_contact_to` stores the date until which the individual was a contact for the organization, if applicable.",
        "Party_Addresses": "Stores information about the addresses associated with parties. The columns `party_id` and `address_id` together form the primary key and uniquely identify each address association. `date_address_from` stores the date from which the address became associated with the party. `address_type_code` stores a code representing the type of address, such as billing or shipping. `date_address_to` stores the date until which the address was associated with the party, if applicable.",
        "Party_Forms": "Stores information about the forms submitted by parties. The columns `party_id` and `form_id` together form the primary key and uniquely identify each form submission. `date_completion_started` stores the date when the party started completing the form. `form_status_code` stores a code representing the status of the form, such as completed or pending. `date_fully_completed` stores the date when the form was fully completed by the party, if applicable.",
        "Party_Services": "Stores information about the services booked by parties. The columns `booking_id`, `customer_id`, and `service_id` together form the primary key and uniquely identify each booking. `customer_id` stores the ID of the party who booked the service. `service_id` stores the ID of the service being booked. `service_datetime` stores the date and time of the service booking. `booking_made_date` stores the date when the booking was made."
    },
    "e_learning": {
        "Course_Authors_and_Tutors": "Stores information about authors and tutors who create and deliver courses. Each row represents an author/tutor with unique 'author_id'. The 'author_tutor_ATB' column specifies whether they are an author ('A'), tutor ('T'), or both ('B'). 'login_name' and 'password' are used for system access. 'personal_name', 'middle_name', and 'family_name' store their full names. 'gender_mf' indicates gender (M for male, F for female). 'address_line_1' holds their first address line.",
        "Students": "Stores information about registered students. Each row represents a student with a unique 'student_id'. 'date_of_registration' indicates when the student first registered on the platform. 'date_of_latest_logon' records the last time the student logged in. 'login_name' and 'password' are used for system access. 'personal_name', 'middle_name', and 'family_name' store their full names.",
        "Subjects": "Stores information about different subjects offered. Each row represents a unique subject with 'subject_id'. 'subject_name' stores the name of the subject.",
        "Courses": "Stores information about different courses available. Each row represents a course with a unique 'course_id'. 'author_id' links the course to its author/tutor from the 'Course_Authors_and_Tutors' table. 'subject_id' links the course to its corresponding subject from the 'Subjects' table. 'course_name' stores the course's name and 'course_description' provides a brief overview of the course content.",
        "Student_Course_Enrolment": "Stores information about students enrolled in courses. Each row represents a student's enrolment in a specific course, with a unique 'registration_id'. 'student_id' links the enrolment to the student from the 'Students' table. 'course_id' links the enrolment to the course from the 'Courses' table. 'date_of_enrolment' indicates when the student enrolled in the course. 'date_of_completion' marks the date when the student completed the course.",
        "Student_Tests_Taken": "Stores information about tests taken by students. Each row represents a test taken by a student in a course, linked to the specific enrolment using 'registration_id' from 'Student_Course_Enrolment'. 'date_test_taken' records the date the test was taken. 'test_result' stores the student's result on the test."
    },
    "farm": {
        "city": "This table contains information about different cities. The `City_ID` column is a unique identifier for each city. The `Official_Name` column stores the official name of the city. The `Status` column likely indicates the administrative status of the city, such as whether it is a municipality, a capital, or a village. The `Area_km_2` column stores the area of the city in square kilometers. The `Population` column stores the population of the city. Finally, the `Census_Ranking` column likely indicates the city's ranking based on its population within a larger geographical region or country.",
        "farm": "This table contains information about farms in a given year. The `Farm_ID` column is a unique identifier for each farm. The `Year` column indicates the year for which the farm data is recorded. The columns `Total_Horses`, `Working_Horses`, `Total_Cattle`, `Oxen`, `Bulls`, `Cows`, `Pigs`, and `Sheep_and_Goats` all store data about the livestock population of the farm in that year. This data likely represents the number of each animal type present on the farm during that year.",
        "farm_competition": "This table contains information about farm competitions. The `Competition_ID` column is a unique identifier for each competition. The `Year` column indicates the year in which the competition took place. The `Theme` column describes the general subject or focus of the competition, such as dairy farming or horse breeding. The `Host_city_ID` column links to the `City_ID` column in the `city` table, indicating the city where the competition was held. The `Hosts` column likely stores information about the individuals or organizations responsible for organizing and hosting the competition.",
        "competition_record": "This table stores information about farm participation in competitions and their results. The `Competition_ID` column links to the `Competition_ID` column in the `farm_competition` table, indicating the specific competition in question. The `Farm_ID` column links to the `Farm_ID` column in the `farm` table, indicating the farm participating in the competition. The `Rank` column stores the ranking of the farm in the competition. This table therefore links information about farms and competitions to show which farms participated in which competitions and how they performed."
    },
    "film_rank": {
        "film": "The `film` table stores information about films. It contains details like the unique `Film_ID` of each film, the `Title` of the film, the `Studio` that produced the film, the `Director` of the film, and the `Gross_in_dollar` which is the total revenue generated by the film. The primary key is `Film_ID`, ensuring that each film has a unique identifier.",
        "market": "The `market` table contains information about different movie markets. Each market has a unique `Market_ID`, a `Country` that it represents, and a `Number_cities` which denotes the number of cities in that market. The `Market_ID` serves as the primary key, ensuring that each market is uniquely identified.",
        "film_market_estimation": "The `film_market_estimation` table stores information about film estimations in different markets. Each entry in the table represents an estimation for a particular film in a specific market and year.  It contains a unique `Estimation_ID` for each estimation, a `Low_Estimate` which is the lower bound of the expected revenue, a `High_Estimate` which represents the upper bound of the expected revenue, the `Film_ID` of the film, the `Type` of estimation (e.g., box office, streaming), the `Market_ID` of the market, and the `Year` for which the estimation is made. The `Estimation_ID` is the primary key, ensuring that each estimation is uniquely identifiable. The table also includes foreign keys referencing `Film_ID` from the `film` table and `Market_ID` from the `market` table."
    },
    "flight_1": {
        "flight": "The flight table stores information about each flight offered by the airline. The `flno` column represents the unique flight number for each flight. The `origin` and `destination` columns indicate the starting and ending cities for the flight, respectively. The `distance` column stores the total distance covered by the flight. The `departure_date` and `arrival_date` columns store the dates on which the flight departs and arrives at its destination. The `price` column specifies the cost of the flight ticket. Lastly, the `aid` column links each flight to a specific aircraft, referencing the `aid` from the aircraft table, indicating which aircraft is assigned to the flight.",
        "aircraft": "The aircraft table stores information about each aircraft owned by the airline. The `aid` column represents the unique identification number for each aircraft. The `name` column stores the name or model of the aircraft. The `distance` column indicates the maximum distance the aircraft can travel before needing refueling.",
        "employee": "The employee table stores information about each employee working for the airline. The `eid` column represents the unique employee ID for each employee. The `name` column stores the full name of the employee. The `salary` column specifies the employee's monthly salary.",
        "certificate": "The certificate table tracks the certifications held by employees for specific aircraft. The `eid` column references the employee ID from the employee table, indicating which employee holds the certification. The `aid` column references the aircraft ID from the aircraft table, specifying which aircraft the employee is certified to operate. The table essentially records the certifications of each employee for different aircraft types, ensuring proper qualification for pilots and other crew members."
    },
    "flight_company": {
        "airport": "Stores information about airports. The `id` column is a unique identifier for each airport. The `City` column stores the city where the airport is located. The `Country` column stores the country where the airport is located. The `IATA` column stores the International Air Transport Association (IATA) airport code, a three-letter code used to identify airports. The `ICAO` column stores the International Civil Aviation Organization (ICAO) airport code, a four-letter code used to identify airports. The `name` column stores the full name of the airport.",
        "operate_company": "Stores information about companies that operate flights. The `id` column is a unique identifier for each company. The `name` column stores the name of the company. The `Type` column stores the type of company, such as airline or charter. The `Principal_activities` column stores the company's primary business activities. The `Incorporated_in` column stores the country where the company is incorporated. The `Group_Equity_Shareholding` column stores the percentage of the company's equity owned by its parent group.",
        "flight": "Stores information about individual flights. The `id` column is a unique identifier for each flight. The `Vehicle_Flight_number` column stores the flight number, a unique identifier for each flight. The `Date` column stores the date of the flight. The `Pilot` column stores the name of the pilot flying the flight. The `Velocity` column stores the average velocity of the flight. The `Altitude` column stores the average altitude of the flight. The `airport_id` column stores the foreign key linking the flight to the airport table, indicating the airport the flight departed from. The `company_id` column stores the foreign key linking the flight to the operate_company table, indicating the company operating the flight."
    },
    "formula_1": {
        "circuits": "Stores information about all the circuits used in Formula 1 racing. `circuitId` is the unique identifier for each circuit. `circuitRef` is the short reference code for the circuit, `name` is the full name of the circuit, and `location` is the city or town where the circuit is located. `country` is the country where the circuit is located. `lat`, `lng`, and `alt` are the latitude, longitude, and altitude of the circuit respectively. `url` is the URL for the circuit's official website.",
        "races": "Stores information about all the races in Formula 1 racing. `raceId` is the unique identifier for each race. `year` is the year the race was held, `round` is the round number of the race in the season, `circuitId` is the foreign key referencing the `circuits` table, indicating which circuit the race was held on.  `name` is the name of the race, `date` is the date the race was held, `time` is the time the race was held, and `url` is the URL for the race's official website.",
        "drivers": "Stores information about all the drivers in Formula 1 racing. `driverId` is the unique identifier for each driver. `driverRef` is the short reference code for the driver, `number` is the driver's race number, `code` is the driver's three-letter code, `forename` is the driver's first name, `surname` is the driver's last name, `dob` is the driver's date of birth, `nationality` is the driver's nationality, and `url` is the URL for the driver's official website.",
        "status": "Stores information about the different race statuses. `statusId` is the unique identifier for each status. `status` is the name of the status.",
        "seasons": "Stores information about all the seasons in Formula 1 racing. `year` is the year the season was held, `url` is the URL for the season's official website.",
        "constructors": "Stores information about all the constructors in Formula 1 racing. `constructorId` is the unique identifier for each constructor. `constructorRef` is the short reference code for the constructor, `name` is the full name of the constructor, `nationality` is the nationality of the constructor, and `url` is the URL for the constructor's official website.",
        "constructorStandings": "Stores information about the constructor standings after each race. `constructorStandingsId` is the unique identifier for each constructor standing. `raceId` is the foreign key referencing the `races` table, indicating which race the standings are for. `constructorId` is the foreign key referencing the `constructors` table, indicating which constructor the standings are for. `points` is the number of points the constructor has earned, `position` is the constructor's position in the standings, `positionText` is the constructor's position in the standings as a text string, and `wins` is the number of wins the constructor has earned.",
        "results": "Stores information about the results of each race. `resultId` is the unique identifier for each result. `raceId` is the foreign key referencing the `races` table, indicating which race the result is for. `driverId` is the foreign key referencing the `drivers` table, indicating which driver the result is for. `constructorId` is the foreign key referencing the `constructors` table, indicating which constructor the driver was driving for.  `number` is the driver's race number, `grid` is the driver's starting position, `position` is the driver's finishing position, `positionText` is the driver's finishing position as a text string, `positionOrder` is the driver's finishing order, `points` is the number of points the driver earned, `laps` is the number of laps the driver completed, `time` is the driver's race time, `milliseconds` is the driver's race time in milliseconds, `fastestLap` is the driver's fastest lap number, `rank` is the driver's fastest lap ranking, `fastestLapTime` is the driver's fastest lap time, `fastestLapSpeed` is the driver's fastest lap speed, and `statusId` is the foreign key referencing the `status` table, indicating the driver's race status.",
        "driverStandings": "Stores information about the driver standings after each race. `driverStandingsId` is the unique identifier for each driver standing. `raceId` is the foreign key referencing the `races` table, indicating which race the standings are for. `driverId` is the foreign key referencing the `drivers` table, indicating which driver the standings are for. `points` is the number of points the driver has earned, `position` is the driver's position in the standings, `positionText` is the driver's position in the standings as a text string, and `wins` is the number of wins the driver has earned.",
        "constructorResults": "Stores information about the constructor results after each race. `constructorResultsId` is the unique identifier for each constructor result. `raceId` is the foreign key referencing the `races` table, indicating which race the result is for. `constructorId` is the foreign key referencing the `constructors` table, indicating which constructor the result is for. `points` is the number of points the constructor earned, and `status` is the constructor's race status.",
        "qualifying": "Stores information about the qualifying results of each race. `qualifyId` is the unique identifier for each qualifying result. `raceId` is the foreign key referencing the `races` table, indicating which race the qualifying result is for. `driverId` is the foreign key referencing the `drivers` table, indicating which driver the qualifying result is for. `constructorId` is the foreign key referencing the `constructors` table, indicating which constructor the driver was driving for. `number` is the driver's race number, `position` is the driver's qualifying position, `q1` is the driver's fastest lap time in Q1, `q2` is the driver's fastest lap time in Q2, and `q3` is the driver's fastest lap time in Q3.",
        "pitStops": "Stores information about the pit stops made during each race. `raceId` is the foreign key referencing the `races` table, indicating which race the pit stop was made during. `driverId` is the foreign key referencing the `drivers` table, indicating which driver made the pit stop. `stop` is the pit stop number, `lap` is the lap number the pit stop was made on, `time` is the time the pit stop was made, `duration` is the duration of the pit stop, and `milliseconds` is the duration of the pit stop in milliseconds.",
        "lapTimes": "Stores information about the lap times of each driver during each race. `raceId` is the foreign key referencing the `races` table, indicating which race the lap times are for. `driverId` is the foreign key referencing the `drivers` table, indicating which driver the lap times are for. `lap` is the lap number, `position` is the driver's position on the lap, `time` is the driver's lap time, and `milliseconds` is the driver's lap time in milliseconds."
    },
    "game_1": {
        "Student": "Stores information about all the students in a university. The column StuID is the student ID of each student, which is unique to each student. LName is the last name of the student, Fname is the first name of the student, Age is the age of the student, Sex is the gender of the student (M for male, F for female), Major is the major of the student, Advisor is the ID of the advisor of the student, and city_code is the city code of the city where the student resides.",
        "Video_Games": "Stores information about various video games. The column GameID is the unique ID of each game, GName is the name of the game, and GType is the genre of the game.",
        "Plays_Games": "Stores information about the video games played by each student. The column StuID is the student ID of the student, GameID is the ID of the game played by the student, and Hours_Played is the number of hours the student has played the game.",
        "SportsInfo": "Stores information about the sports played by each student. The column StuID is the student ID of the student, SportName is the name of the sport played by the student, HoursPerWeek is the number of hours the student spends playing the sport per week, GamesPlayed is the number of games the student has played, and OnScholarship is whether the student is on scholarship for the sport (Y for yes, N for no)."
    },
    "game_injury": {
        "stadium": "This table stores information about different stadiums. The `id` column is the unique identifier for each stadium. The `name` column stores the name of the stadium. The `Home_Games` column stores the total number of home games played at the stadium. The `Average_Attendance` column stores the average attendance for the home games played at the stadium. The `Total_Attendance` column stores the total number of people who attended the home games at the stadium. The `Capacity_Percentage` column stores the percentage of the stadium's capacity that is filled on average.",
        "game": "This table stores information about individual games played at different stadiums. The `stadium_id` column references the `stadium` table and indicates which stadium the game was played at. The `id` column is a unique identifier for each game. The `Season` column stores the season in which the game was played. The `Date` column stores the date the game was played. The `Home_team` column stores the name of the home team in the game. The `Away_team` column stores the name of the away team in the game. The `Score` column stores the final score of the game. The `Competition` column stores the name of the competition the game was a part of.",
        "injury_accident": "This table stores information about injuries and accidents that occurred during games. The `game_id` column references the `game` table and indicates which game the injury occurred during. The `id` column is a unique identifier for each injury. The `Player` column stores the name of the player who was injured. The `Injury` column stores a description of the injury. The `Number_of_matches` column stores information about the number of matches the player missed due to the injury. The `Source` column stores information about the source of the injury report."
    },
    "gas_company": {
        "company": "This table stores information about different companies, including their ranking, name, headquarters, main industry, and financial metrics like sales, profits, assets, and market value. The `Company_ID` column is a unique identifier for each company. `Rank` represents the company's ranking based on a specific criteria, which isn't specified in the schema. `Company` is the name of the company. `Headquarters` indicates the location of the company's main office. `Main_Industry` specifies the primary industry the company operates in. The remaining columns, `Sales_billion`, `Profits_billion`, `Assets_billion`, and `Market_Value`, represent the company's sales revenue, profits, assets, and market value respectively, all expressed in billions of dollars.",
        "gas_station": "This table contains details about individual gas stations. The `Station_ID` uniquely identifies each gas station. `Open_Year` indicates the year the station was opened. `Location` specifies the geographical location of the station. `Manager_Name`, `Vice_Manager_Name`, and `Representative_Name` store the names of the station's manager, vice-manager, and representative respectively.",
        "station_company": "This table establishes a relationship between gas stations and companies. It lists which company owns or operates which gas station, along with the company's rank for the corresponding year. `Station_ID` and `Company_ID` serve as foreign keys referencing the `gas_station` and `company` tables respectively. `Rank_of_the_Year` indicates the company's ranking at the time it owned or operated the station."
    },
    "gymnast": {
        "gymnast": "Stores information regarding all the gymnasts in the database. The column Gymnast_ID is the unique identifier for each gymnast. Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, and Horizontal_Bar_Points store the points scored by the gymnast on each individual apparatus. Total_Points stores the total points earned by the gymnast across all apparatus.",
        "people": "Stores information about all the individuals in the database. People_ID is the unique identifier for each person. Name stores the full name of the individual. Age stores the age of the individual. Height stores the height of the individual in meters. Hometown stores the city where the individual is from."
    },
    "hospital_1": {
        "Physician": "The Physician table stores information about all the physicians in the hospital. The EmployeeID column holds a unique identifier for each physician, while the Name column stores their full name. The Position column specifies their job title within the hospital, and the SSN column records their Social Security Number for identification purposes.",
        "Department": "The Department table maintains information about the different departments within the hospital. The DepartmentID column provides a unique identifier for each department, while the Name column stores the department's name (e.g., Cardiology, Neurology). The Head column links the department to a physician who acts as the department head, using their EmployeeID from the Physician table.",
        "Affiliated_With": "The Affiliated_With table captures the affiliation of physicians with various departments. The Physician column links to the EmployeeID of a physician from the Physician table, and the Department column links to the DepartmentID of a department from the Department table. The PrimaryAffiliation column indicates whether the physician's main affiliation is with that department (TRUE) or not (FALSE).",
        "Procedures": "The Procedures table contains details about medical procedures performed at the hospital. The Code column provides a unique identifier for each procedure, the Name column stores the procedure's name (e.g., \"Heart Bypass Surgery\"), and the Cost column records the cost of performing the procedure.",
        "Trained_In": "The Trained_In table records the training and certification of physicians in various medical procedures. The Physician column links to the EmployeeID of a physician from the Physician table, and the Treatment column links to the Code of a procedure from the Procedures table. The CertificationDate records the date when the physician received their certification, and CertificationExpires indicates the date the certification expires.",
        "Patient": "The Patient table stores information about patients who receive care at the hospital. The SSN column holds the patient's Social Security Number, serving as their unique identifier. The Name column stores their full name, Address records their residential address, Phone stores their phone number, and InsuranceID stores their insurance policy number. The PCP column links to the EmployeeID of the patient's primary care physician from the Physician table.",
        "Nurse": "The Nurse table stores information about nurses working at the hospital. The EmployeeID column provides a unique identifier for each nurse, while the Name column stores their full name. The Position column specifies their job title within the hospital, and the Registered column indicates if they are a registered nurse (TRUE) or not (FALSE). The SSN column records their Social Security Number for identification purposes.",
        "Appointment": "The Appointment table keeps track of scheduled appointments for patients. The AppointmentID column provides a unique identifier for each appointment. The Patient column links to the SSN of the patient from the Patient table, PrepNurse links to the EmployeeID of the nurse preparing the patient from the Nurse table, and Physician links to the EmployeeID of the physician conducting the appointment from the Physician table. The Start and End columns record the appointment's start and end times, and ExaminationRoom specifies the room where the appointment will take place.",
        "Medication": "The Medication table stores information about various medications used in the hospital. The Code column provides a unique identifier for each medication, the Name column stores the medication's name (e.g., \"Aspirin\"), the Brand column specifies the brand name (e.g., \"Bayer\"), and the Description provides a brief description of the medication.",
        "Prescribes": "The Prescribes table records instances of physicians prescribing medications to patients. The Physician column links to the EmployeeID of the prescribing physician from the Physician table, the Patient column links to the SSN of the patient from the Patient table, and the Medication column links to the Code of the prescribed medication from the Medication table. The Date column records the date when the prescription was issued. The Appointment column links to the AppointmentID of the appointment during which the prescription was issued, and Dose records the prescribed dosage of the medication.",
        "Block": "The Block table stores information about building blocks within the hospital. The BlockFloor column specifies the floor number where the block is located, and the BlockCode provides a unique identifier for each block within a floor.",
        "Room": "The Room table contains details about individual rooms within the hospital. The RoomNumber column provides a unique identifier for each room, and the RoomType specifies the type of room (e.g., \"Private\", \"Shared\"). The BlockFloor and BlockCode columns link to the corresponding block from the Block table using foreign keys. The Unavailable column indicates whether the room is currently occupied or available for use.",
        "On_Call": "The On_Call table tracks nurses who are on call for specific blocks within the hospital. The Nurse column links to the EmployeeID of the nurse from the Nurse table, the BlockFloor and BlockCode columns link to the corresponding block from the Block table. The OnCallStart and OnCallEnd columns record the start and end times of the nurse's on-call shift.",
        "Stay": "The Stay table maintains records of patient stays in hospital rooms. The StayID column provides a unique identifier for each stay. The Patient column links to the SSN of the patient from the Patient table, and the Room column links to the RoomNumber of the room assigned to the patient from the Room table. The StayStart and StayEnd columns record the start and end dates of the patient's stay.",
        "Undergoes": "The Undergoes table records instances of patients undergoing specific procedures during their hospital stay. The Patient column links to the SSN of the patient from the Patient table, the Procedures column links to the Code of the procedure from the Procedures table, and the Stay column links to the StayID of the patient's stay from the Stay table. The DateUndergoes column records the date when the procedure was performed. The Physician column links to the EmployeeID of the physician who performed the procedure from the Physician table, and the AssistingNurse column links to the EmployeeID of the assisting nurse from the Nurse table."
    },
    "hr_1": {
        "regions": "Stores information about different regions across the world. The `REGION_ID` column is a unique identifier for each region, and `REGION_NAME` contains the name of the region.",
        "countries": "Contains data about different countries. Each country is uniquely identified by the `COUNTRY_ID` column, and `COUNTRY_NAME` stores the country's name. `REGION_ID` specifies the region to which the country belongs, establishing a relationship with the `regions` table.",
        "departments": "Stores information about the departments within the company.  `DEPARTMENT_ID` acts as a unique identifier for each department. `DEPARTMENT_NAME` stores the name of the department, `MANAGER_ID` indicates the employee ID of the department manager, and `LOCATION_ID` links the department to its physical location, creating a relationship with the `locations` table.",
        "jobs": "This table contains information about the different job roles within the company. `JOB_ID` serves as a unique identifier for each job, and `JOB_TITLE` specifies the job title. `MIN_SALARY` and `MAX_SALARY` represent the minimum and maximum salary ranges for that particular job role.",
        "employees": "Stores information regarding all the employees in the company. `EMPLOYEE_ID` is the employee ID of each employee, which is unique to each employee. `FIRST_NAME` and `LAST_NAME` store the employee's first and last names.  `EMAIL` stores the employee's email address, `PHONE_NUMBER` contains their phone number, and `HIRE_DATE` records the date when they joined the company. `JOB_ID` specifies the job role of the employee, connecting this table to the `jobs` table. `SALARY` stores the employee's current salary, `COMMISSION_PCT` indicates any potential commission earned, `MANAGER_ID` specifies the ID of their manager, and `DEPARTMENT_ID` links the employee to their department, creating a relationship with the `departments` table.",
        "job_history": "Contains historical data about employees' job changes within the company. `EMPLOYEE_ID` specifies the employee, `START_DATE` and `END_DATE` mark the duration of the job, `JOB_ID` indicates the job held during that period, and `DEPARTMENT_ID` specifies the department the employee was assigned to. The table connects to `employees`, `jobs`, and `departments` tables through these foreign keys.",
        "locations": "Stores information about different physical locations used by the company.  `LOCATION_ID` uniquely identifies each location. `STREET_ADDRESS`, `POSTAL_CODE`, `CITY`, `STATE_PROVINCE`, and `COUNTRY_ID` provide the location's address information, creating a relationship with the `countries` table."
    },
    "icfp_1": {
        "Inst": "This table stores information about different institutions. The instID column contains a unique integer identifier for each institution. The name column stores the name of the institution, and the country column indicates the country where the institution is located.",
        "Authors": "This table stores information about authors. The authID column is a unique integer identifier for each author. The lname and fname columns store the last and first names of each author respectively.",
        "Papers": "This table stores information about papers. The paperID column is a unique integer identifier for each paper. The title column stores the title of the paper.",
        "Authorship": "This table represents the relationship between authors, institutions, and papers. It contains information about which authors are affiliated with which institutions and have authored which papers. The authID, instID, and paperID columns are foreign keys referencing the corresponding primary keys in the Authors, Inst, and Papers tables respectively. The authOrder column indicates the order of authorship for each author on a particular paper, allowing us to distinguish between first, second, and subsequent authors."
    },
    "inn_1": {
        "Rooms": "This table stores information about the different rooms available in a hotel or lodging facility. The `RoomId` column uniquely identifies each room. The `roomName` column stores the name or designation of the room, such as \"Deluxe King Suite\" or \"Standard Double Room\". The `beds` column indicates the number of beds present in the room. `bedType` specifies the type of bed, for example, \"King\", \"Queen\", or \"Twin\". `maxOccupancy` defines the maximum number of people allowed in the room. `basePrice` stores the base price of the room, which could be the nightly or daily rate. Finally, `decor` indicates the decor style or theme of the room, such as \"Modern\", \"Classic\", or \"Rustic\".",
        "Reservations": "This table stores information about the reservations made for the rooms. The `Code` column is a unique identifier for each reservation. The `Room` column references the `RoomId` from the `Rooms` table, indicating which room the reservation is for. The `CheckIn` and `CheckOut` columns store the dates when the guest checks in and out of the room. `Rate` represents the agreed upon price for the reservation, which may be based on the room's base price and other factors. `LastName` and `FirstName` store the last and first names of the person making the reservation. `Adults` and `Kids` columns indicate the number of adults and children staying in the room."
    },
    "insurance_and_eClaims": {
        "Customers": "Stores information about all customers. The `Customer_ID` column is the unique identifier for each customer. The `Customer_Details` column contains information about the customer, such as their name, address, and contact information.",
        "Staff": "Stores information about all staff members. The `Staff_ID` column is the unique identifier for each staff member. The `Staff_Details` column contains information about the staff member, such as their name, job title, and contact information.",
        "Policies": "Stores information about all insurance policies. The `Policy_ID` column is the unique identifier for each policy. The `Customer_ID` column links the policy to the customer who owns it. The `Policy_Type_Code` column specifies the type of insurance policy. The `Start_Date` column indicates when the policy was first issued. The `End_Date` column indicates when the policy is scheduled to expire.",
        "Claim_Headers": "Stores information about all insurance claims. The `Claim_Header_ID` column is the unique identifier for each claim. The `Claim_Status_Code` column indicates the current status of the claim. The `Claim_Type_Code` column specifies the type of insurance claim. The `Policy_ID` column links the claim to the insurance policy it is associated with. The `Date_of_Claim` column indicates when the claim was filed. The `Date_of_Settlement` column indicates when the claim was settled. The `Amount_Claimed` column contains the amount of money that was claimed. The `Amount_Piad` column contains the amount of money that was actually paid.",
        "Claims_Documents": "Stores information about the documents that are associated with each insurance claim. The `Claim_ID` column links the document to the claim it is associated with. The `Document_Type_Code` column specifies the type of document. The `Created_by_Staff_ID` column identifies the staff member who created the document. The `Created_Date` column indicates when the document was created.",
        "Claims_Processing_Stages": "Stores information about the different stages that an insurance claim can go through. The `Claim_Stage_ID` column is the unique identifier for each stage. The `Next_Claim_Stage_ID` column identifies the next stage in the process. The `Claim_Status_Name` column is the name of the stage. The `Claim_Status_Description` column contains a description of the stage.",
        "Claims_Processing": "Stores information about the processing of insurance claims. The `Claim_Processing_ID` column is the unique identifier for each processing step. The `Claim_ID` column links the processing step to the claim it is associated with. The `Claim_Outcome_Code` column indicates the outcome of the processing step. The `Claim_Stage_ID` column indicates the stage of the claim that the processing step applies to. The `Staff_ID` column identifies the staff member who is responsible for the processing step."
    },
    "insurance_fnol": {
        "Customers": "Stores information regarding all the customers in the database. The column Customer_ID is the unique ID assigned to each customer. The column Customer_name stores the name of the customer.",
        "Services": "Stores information about all the services offered by the company. The column Service_ID is the unique ID assigned to each service. The column Service_name stores the name of the service.",
        "Available_Policies": "Stores information about the available policies. The column Policy_ID is the unique ID assigned to each policy. The column policy_type_code stores the type of policy, and Customer_Phone stores the customer's phone number.",
        "Customers_Policies": "Stores information about the policies held by customers. The columns Customer_ID and Policy_ID are foreign keys referencing the Customers and Available_Policies tables respectively. The column Date_Opened records the date the policy was opened, and Date_Closed records the date the policy was closed.",
        "First_Notification_of_Loss": "Stores information about the first notification of loss (FNOL) for each claim. The column FNOL_ID is the unique ID assigned to each FNOL. The columns Customer_ID and Policy_ID are foreign keys referencing the Customers_Policies table. The column Service_ID is a foreign key referencing the Services table, indicating the service involved in the claim.",
        "Claims": "Stores information about the claims filed by customers. The column Claim_ID is the unique ID assigned to each claim. The column FNOL_ID is a foreign key referencing the First_Notification_of_Loss table. The column Effective_Date records the date the claim became effective.",
        "Settlements": "Stores information about the settlements of claims. The column Settlement_ID is the unique ID assigned to each settlement. The column Claim_ID is a foreign key referencing the Claims table. The column Effective_Date records the date the settlement was reached, and Settlement_Amount stores the amount of the settlement."
    },
    "insurance_policies": {
        "Customers": "Stores information about each customer in the database. The Customer_ID column is a unique identifier for each customer. The Customer_Details column contains details about the customer, such as their name, address, and phone number.",
        "Customer_Policies": "Stores information about the insurance policies that each customer has. The Policy_ID is a unique identifier for each policy. The Customer_ID column links the policy to the customer who owns it. The Policy_Type_Code identifies the type of insurance policy. The Start_Date and End_Date columns indicate the period when the policy is active.",
        "Claims": "Stores information about claims made on insurance policies. The Claim_ID column is a unique identifier for each claim. The Policy_ID column links the claim to the policy it is associated with. The Date_Claim_Made and Date_Claim_Settled columns indicate the dates when the claim was made and settled, respectively. The Amount_Claimed and Amount_Settled columns record the amount of money claimed and the amount that was eventually settled.",
        "Settlements": "Stores information about how claims were settled. The Settlement_ID column is a unique identifier for each settlement. The Claim_ID column links the settlement to the claim it is related to. The Date_Claim_Made and Date_Claim_Settled columns indicate the dates when the claim was made and settled, respectively. The Amount_Claimed and Amount_Settled columns record the amount of money claimed and the amount that was eventually settled. The Customer_Policy_ID column links the settlement to the specific policy involved in the claim.",
        "Payments": "Stores information about the payments made to settle claims. The Payment_ID column is a unique identifier for each payment. The Settlement_ID column links the payment to the settlement it is associated with. The Payment_Method_Code identifies the method used to make the payment. The Date_Payment_Made column indicates the date when the payment was made. The Amount_Payment column records the amount of money paid."
    },
    "journal_committee": {
        "journal": "The `journal` table stores information about different journals. Each row represents a single journal. The `Journal_ID` column is the unique identifier for each journal. The `Date` column stores the date when the journal was published. The `Theme` column indicates the main topic or subject covered in the journal. The `Sales` column contains the number of copies sold for that particular journal.",
        "editor": "The `editor` table stores information about all the editors associated with the journals. Each row represents a single editor. The `Editor_ID` column is the unique identifier for each editor. The `Name` column stores the editor's name. The `Age` column contains the editor's age.",
        "journal_committee": "The `journal_committee` table establishes a connection between editors and journals. Each row represents an editor's involvement in a specific journal. The `Editor_ID` and `Journal_ID` columns together form the primary key, indicating a unique relationship between an editor and a journal. The `Work_Type` column specifies the nature of the editor's contribution to the journal, such as \"editor-in-chief\", \"reviewer\", or \"associate editor\"."
    },
    "loan_1": {
        "bank": "This table contains information about all the branches of a bank. The branch_ID column is a unique identifier for each branch. The bname column stores the name of the bank branch. The no_of_customers column stores the number of customers associated with the branch. The city column stores the city where the branch is located. The state column stores the state where the branch is located.",
        "customer": "This table contains information about all the customers of the bank. The cust_ID column is a unique identifier for each customer. The cust_name column stores the name of the customer. The acc_type column stores the type of account the customer has. The acc_bal column stores the balance in the customer's account. The no_of_loans column stores the number of loans the customer has taken out. The credit_score column stores the credit score of the customer. The branch_ID column stores the ID of the branch where the customer is associated. The state column stores the state where the customer resides.",
        "loan": "This table contains information about all the loans taken out by customers. The loan_ID column is a unique identifier for each loan. The loan_type column stores the type of loan taken out. The cust_ID column stores the ID of the customer who took out the loan. The branch_ID column stores the ID of the branch where the loan was taken out. The amount column stores the amount of the loan."
    },
    "local_govt_and_lot": {
        "Customers": "This table contains information about all the customers in the database. The `customer_id` column stores a unique identifier for each customer. The `customer_details` column contains various details about the customer such as their name, address, phone number, etc.",
        "Properties": "This table stores information about all the properties in the database. The `property_id` column stores a unique identifier for each property. The `property_type_code` column stores the type of property, such as apartment, house, etc. The `property_address` column stores the address of the property. The `other_details` column contains other details about the property, such as the number of bedrooms, bathrooms, etc.",
        "Residents": "This table stores information about all the residents of the properties in the database. The `resident_id` column stores a unique identifier for each resident. The `property_id` column stores the identifier of the property that the resident resides in. The `date_moved_in` column stores the date when the resident moved into the property. The `date_moved_out` column stores the date when the resident moved out of the property. The `other_details` column contains other details about the resident, such as their name, phone number, etc.",
        "Organizations": "This table stores information about all the organizations in the database. The `organization_id` column stores a unique identifier for each organization. The `parent_organization_id` column stores the identifier of the parent organization, if any. The `organization_details` column contains various details about the organization, such as its name, address, phone number, etc.",
        "Services": "This table stores information about all the services offered by the organizations in the database. The `service_id` column stores a unique identifier for each service. The `organization_id` column stores the identifier of the organization that offers the service. The `service_type_code` column stores the type of service, such as maintenance, cleaning, etc. The `service_details` column contains various details about the service, such as its price, description, etc.",
        "Residents_Services": "This table stores information about the services that have been requested by the residents. The `resident_id` column stores the identifier of the resident who requested the service. The `service_id` column stores the identifier of the service requested. The `date_moved_in` column stores the date the resident moved into the property. The `property_id` column stores the identifier of the property that the resident resides in. The `date_requested` column stores the date when the resident requested the service. The `date_provided` column stores the date when the service was provided. The `other_details` column contains other details about the service, such as any special instructions.",
        "Things": "This table stores information about all the things that are used in the services provided by the organizations. The `thing_id` column stores a unique identifier for each thing. The `organization_id` column stores the identifier of the organization that uses the thing. The `Type_of_Thing_Code` column stores the type of thing, such as equipment, tools, etc. The `service_type_code` column stores the type of service that the thing is used for. The `service_details` column contains various details about the thing, such as its description, model number, etc.",
        "Customer_Events": "This table stores information about all the events related to customers and residents. The `Customer_Event_ID` column stores a unique identifier for each event. The `customer_id` column stores the identifier of the customer related to the event. The `date_moved_in` column stores the date the resident moved into the property. The `property_id` column stores the identifier of the property that the resident resides in. The `resident_id` column stores the identifier of the resident related to the event. The `thing_id` column stores the identifier of the thing related to the event.",
        "Customer_Event_Notes": "This table stores notes related to events in the `Customer_Events` table. The `Customer_Event_Note_ID` column stores a unique identifier for each note. The `Customer_Event_ID` column stores the identifier of the event that the note is related to. The `service_type_code` column stores the type of service that the note is related to. The `resident_id` column stores the identifier of the resident related to the note. The `property_id` column stores the identifier of the property that the resident resides in. The `date_moved_in` column stores the date the resident moved into the property.",
        "Timed_Status_of_Things": "This table stores information about the status of things at different times. The `thing_id` column stores the identifier of the thing. The `Date_and_Date` column stores the date and time when the status was recorded. The `Status_of_Thing_Code` column stores the status of the thing, such as available, in use, etc.",
        "Timed_Locations_of_Things": "This table stores information about the location of things at different times. The `thing_id` column stores the identifier of the thing. The `Date_and_Time` column stores the date and time when the location was recorded. The `Location_Code` column stores the location of the thing, such as at the office, at the warehouse, etc."
    },
    "local_govt_in_alabama": {
        "Services": "This table stores information about the different types of services offered. The `Service_ID` column is a unique identifier for each service. The `Service_Type_Code` column stores a code that identifies the type of service, such as \"Medical\", \"Educational\", or \"Social\".",
        "Participants": "This table stores information about the individuals or organizations participating in the events. The `Participant_ID` column is a unique identifier for each participant. The `Participant_Type_Code` column stores a code that identifies the type of participant, such as \"Individual\", \"Organization\", or \"Government Agency\". The `Participant_Details` column stores additional information about the participant, such as their name, address, or contact information.",
        "Events": "This table stores information about the events that are being organized. The `Event_ID` column is a unique identifier for each event. The `Service_ID` column links each event to a specific service from the `Services` table. The `Event_Details` column stores additional information about the event, such as the date, time, and location.",
        "Participants_in_Events": "This table links participants to events, indicating which participants are involved in which events. The `Event_ID` column references the `Events` table, and the `Participant_ID` column references the `Participants` table. This table allows for the tracking of multiple participants associated with each event."
    },
    "local_govt_mdm": {
        "Customer_Master_Index": "This table stores information about the master customer IDs and their details. The `master_customer_id` column is a unique identifier for each customer and acts as the primary key for the table. The `cmi_details` column stores a variety of information about the customer, including their name, address, and other relevant details. This table serves as the central point for referencing customer data across different systems.",
        "CMI_Cross_References": "This table provides cross-references between the master customer index and various source systems. Each row in this table represents a specific customer record in a particular source system. The `cmi_cross_ref_id` column acts as the primary key and uniquely identifies each cross-reference. The `master_customer_id` column links back to the `Customer_Master_Index` table to identify the corresponding master customer. The `source_system_code` column indicates the specific source system where the customer information is stored. This table is useful for identifying the source systems where a specific customer's data is available.",
        "Council_Tax": "This table stores information related to council tax for specific customers. Each row in this table represents a council tax record linked to a specific customer through the `cmi_cross_ref_id` column, which references the `CMI_Cross_References` table. The `council_tax_id` column acts as the primary key and uniquely identifies each council tax record. This table may contain details such as the council tax amount, payment history, and other relevant information.",
        "Business_Rates": "This table stores information related to business rates for specific customers. Each row in this table represents a business rates record linked to a specific customer through the `cmi_cross_ref_id` column, which references the `CMI_Cross_References` table. The `business_rates_id` column acts as the primary key and uniquely identifies each business rates record. This table may contain details such as the business rates amount, payment history, and other relevant information.",
        "Benefits_Overpayments": "This table stores information related to benefits overpayments for specific customers. Each row in this table represents a benefits overpayment record linked to a specific customer through the `cmi_cross_ref_id` column, which references the `CMI_Cross_References` table. The `council_tax_id` column acts as the primary key and uniquely identifies each benefits overpayment record. This table may contain details such as the amount of overpayment, payment history, and other relevant information.",
        "Parking_Fines": "This table stores information related to parking fines for specific customers. Each row in this table represents a parking fine record linked to a specific customer through the `cmi_cross_ref_id` column, which references the `CMI_Cross_References` table. The `council_tax_id` column acts as the primary key and uniquely identifies each parking fine record. This table may contain details such as the fine amount, payment history, and other relevant information.",
        "Rent_Arrears": "This table stores information related to rent arrears for specific customers. Each row in this table represents a rent arrears record linked to a specific customer through the `cmi_cross_ref_id` column, which references the `CMI_Cross_References` table. The `council_tax_id` column acts as the primary key and uniquely identifies each rent arrears record. This table may contain details such as the amount of arrears, payment history, and other relevant information.",
        "Electoral_Register": "This table stores information related to the electoral register for specific customers. Each row in this table represents an electoral register record linked to a specific customer through the `cmi_cross_ref_id` column, which references the `CMI_Cross_References` table. The `electoral_register_id` column acts as the primary key and uniquely identifies each electoral register record. This table may contain details such as the voter registration status, address, and other relevant information."
    },
    "machine_repair": {
        "repair": "This table stores information about repair requests. The `repair_ID` column is the unique identifier for each repair request. The `name` column contains a brief description of the repair. The `Launch_Date` column stores the date when the repair request was submitted. The `Notes` column holds any additional details or instructions about the repair.",
        "machine": "This table stores information about the machines that need repairs. The `Machine_ID` column is the unique identifier for each machine. The `Making_Year` column indicates the year the machine was manufactured. The `Class` column categorizes the machine based on its type. The `Team` column specifies which team is responsible for the machine. The `Machine_series` column stores the machine's series model. The `value_points` column reflects the machine's importance or value in the operation. The `quality_rank` column represents the overall quality rating of the machine.",
        "technician": "This table stores information about the technicians responsible for conducting repairs. The `technician_id` column uniquely identifies each technician. The `Name` column stores the technician's name. The `Team` column indicates which team the technician belongs to. The `Starting_Year` column records the year when the technician started working. The `Age` column contains the technician's current age.",
        "repair_assignment": "This table links technicians, repair requests, and machines, showing which technician is assigned to which repair request for which machine. The `technician_id` column references the technician's ID from the `technician` table. The `repair_ID` column references the repair request's ID from the `repair` table. The `Machine_ID` column references the machine's ID from the `machine` table."
    },
    "manufactory_1": {
        "Manufacturers": "The Manufacturers table stores information about various manufacturers. The 'Code' column acts as the primary key, uniquely identifying each manufacturer. The 'Name' column stores the manufacturer's full name, while 'Headquarter' provides the location of the manufacturer's headquarters. The 'Founder' column specifies the name of the individual who founded the company. Lastly, the 'Revenue' column represents the manufacturer's total annual revenue, expressed as a real number.",
        "Products": "The Products table stores information about different products. The 'Code' column, acting as the primary key, uniquely identifies each product. The 'Name' column stores the product's name, while the 'Price' column specifies the price of the product. The 'Manufacturer' column, a foreign key referencing the 'Manufacturers' table, indicates the manufacturer responsible for producing the product. This column helps establish a relationship between the products and their respective manufacturers."
    },
    "manufacturer": {
        "manufacturer": "This table stores information about different furniture manufacturers. Each manufacturer has a unique Manufacturer_ID, which is used as the primary key. The Open_Year column represents the year when the manufacturer was established. The Name column stores the name of the manufacturer, while Num_of_Factories and Num_of_Shops represent the number of factories and shops owned by the manufacturer, respectively.",
        "furniture": "This table stores information about various types of furniture. Each piece of furniture has a unique Furniture_ID, serving as the primary key. The Name column holds the name of the furniture item. The Num_of_Component column specifies the number of components required to manufacture the furniture. Finally, Market_Rate represents the general market price of the furniture item.",
        "furniture_manufacte": "This table acts as a bridge between the manufacturer and furniture tables, establishing a many-to-many relationship between them. It contains information about which manufacturers produce which furniture types and their corresponding prices. Each row represents a unique combination of a Manufacturer_ID and a Furniture_ID, serving as the primary key. The Price_in_Dollar column reflects the price at which a specific manufacturer sells a particular piece of furniture. Foreign keys link the Manufacturer_ID column to the manufacturer table and the Furniture_ID column to the furniture table, ensuring data integrity and consistency."
    },
    "match_season": {
        "country": "This table stores information about different countries. The Country_id column represents the unique identifier for each country, while Country_name stores the name of the country. The Capital column contains the name of the country's capital city, and Official_native_language stores the official language spoken in the country.",
        "team": "This table stores information about different teams. The Team_id column represents the unique identifier for each team, while Name stores the name of the team.",
        "match_season": "This table stores information about players and their details in different seasons. The Season column indicates the year or specific period of the season. Player stores the name of the player participating in the season. Position stores the playing position of the player in the team. Country represents the country where the player originates from and is a foreign key referencing the Country_id column in the country table. Team stores the team the player is associated with and is a foreign key referencing the Team_id column in the team table. Draft_Pick_Number represents the draft pick number of the player in the season. Draft_Class stores the draft class of the player. College represents the college or university the player attended.",
        "player": "This table stores information about individual players. The Player_ID column represents the unique identifier for each player. Player stores the name of the player. Years_Played stores the years the player played in the league. Total_WL stores the total win-loss record of the player. Singles_WL stores the singles win-loss record of the player. Doubles_WL stores the doubles win-loss record of the player. Team represents the team the player was associated with and is a foreign key referencing the Team_id column in the team table."
    },
    "medicine_enzyme_interaction": {
        "medicine": "Stores information regarding medicines. The column `id` is the unique identifier of each medicine. The `name` column stores the generic name of the medicine. The `Trade_Name` column stores the brand name of the medicine. The `FDA_approved` column indicates whether the medicine is approved by the FDA, and likely stores the approval status (e.g., \"Approved\", \"Pending\", \"Rejected\").",
        "enzyme": "Stores information regarding enzymes. The column `id` is the unique identifier of each enzyme. The `name` column stores the name of the enzyme. The `Location` column specifies the location of the enzyme within the body or cell. The `Product` column likely stores the product or molecule that the enzyme acts upon. The `Chromosome` column indicates the chromosome where the gene encoding the enzyme is located. The `OMIM` column likely refers to the Online Mendelian Inheritance in Man (OMIM) database, storing an identifier related to the enzyme or its associated gene. The `Porphyria` column indicates whether the enzyme is involved in any known porphyria disorders.",
        "medicine_enzyme_interaction": "Stores information regarding interactions between medicines and enzymes. The columns `enzyme_id` and `medicine_id` are foreign keys referencing the `enzyme` and `medicine` tables respectively, forming a composite primary key. This indicates that the combination of an enzyme and a medicine is unique in this table. The `interaction_type` column describes the nature of the interaction, indicating how the medicine affects the enzyme (e.g., \"inhibitor\", \"activator\", \"substrate\")."
    },
    "mountain_photos": {
        "mountain": "Stores information about mountains. The 'id' column represents the unique identifier for each mountain. The 'name' column stores the name of the mountain. The 'Height' column contains the height of the mountain in meters. The 'Prominence' column stores the topographic prominence of the mountain, which is the elevation difference between its summit and the lowest contour line that encloses it. The 'Range' column stores the mountain range to which the mountain belongs. Finally, the 'Country' column stores the country in which the mountain is located.",
        "camera_lens": "Stores information about camera lenses. The 'id' column represents the unique identifier for each lens. The 'brand' column stores the brand of the camera lens. The 'name' column stores the name of the camera lens. The 'focal_length_mm' column stores the focal length of the lens in millimeters. The 'max_aperture' column stores the maximum aperture value of the lens, which determines the amount of light that the lens can gather.",
        "photos": "Stores information about photos. The 'id' column represents the unique identifier for each photo. The 'camera_lens_id' column stores the ID of the camera lens used to take the photo, referencing the 'camera_lens' table. The 'mountain_id' column stores the ID of the mountain that was photographed, referencing the 'mountain' table. The 'color' column stores the dominant color of the photo. The 'name' column stores the name of the photo."
    },
    "movie_1": {
        "Movie": "Stores information about all the movies in the database. The column mID is the unique ID of each movie. The title column contains the title of the movie. The year column contains the year in which the movie was released. The director column contains the name of the director of the movie.",
        "Reviewer": "Stores information about reviewers who rate movies. The table has two columns: `rID`, which is the unique identifier for each reviewer, and `name`, which stores the reviewer's name. The `rID` column serves as the primary key, ensuring that each reviewer has a distinct identifier.",
        "Rating": "Stores ratings given by reviewers for specific movies. This table has four columns: `rID`, which references the `Reviewer` table and identifies the reviewer who gave the rating; `mID`, which references the `Movie` table and identifies the movie being rated; `stars`, which indicates the rating given on a numerical scale (presumably 1 to 5); and `ratingDate`, which captures the date when the rating was submitted. The `rID` and `mID` columns together form a foreign key, linking each rating to both the reviewer and the movie it pertains to."
    },
    "musical": {
        "musical": "Stores information about different musicals, including their details and awards. The Musical_ID column contains a unique identification number for each musical. The Name column stores the name of the musical. The Year column indicates the year the musical was released or premiered. The Award column lists the award received by the musical, if any. The Category column specifies the category in which the musical was nominated or awarded. The Nominee column specifies the nominee for the award, and the Result column indicates if the nominee won or lost the award.",
        "actor": "Stores information about actors who have participated in different musicals. The Actor_ID column contains a unique identification number for each actor. The Name column stores the name of the actor. The Musical_ID column references the corresponding musical from the musical table. The Character column lists the character played by the actor in the musical. The Duration column describes the length of time the actor performed in the musical. The age column indicates the actor's age at the time of the performance."
    },
    "music_1": {
        "genre": "Stores information about different music genres. The `g_name` column contains the name of the genre, such as 'Pop', 'Rock', or 'Jazz'.  The `rating` column stores a textual representation of the genre's popularity, which could be something like \"High\" or \"Medium\". The `most_popular_in` column specifies the country or region where this genre is most popular, e.g., \"USA\" or \"Latin America\".",
        "artist": "Stores information about music artists. The `artist_name` column holds the name of the artist. The `country` column specifies the artist's country of origin. The `gender` column indicates the artist's gender. The `preferred_genre` column links the artist to their preferred music genre, referencing the `g_name` column in the `genre` table.",
        "files": "Stores information about the files containing the music.  The `f_id` column uniquely identifies each file.  The `artist_name` column indicates the artist associated with the file, linking to the `artist` table.  The `file_size` column stores the size of the music file, potentially in KB, MB, or GB.  The `duration` column records the length of the music file, likely in minutes and seconds. Finally, the `formats` column specifies the file format, such as MP3, WAV, or FLAC.",
        "song": "Stores information about individual songs.  The `song_name` column contains the name of the song.  The `artist_name` column links to the artist who performed the song, referencing the `artist` table. The `country` column specifies the country associated with the song, which could be the artist's country or the song's theme. The `f_id` column connects the song to the file containing it, referencing the `files` table. The `genre_is` column indicates the genre of the song, referencing the `g_name` column in the `genre` table. The `rating` column provides a numerical rating for the song on a scale of 1 to 10.  The `languages` column records the language(s) of the song, and the `releasedate` column stores the date the song was released. Finally, the `resolution` column contains a numerical value representing the quality of the song, possibly in bits per second (bps) or a similar measure."
    },
    "music_2": {
        "Songs": "The Songs table stores information about all the songs in the database. It includes a unique identifier for each song, denoted by the SongId column, which is an integer. The Title column stores the name of the song, which is a text string.  This table allows for the storage and retrieval of song titles and their corresponding unique identifiers, essential for linking songs to other entities like albums, band members, and performances.",
        "Albums": "The Albums table stores information about music albums. Each album has a unique AId, which is an integer. The Title column contains the name of the album as a text string, while the Year column stores the year the album was released, also as an integer. The Label column records the music label responsible for releasing the album, stored as a text string. Finally, the Type column captures the genre or type of music on the album, stored as a text string.  This table serves as a repository for album metadata, allowing for the retrieval of information about specific albums and their characteristics.",
        "Band": "The Band table stores information about individual band members. Each band member has a unique Id, an integer representing their unique identifier. The Firstname and Lastname columns store the band member's first and last names, respectively, both as text strings. This table enables the storage and retrieval of band member names, which can then be linked to their roles in specific songs or performances.",
        "Instruments": "The Instruments table tracks which band member plays what instrument in each song.  The SongId column links a song to a particular instrument played by a band member, using foreign keys to reference the Songs table. The BandmateId column similarly links the band member playing the instrument to the Band table using a foreign key. The Instrument column itself stores the name of the instrument played by the band member, as a text string. This table provides a detailed mapping of instrument roles within each song, showcasing the musical talents of individual band members.",
        "Performance": "The Performance table records the stage positions of band members during performances. Each song has a corresponding SongId, linking to the Songs table. The Bandmate column indicates the specific band member performing, using foreign keys to reference the Band table. The StagePosition column describes the band member's stage location during the performance, stored as a text string.  This table documents the stage layout and band member positions for specific songs, capturing the dynamic elements of live performances.",
        "Tracklists": "The Tracklists table outlines the song order on each album. The AlbumId column links a specific album to its tracklist, using foreign keys to reference the Albums table. The Position column represents the track number of each song within the album, an integer. The SongId column links to the corresponding song in the Songs table, using a foreign key. This table provides a detailed tracklist for each album, specifying the song order and allowing for the retrieval of information on album song sequences.",
        "Vocals": "The Vocals table specifies the band members involved in vocal performances for each song. The SongId column links to the specific song, using foreign keys to reference the Songs table. The Bandmate column identifies the vocalist, referencing the Band table using a foreign key. The Type column describes the type of vocal performance, such as \"Lead\", \"Backup\", or \"Harmony\", stored as a text string. This table provides a clear overview of vocal contributions in each song, detailing the band members involved and their respective vocal roles."
    },
    "music_4": {
        "artist": "This table stores information about artists, including their unique ID, name, age, famous title of their work, and the release date of that work. The Artist_ID column serves as the primary key and is used to uniquely identify each artist in the database. The Artist column contains the name of the artist. The Age column stores the age of the artist in years. The Famous_Title column holds the title of the artist's most famous work. Finally, the Famous_Release_date column records the date when the artist's famous work was released.",
        "volume": "This table contains details about musical volumes, such as the unique volume ID, the issue of the volume, the date it was issued, the number of weeks it spent at the top of the charts, the name of the song featured in the volume, and the artist ID associated with that song. The Volume_ID column serves as the primary key and uniquely identifies each volume in the database. The Volume_Issue column describes the issue of the volume, for example, \"Volume 1, Issue 2\". The Issue_Date column records the date when the volume was issued. The Weeks_on_Top column stores the number of weeks the song featured in the volume spent at the top of the charts. The Song column contains the title of the song featured in the volume. Finally, the Artist_ID column references the artist ID from the \"artist\" table, associating the song with its corresponding artist.",
        "music_festival": "This table stores data about music festivals, including their unique ID, name, date of the ceremony, category, volume number, and the result of the artist's participation in the festival. The ID column serves as the primary key and uniquely identifies each festival in the database. The Music_Festival column contains the name of the music festival. The Date_of_ceremony column records the date when the festival was held. The Category column specifies the category of the festival, for example, \"Rock Music Festival\". The Volume column references the volume ID from the \"volume\" table, associating the festival with the volume that features the participating artist's song. Finally, the Result column describes the result of the artist's participation in the festival, for example, \"Winner\"."
    },
    "network_2": {
        "Person": "This table stores information about individual persons. The 'name' column holds the person's name, which acts as the primary key, ensuring each person has a unique identifier. The 'age' column stores the person's age as an integer. The 'city' column stores the city where the person resides, allowing for location-based queries. The 'gender' column holds the person's gender, providing demographic information. Finally, the 'job' column stores the person's current occupation, providing insights into their profession.",
        "PersonFriend": "This table captures the friendship relationships between individuals in the database. The 'name' column references the name of the person initiating the friendship, linked to the 'Person' table through a foreign key. The 'friend' column references the name of the person being befriended, also linked to the 'Person' table via a foreign key.  The 'year' column indicates the year in which the friendship was established, providing temporal context to the relationship.  This table allows for queries to discover friend networks, track the evolution of friendships over time, and analyze friendship dynamics."
    },
    "news_report": {
        "event": "This table stores information about different events. Each row represents a unique event. The `Event_ID` column is a unique identifier for each event. The `Date` column stores the date when the event took place. The `Venue` column stores the location where the event was held. The `Name` column stores the name of the event. The `Event_Attendance` column stores the number of people who attended the event.",
        "journalist": "This table stores information about different journalists. Each row represents a unique journalist. The `journalist_ID` column is a unique identifier for each journalist. The `Name` column stores the journalist's name. The `Nationality` column stores the nationality of the journalist. The `Age` column stores the journalist's age. The `Years_working` column stores the number of years the journalist has been working as a journalist.",
        "news_report": "This table stores information about news reports written by journalists. Each row represents a unique news report. The `journalist_ID` column stores the identifier of the journalist who wrote the report. The `Event_ID` column stores the identifier of the event the report is about. The `Work_Type` column stores the type of work done by the journalist for the report (e.g., article, interview, photo). This table acts as a link between the `journalist` and `event` tables, indicating which journalist covered which event and the type of work they did."
    },
    "party_host": {
        "party": "This table stores information about parties. The `Party_ID` column represents the unique identifier for each party. The `Party_Theme` column specifies the theme of the party.  The `Location` column stores the physical address or venue where the party takes place. The `First_year` and `Last_year` columns indicate the years during which the party was held, potentially for recurring events. The `Number_of_hosts` column denotes the count of hosts who organized the party.",
        "host": "This table stores information about party hosts. The `Host_ID` column represents the unique identifier for each host. The `Name` column stores the name of the host. The `Nationality` column specifies the nationality of the host. The `Age` column stores the age of the host.",
        "party_host": "This table establishes a connection between parties and their hosts.  The `Party_ID` column refers to the unique identifier of a party from the `party` table. The `Host_ID` column references the unique identifier of a host from the `host` table.  The `Is_Main_in_Charge` column indicates whether the host is the primary organizer of the party."
    },
    "party_people": {
        "region": "This table stores information about different regions.  The `Region_ID` column uniquely identifies each region. The `Region_name` column stores the name of the region. The `Date` column represents the date associated with the region, possibly related to its creation or a specific event. The `Label` column may hold a descriptive label or category for the region. The `Format` column likely stores information about the format or type of data associated with the region. Finally, the `Catalogue` column could contain a reference to a catalogue or list related to the region.",
        "party": "This table stores details about political parties.  The `Party_ID` column uniquely identifies each party. The `Minister` column represents the name of the minister or leader associated with the party. The `Took_office` and `Left_office` columns denote the dates when the minister took office and left office, respectively.  The `Region_ID` column is a foreign key referencing the `Region_ID` in the `region` table, indicating the region where the party is active. Lastly, the `Party_name` column stores the name of the political party.",
        "member": "This table stores information about members associated with political parties.  The `Member_ID` column uniquely identifies each member. The `Member_Name` column contains the name of the member. The `Party_ID` column is a foreign key referencing the `Party_ID` in the `party` table, indicating the party the member belongs to. The `In_office` column likely represents the date when the member joined the party or took office.",
        "party_events": "This table stores details about events associated with political parties. The `Event_ID` column uniquely identifies each event. The `Event_Name` column holds the name of the event. The `Party_ID` column is a foreign key referencing the `Party_ID` in the `party` table, indicating the party involved in the event. The `Member_in_charge_ID` column is a foreign key referencing the `Member_ID` in the `member` table, indicating the member responsible for the event."
    },
    "performance_attendance": {
        "member": "Stores information about the members of an organization. The `Member_ID` column uniquely identifies each member. The `Name` column stores the member's full name. The `Nationality` column indicates the member's country of origin. The `Role` column specifies the member's position or function within the organization.",
        "performance": "Stores details about each performance event. The `Performance_ID` column is a unique identifier for each performance. The `Date` column records the date of the performance. The `Host` column specifies the organization or individual responsible for hosting the performance. The `Location` column indicates the venue where the performance took place. The `Attendance` column stores the total number of people who attended the performance.",
        "member_attendance": "Stores information about the attendance of members at each performance. The `Member_ID` column references the `member` table, indicating the specific member who attended the performance. The `Performance_ID` column references the `performance` table, specifying the performance event. The `Num_of_Pieces` column records the number of musical pieces the member performed during the performance."
    },
    "perpetrator": {
        "perpetrator": "This table stores information about perpetrators of crimes. Each row in the table represents a single instance of a perpetrator committing a crime. The Perpetrator_ID column is a unique identifier for each perpetrator. The People_ID column links the perpetrator to the people table, allowing us to retrieve information about the perpetrator's identity. The Date column stores the date of the crime, while the Year column stores the year of the crime. The Location column indicates the location where the crime occurred, and the Country column indicates the country where the crime occurred. The Killed column records the number of people killed during the crime, and the Injured column records the number of people injured during the crime.",
        "people": "This table stores information about individuals, potentially including both victims and perpetrators. Each row represents a unique individual. The People_ID column is a unique identifier for each person. The Name column stores the individual's name. The Height column stores the person's height, and the Weight column stores the person's weight. The Home column stores the person's home town."
    },
    "phone_1": {
        "chip_model": "Stores information about different chip models used in various devices. The `Model_name` column uniquely identifies each chip model. `Launch_year` indicates the year the chip model was released. `RAM_MiB` and `ROM_MiB` represent the amount of RAM and ROM, respectively, in megabytes (MiB).  `Slots` describes the types of expansion slots (e.g., microSD) supported by the chip. `WiFi` and `Bluetooth` columns indicate the specific versions of WiFi and Bluetooth supported by the chip model.",
        "screen_mode": "Stores information about different screen modes and configurations. `Graphics_mode` uniquely identifies each screen mode. `Char_cells` describes the number of character cells (for text display). `Pixels` represents the resolution of the screen in pixels (e.g., 1920x1080). `Hardware_colours` indicates the number of colors supported by the screen's hardware. `used_kb` refers to the amount of memory (in kilobytes) allocated to the display. `map` likely specifies the arrangement of pixels or layout of the screen (e.g., landscape, portrait). `Type` categorizes the screen type (e.g., LCD, AMOLED).",
        "phone": "Stores details about specific phone models, including their hardware specifications and certifications. `Hardware_Model_name` uniquely identifies each phone model. `Company_name` indicates the manufacturer of the phone. `Accreditation_type` and `Accreditation_level` specify the type (e.g., safety, security) and level of certification achieved by the phone model. `Date` likely represents the date the certification was received. `chip_model` references the chip model used in the phone, linking to the `chip_model` table. `screen_mode` references the screen mode used in the phone, linking to the `screen_mode` table."
    },
    "phone_market": {
        "phone": "This table stores information about different phone models. The `Phone_ID` column uniquely identifies each phone model. The `Name` column stores the name of the phone model, such as \"iPhone 14 Pro Max\" or \"Samsung Galaxy S23 Ultra.\" The `Memory_in_G` column stores the internal storage capacity of the phone model in gigabytes. The `Carrier` column specifies the network provider associated with the phone, such as \"Verizon\" or \"AT&T.\" Finally, the `Price` column stores the price of the phone model in dollars.",
        "market": "This table stores information about different markets where phones are sold. The `Market_ID` column uniquely identifies each market. The `District` column specifies the geographical area where the market is located. The `Num_of_employees` column stores the number of employees working in the market. The `Num_of_shops` column stores the number of shops within the market. Finally, the `Ranking` column indicates the market's ranking based on various criteria.",
        "phone_market": "This table establishes a connection between phone models and markets, indicating which phones are sold in which markets and their stock levels. The `Market_ID` column references the `Market_ID` from the `market` table, associating the market with the phone. The `Phone_ID` column references the `Phone_ID` from the `phone` table, associating the phone model with the market. The `Num_of_stock` column stores the current number of units of that specific phone model available in that market."
    },
    "pilot_record": {
        "aircraft": "This table stores information about different aircraft types. The `Aircraft_ID` column represents the unique identifier of each aircraft. `Order_Year` indicates the year in which the aircraft was ordered. `Manufacturer` and `Model` specify the manufacturer and model of the aircraft respectively. `Fleet_Series` categorizes the aircraft into its respective fleet series. `Powertrain` describes the type of engine used by the aircraft, while `Fuel_Propulsion` specifies the fuel and propulsion system used.",
        "pilot": "This table stores information about pilots. `Pilot_ID` is the unique identifier of each pilot. `Pilot_name` is the pilot's name. `Rank` indicates the pilot's rank in the hierarchy. `Age` specifies the pilot's age. `Nationality` indicates the pilot's nationality. `Position` describes the pilot's job role, while `Join_Year` indicates the year the pilot joined. `Team` specifies the team the pilot belongs to.",
        "pilot_record": "This table records the instances of pilots flying specific aircraft on specific dates. `Record_ID` is the unique identifier of each record. `Pilot_ID` references the pilot associated with the record using a foreign key relationship with the `pilot` table. Similarly, `Aircraft_ID` references the specific aircraft flown using a foreign key relationship with the `aircraft` table. `Date` represents the specific date the pilot flew the aircraft."
    },
    "products_for_hire": {
        "Discount_Coupons": "Stores information regarding discount coupons issued by the company. The `coupon_id` column is the unique identifier for each discount coupon. The `date_issued` column stores the date on which the coupon was issued. The `coupon_amount` column stores the amount of discount associated with the coupon, expressed as a decimal number.",
        "Customers": "Stores information regarding all the customers of the company. The `customer_id` column is the unique identifier for each customer. The `coupon_id` column stores the ID of the discount coupon associated with the customer. The `good_or_bad_customer` column classifies the customer as either a good or bad customer. The `first_name` and `last_name` columns store the first and last names of the customer respectively. The `gender_mf` column stores the gender of the customer, represented as either 'M' or 'F'. The `date_became_customer` column stores the date when the customer became a customer of the company. The `date_last_hire` column stores the date of the customer's last hire, likely for a rental service.",
        "Bookings": "Stores information regarding all the bookings made by customers. The `booking_id` column is the unique identifier for each booking. The `customer_id` column stores the ID of the customer who made the booking. The `booking_status_code` column stores the status of the booking, such as 'confirmed', 'cancelled', or 'pending'. The `returned_damaged_yn` column indicates whether the products rented were returned damaged, using 'Yes' or 'No' values. The `booking_start_date` and `booking_end_date` columns store the start and end dates of the booking respectively. The `count_hired` column stores the number of items hired for the booking. The `amount_payable` column stores the total amount payable for the booking. The `amount_of_discount` column stores the amount of discount applied to the booking. The `amount_outstanding` column stores the amount remaining to be paid for the booking. The `amount_of_refund` column stores the amount refunded for the booking.",
        "Products_for_Hire": "Stores information regarding all the products available for hire by customers. The `product_id` column is the unique identifier for each product. The `product_type_code` column stores the type of product, such as 'Car', 'Bike', or 'Tool'. The `daily_hire_cost` column stores the cost of hiring the product for a day. The `product_name` column stores the name of the product. The `product_description` column stores a detailed description of the product.",
        "Payments": "Stores information regarding all the payments made by customers. The `payment_id` column is the unique identifier for each payment. The `booking_id` column stores the ID of the booking for which the payment was made. The `customer_id` column stores the ID of the customer who made the payment. The `payment_type_code` column stores the type of payment made, such as 'Cash', 'Card', or 'Bank Transfer'. The `amount_paid_in_full_yn` column indicates whether the payment was made in full, using 'Y' or 'N' values. The `payment_date` column stores the date on which the payment was made. The `amount_due` column stores the amount due for the booking. The `amount_paid` column stores the amount paid by the customer.",
        "Products_Booked": "Stores information regarding all the products booked by customers. The `booking_id` column stores the ID of the booking for which the products were booked. The `product_id` column stores the ID of the product booked. The `returned_yn` column indicates whether the product has been returned, using 'Y' or 'N' values. The `returned_late_yn` column indicates whether the product was returned late, using 'Y' or 'N' values. The `booked_count` column stores the number of items of the product booked. The `booked_amount` column stores the total amount payable for the booked items.",
        "View_Product_Availability": "Stores information regarding the availability of products for hire. The `product_id` column stores the ID of the product. The `booking_id` column stores the ID of the booking for which the product's availability is being checked. The `status_date` column stores the date on which the product's availability is being checked. The `available_yn` column indicates whether the product is available for hire on the `status_date`, using 'Y' or 'N' values."
    },
    "products_gen_characteristics": {
        "Ref_Characteristic_Types": "Stores different types of characteristics that can be used to describe products. The `characteristic_type_code` is a unique identifier for each characteristic type and the `characteristic_type_description` provides a human-readable description of the characteristic type. For example, a characteristic type could be \"Size\" with a description \"The size of the product\".",
        "Ref_Colors": "Stores different colors that can be used to describe products. The `color_code` is a unique identifier for each color and the `color_description` provides a human-readable description of the color. For example, a color could be \"RED\" with a description \"Red color\".",
        "Ref_Product_Categories": "Stores different product categories. The `product_category_code` is a unique identifier for each category and the `product_category_description` provides a human-readable description of the category. The `unit_of_measure` column indicates the unit in which the product is measured. For example, a category could be \"APPAREL\" with a description \"Apparel Products\" and the unit of measure could be \"pieces\".",
        "Characteristics": "Stores information about individual characteristics. The `characteristic_id` is a unique identifier for each characteristic. The `characteristic_type_code` links the characteristic to a specific type from the `Ref_Characteristic_Types` table. The `characteristic_data_type` specifies the type of data the characteristic stores (e.g., \"NUMBER\", \"TEXT\", etc.). The `characteristic_name` provides a human-readable name for the characteristic, and the `other_characteristic_details` can store additional information about the characteristic. For example, a characteristic could be \"Size\" with a type \"NUMBER\", name \"Size\", and details \"Size in inches\".",
        "Products": "Stores information about individual products. The `product_id` is a unique identifier for each product. The `color_code` links the product to a specific color from the `Ref_Colors` table. The `product_category_code` links the product to a specific category from the `Ref_Product_Categories` table. The `product_name` provides a human-readable name for the product. The `typical_buying_price` and `typical_selling_price` store the typical prices for buying and selling the product. The `product_description` provides a more detailed description of the product, and the `other_product_details` can store additional information about the product. For example, a product could be \"Shirt\" with a color \"RED\", category \"APPAREL\", name \"Red T-Shirt\", buying price \"10\", selling price \"15\", description \"Red T-Shirt with a collar\", and details \"Made in USA\".",
        "Product_Characteristics": "Stores the specific characteristics of individual products. The `product_id` links the characteristic to a specific product from the `Products` table. The `characteristic_id` links the characteristic to a specific characteristic from the `Characteristics` table. The `product_characteristic_value` stores the actual value of the characteristic for the specific product. For example, a product \"Red T-Shirt\" could have a characteristic \"Size\" with a value \"Large\"."
    },
    "product_catalog": {
        "Attribute_Definitions": "This table stores the definitions of attributes that can be used to describe products or other items in the catalogs. The `attribute_id` column is a unique identifier for each attribute. The `attribute_name` column stores the name of the attribute, for example, \"color,\" \"size,\" or \"material.\" The `attribute_data_type` column specifies the type of data that the attribute can hold, such as \"text,\" \"number,\" or \"date.\"",
        "Catalogs": "This table stores information about the catalogs themselves. Each row represents a single catalog. The `catalog_id` is a unique identifier for each catalog. The `catalog_name` is the name of the catalog, such as \"Summer Collection\" or \"Winter Essentials.\" The `catalog_publisher` column stores the name of the entity that published the catalog. The `date_of_publication` column stores the date when the catalog was initially published. The `date_of_latest_revision` column stores the date of the most recent revision or update to the catalog.",
        "Catalog_Structure": "This table defines the structure of the catalogs, specifying the different levels or categories within a catalog. The `catalog_level_number` is a unique identifier for each level within a catalog, with lower numbers indicating higher-level categories. The `catalog_id` column links each level to a specific catalog. The `catalog_level_name` column stores the name of each level within the catalog, such as \"Clothing,\" \"Accessories,\" or \"Shoes.\"",
        "Catalog_Contents": "This table contains the actual entries or products listed in the catalogs. The `catalog_entry_id` is a unique identifier for each catalog entry. The `catalog_level_number` column specifies the level within the catalog to which this entry belongs. The `parent_entry_id` column refers to the entry's parent in the catalog hierarchy. The `previous_entry_id` and `next_entry_id` columns indicate the entry's position within a specific level. The `catalog_entry_name` column stores the name of the product or item. The `product_stock_number` column holds the unique identifier for the product. The `price_in_dollars`, `price_in_euros`, and `price_in_pounds` columns store the price in various currencies. Finally, the `capacity`, `length`, `height`, and `width` columns store physical dimensions of the product if applicable.",
        "Catalog_Contents_Additional_Attributes": "This table stores additional attributes and their values for catalog entries that go beyond the basic information provided in the `Catalog_Contents` table. Each row represents a specific attribute and its value for a given entry. The `catalog_entry_id` and `catalog_level_number` columns link each row to a specific entry and level in the catalog. The `attribute_id` column links to the definition of the attribute in the `Attribute_Definitions` table. The `attribute_value` column stores the actual value of the attribute for the specific entry."
    },
    "program_share": {
        "program": "This table stores information about different TV programs. The `Program_ID` column acts as a unique identifier for each program. The `Name` column stores the title of the program, and `Origin` indicates the country or region where the program originated. The `Launch` column records the date when the program was first launched, represented as a real number. The `Owner` column specifies the organization or individual that owns the rights to the program.",
        "channel": "This table contains information about TV channels. The `Channel_ID` column serves as a unique identifier for each channel. The `Name` column stores the name of the channel. The `Owner` column specifies the organization that owns the channel. The `Share_in_percent` column represents the channel's market share, indicating the percentage of viewers tuned into the channel during a specific time period. The `Rating_in_percent` column stores the channel's rating, representing the percentage of households watching the channel during a specific time period.",
        "broadcast": "This table links TV channels and programs by recording broadcast schedules. The `Channel_ID` and `Program_ID` columns together form the primary key, ensuring that each broadcast instance is uniquely identified. The `Time_of_day` column specifies the time slot when the program is scheduled to be broadcast. Foreign keys are used to reference the corresponding entries in the `channel` and `program` tables, ensuring data integrity.",
        "broadcast_share": "This table stores information about the viewership share for specific programs broadcasted on specific channels. The `Channel_ID` and `Program_ID` columns form the primary key, ensuring that each broadcast instance is uniquely identified. The `Date` column specifies the specific date when the broadcast took place. The `Share_in_percent` column records the viewership share for that particular broadcast, indicating the percentage of viewers watching that program at that specific time. Foreign keys reference corresponding entries in the `channel` and `program` tables, maintaining data integrity."
    },
    "protein_institute": {
        "building": "Stores information about various buildings, primarily focusing on tall structures. The `building_id` uniquely identifies each building. The `Name` column stores the building's name, while `Street_address` provides its physical location. `Years_as_tallest` indicates the period when the building held the title of the tallest structure. `Height_feet` stores the building's height in feet, and `Floors` represents the number of floors it has.",
        "Institution": "This table stores information about institutions, likely educational or research institutions.  Each institution is uniquely identified by `Institution_id`. The `Institution` column stores the name of the institution, and `Location` specifies its physical location. `Founded` indicates the year the institution was established. `Type` categorizes the institution (e.g., university, college). `Enrollment` represents the number of students enrolled. `Team` might refer to the institution's athletic team name. `Primary_Conference` indicates the primary athletic conference the institution participates in. The `building_id` links the institution to a specific building, implying that the institution might be housed within that building or have a significant presence in it.",
        "protein": "This table focuses on protein data, likely related to research and analysis. Each protein is uniquely identified by its `common_name`. `protein_name` provides a more formal scientific name for the protein. `divergence_from_human_lineage` likely represents the evolutionary distance of the protein from its human counterpart. `accession_number` is a unique identifier used in databases to reference the protein. `sequence_length` represents the length of the protein's amino acid sequence. `sequence_identity_to_human_protein` indicates the similarity in amino acid sequence between the protein and its human counterpart. `Institution_id` connects the protein information to a specific institution, likely indicating where the protein was researched or analyzed."
    },
    "race_track": {
        "race": "Stores information about different horse races.  The `Race_ID` column is a unique identifier for each race. `Name` stores the name of the race, while `Class` denotes the type of race, such as a Grade 1 or a Stakes race. The `Date` column stores the date of the race, and the `Track_ID` column links the race to a specific track using a foreign key relationship with the `track` table.",
        "track": "Stores information about horse racing tracks. The `Track_ID` column serves as a unique identifier for each track.  `Name` stores the name of the track, `Location` indicates the city and state where the track is located, `Seating` refers to the track's seating capacity, and `Year_Opened` denotes the year the track was built."
    },
    "railway": {
        "railway": "This table stores information about different railways. The `Railway_ID` is a unique identifier for each railway. The `Railway` column contains the name of the railway. The `Builder` column stores the name of the company or person who built the railway. The `Built` column contains the year in which the railway was built. The `Wheels` column stores the type of wheels used on the railway. The `Location` column contains the location of the railway. The `ObjectNumber` column stores the object number associated with the railway.",
        "train": "This table stores information about different trains. The `Train_ID` is a unique identifier for each train. The `Train_Num` column stores the number of the train. The `Name` column contains the name of the train. The `From` column stores the starting point of the train's journey. The `Arrival` column contains the destination of the train's journey. The `Railway_ID` column links each train to a specific railway entry in the `railway` table.",
        "manager": "This table stores information about managers. The `Manager_ID` is a unique identifier for each manager. The `Name` column contains the manager's name. The `Country` column stores the country where the manager is from. The `Working_year_starts` column contains the year when the manager started working. The `Age` column stores the manager's age. The `Level` column stores the manager's level, likely indicating their seniority or position within the organization.",
        "railway_manage": "This table links managers to the railways they manage. The `Railway_ID` column references a railway from the `railway` table. The `Manager_ID` column references a manager from the `manager` table. The `From_Year` column indicates the year when the manager started managing the specific railway."
    },
    "restaurant_1": {
        "Student": "Stores information about each student in the database. The `StuID` column is the student ID, which is unique to each student. The `LName` column stores the last name of the student, `Fname` stores the first name. The `Age` column stores the age of the student. `Sex` stores the gender of the student. `Major` stores the major of the student. `Advisor` stores the ID of the student's advisor. `city_code` stores the code of the city the student lives in.",
        "Restaurant": "Stores information about each restaurant in the database. The `ResID` column is the restaurant ID, which is unique to each restaurant. The `ResName` column stores the name of the restaurant, `Address` stores the address of the restaurant. The `Rating` column stores the rating of the restaurant.",
        "Type_Of_Restaurant": "Stores information about the types of restaurants in the database. The `ResID` column stores the restaurant ID, which is a foreign key referencing the `Restaurant` table. The `ResTypeID` column stores the restaurant type ID, which is a foreign key referencing the `Restaurant_Type` table. This table links a restaurant to its specific type.",
        "Restaurant_Type": "Stores information about the different types of restaurants. The `ResTypeID` column is the restaurant type ID, which is unique to each type. The `ResTypeName` column stores the name of the restaurant type, `ResTypeDescription` stores the description of the restaurant type.",
        "Visits_Restaurant": "Stores information about students' visits to restaurants. The `StuID` column stores the student ID, which is a foreign key referencing the `Student` table. The `ResID` column stores the restaurant ID, which is a foreign key referencing the `Restaurant` table. The `Time` column stores the timestamp of the visit. The `Spent` column stores the amount of money spent at the restaurant during the visit."
    },
    "riding_club": {
        "player": "Stores information regarding all the players in the database. The column Player_ID is the unique ID of each player. Sponsor_name stores the name of the sponsor of the player. Player_name stores the name of the player. Gender stores the gender of the player. Residence stores the residence of the player. Occupation stores the occupation of the player. Votes stores the number of votes the player has received. Rank stores the rank of the player.",
        "club": "Stores information regarding all the clubs in the database. The column Club_ID is the unique ID of each club. Club_name stores the name of the club. Region stores the region where the club is located. Start_year stores the year in which the club was started.",
        "coach": "Stores information regarding all the coaches in the database. The column Coach_ID is the unique ID of each coach. Coach_name stores the name of the coach. Gender stores the gender of the coach. Club_ID stores the ID of the club the coach is associated with. Rank stores the rank of the coach.",
        "player_coach": "Stores information about the relationship between players and coaches. The columns Player_ID and Coach_ID are the foreign keys to the player and coach tables, respectively. Starting_year stores the year in which the player started training under the coach.",
        "match_result": "Stores information regarding the results of matches played by the clubs. The columns Rank and Club_ID are the foreign keys to the club table, respectively. Gold stores the number of gold medals won by the club. Big_Silver stores the number of big silver medals won by the club. Small_Silver stores the number of small silver medals won by the club. Bronze stores the number of bronze medals won by the club. Points stores the total number of points earned by the club."
    },
    "roller_coaster": {
        "roller_coaster": "Stores information regarding all the roller coasters in the database. The Roller_Coaster_ID is a unique identifier for each roller coaster. The Name is the name of the roller coaster. Park is the name of the amusement park where the roller coaster is located. Country_ID refers to the country where the park is located, which is linked to the Country table through a foreign key relationship. Length refers to the total length of the roller coaster track in some unit of measurement. Height refers to the maximum height the roller coaster reaches during its course. Speed refers to the maximum speed of the roller coaster. Opened is the date when the roller coaster was opened to the public. Status indicates the current status of the roller coaster, such as whether it is operational or closed for maintenance.",
        "country": "Stores information about various countries. The Country_ID is a unique identifier for each country. Name is the name of the country. Population stores the population of the country. Area stores the total area of the country. Languages stores a list of languages spoken in the country."
    },
    "sakila_1": {
        "actor": "The actor table stores information about all the actors in the database. It has four columns: `actor_id` is a unique identifier for each actor, `first_name` stores the actor's first name, `last_name` stores the actor's last name, and `last_update` stores the timestamp of the last update to the actor's information. For example, the first row of the table would contain information about the actor with `actor_id` 1, whose first name is \"PENELOPE\" and last name is \"GUINESS\".",
        "address": "The address table stores information about all the addresses in the database. It has eight columns: `address_id` is a unique identifier for each address, `address` stores the street address, `address2` stores the secondary address if any, `district` stores the district of the address, `city_id` stores the ID of the city where the address is located, `postal_code` stores the postal code of the address, `phone` stores the phone number associated with the address, and `last_update` stores the timestamp of the last update to the address information.  For example, the first row of the table would contain information about the address with `address_id` 1, which has the address \"47 MySakila Drive\", the district \"Alberta\", the `city_id` 1, the postal code \"29343\", the phone number \"503-432-2432\", and the `last_update` timestamp.",
        "category": "The category table stores information about all the categories of films in the database. It has three columns: `category_id` is a unique identifier for each category, `name` stores the name of the category, and `last_update` stores the timestamp of the last update to the category information.  For example, the first row of the table would contain information about the category with `category_id` 1, which is named \"Action\".",
        "city": "The city table stores information about all the cities in the database. It has four columns: `city_id` is a unique identifier for each city, `city` stores the name of the city, `country_id` stores the ID of the country where the city is located, and `last_update` stores the timestamp of the last update to the city information.  For example, the first row of the table would contain information about the city with `city_id` 1, which is named \"ALBERTA\" and belongs to the country with `country_id` 1.",
        "country": "The country table stores information about all the countries in the database. It has three columns: `country_id` is a unique identifier for each country, `country` stores the name of the country, and `last_update` stores the timestamp of the last update to the country information.  For example, the first row of the table would contain information about the country with `country_id` 1, which is named \"Canada\".",
        "customer": "The customer table stores information about all the customers in the database. It has nine columns: `customer_id` is a unique identifier for each customer, `store_id` stores the ID of the store where the customer is registered, `first_name` stores the customer's first name, `last_name` stores the customer's last name, `email` stores the customer's email address, `address_id` stores the ID of the customer's address, `active` stores whether the customer is active, `create_date` stores the date when the customer was created, and `last_update` stores the timestamp of the last update to the customer information. For example, the first row of the table would contain information about the customer with `customer_id` 1, who is registered at the store with `store_id` 1, whose first name is \"MARY\" and last name is \"SMITH\", whose email address is \"MARY.SMITH@sakilacustomer.org\", and whose address `address_id` is 5.",
        "film": "The film table stores information about all the films in the database. It has 14 columns: `film_id` is a unique identifier for each film, `title` stores the title of the film, `description` stores a description of the film, `release_year` stores the year of release of the film, `language_id` stores the ID of the language of the film, `original_language_id` stores the ID of the original language of the film, `rental_duration` stores the duration for which the film can be rented, `rental_rate` stores the rental rate for the film, `length` stores the length of the film in minutes, `replacement_cost` stores the cost of replacing the film, `rating` stores the rating of the film, `special_features` stores the special features of the film, and `last_update` stores the timestamp of the last update to the film information.  For example, the first row of the table would contain information about the film with `film_id` 1, which is titled \"ACADEMY DINOSAUR\", has a description \"A epic drama of a man who must choose between love and  duty,  set in the  time of the  great dinosaur.\", has a release year of 2006, has a `language_id` of 1, has a `original_language_id` of 1, has a `rental_duration` of 6, has a `rental_rate` of 0.99, has a length of 86, has a `replacement_cost` of 20.99, has a rating of \"PG\", has no special features, and the `last_update` timestamp.",
        "film_actor": "The film_actor table stores information about the actors who have starred in each film. It has three columns: `actor_id` stores the ID of the actor, `film_id` stores the ID of the film, and `last_update` stores the timestamp of the last update to the information.  For example, the first row of the table would contain information about the actor with `actor_id` 1 who starred in the film with `film_id` 1.",
        "film_category": "The film_category table stores information about the categories to which each film belongs. It has three columns: `film_id` stores the ID of the film, `category_id` stores the ID of the category, and `last_update` stores the timestamp of the last update to the information.  For example, the first row of the table would contain information about the film with `film_id` 1 which belongs to the category with `category_id` 1.",
        "film_text": "The film_text table stores information about the title and description of the films in the database. It has three columns: `film_id` stores the ID of the film, `title` stores the title of the film, and `description` stores the description of the film.  For example, the first row of the table would contain information about the film with `film_id` 1, which is titled \"ACADEMY DINOSAUR\" and has a description \"A epic drama of a man who must choose between love and  duty,  set in the  time of the  great dinosaur.\".",
        "inventory": "The inventory table stores information about the inventory of films in the database. It has four columns: `inventory_id` is a unique identifier for each inventory item, `film_id` stores the ID of the film, `store_id` stores the ID of the store where the inventory item is located, and `last_update` stores the timestamp of the last update to the inventory information.  For example, the first row of the table would contain information about the inventory item with `inventory_id` 1, which is for the film with `film_id` 1 and is located at the store with `store_id` 1.",
        "language": "The language table stores information about all the languages in the database. It has three columns: `language_id` is a unique identifier for each language, `name` stores the name of the language, and `last_update` stores the timestamp of the last update to the language information.  For example, the first row of the table would contain information about the language with `language_id` 1, which is named \"English\".",
        "payment": "The payment table stores information about all the payments made in the database. It has seven columns: `payment_id` is a unique identifier for each payment, `customer_id` stores the ID of the customer who made the payment, `staff_id` stores the ID of the staff member who processed the payment, `rental_id` stores the ID of the rental for which the payment was made, `amount` stores the amount of the payment, `payment_date` stores the date of the payment, and `last_update` stores the timestamp of the last update to the payment information.  For example, the first row of the table would contain information about the payment with `payment_id` 1, which was made by the customer with `customer_id` 1, processed by the staff member with `staff_id` 1, for the rental with `rental_id` 1, and was for the amount 0.99.",
        "rental": "The rental table stores information about all the rentals made in the database. It has seven columns: `rental_id` is a unique identifier for each rental, `rental_date` stores the date when the rental was made, `inventory_id` stores the ID of the inventory item that was rented, `customer_id` stores the ID of the customer who rented the item, `return_date` stores the date when the rental was returned, `staff_id` stores the ID of the staff member who processed the rental, and `last_update` stores the timestamp of the last update to the rental information.  For example, the first row of the table would contain information about the rental with `rental_id` 1, which was made on 2005-05-25, rented the inventory item with `inventory_id` 1, was made by the customer with `customer_id` 1, was returned on 2005-05-26, was processed by the staff member with `staff_id` 1, and the `last_update` timestamp.",
        "staff": "The staff table stores information about all the staff members in the database. It has 12 columns: `staff_id` is a unique identifier for each staff member, `first_name` stores the staff member's first name, `last_name` stores the staff member's last name, `address_id` stores the ID of the staff member's address, `picture` stores the picture of the staff member, `email` stores the staff member's email address, `store_id` stores the ID of the store where the staff member works, `active` stores whether the staff member is active, `username` stores the staff member's username, `password` stores the staff member's password, and `last_update` stores the timestamp of the last update to the staff information. For example, the first row of the table would contain information about the staff member with `staff_id` 1, whose first name is \"JON\" and last name is \"SMITH\", whose address `address_id` is 2, whose username is \"JON.SMITH\", whose password is \"53404647\", and the `last_update` timestamp.",
        "store": "The store table stores information about all the stores in the database. It has four columns: `store_id` is a unique identifier for each store, `manager_staff_id` stores the ID of the staff member who manages the store, `address_id` stores the ID of the store's address, and `last_update` stores the timestamp of the last update to the store information.  For example, the first row of the table would contain information about the store with `store_id` 1, which is managed by the staff member with `staff_id` 1, and whose address `address_id` is 1."
    },
    "school_bus": {
        "driver": "This table stores information about drivers. The Driver_ID column is the unique identifier for each driver. The Name column stores the driver's name, the Party column stores the driver's political affiliation, the Home_city column stores the city where the driver resides, and the Age column stores the driver's age. For example, the first row of the table indicates that the driver with ID 1 is named John Smith, belongs to the Democratic party, lives in New York City, and is 35 years old.",
        "school": "This table stores information about schools. The School_ID column is the unique identifier for each school. The Grade column stores the highest grade level taught at the school, the School column stores the name of the school, the Location column stores the city where the school is located, and the Type column stores the type of school, such as public, private, or charter. For example, the first row of the table indicates that the school with ID 1 is a high school, named 'ABC High School', located in New York City, and is a public school.",
        "school_bus": "This table stores information about school buses and their drivers. The School_ID column stores the ID of the school that the bus serves, the Driver_ID column stores the ID of the driver assigned to the bus, the Years_Working column stores the number of years the driver has been working for the school district, and the If_full_time column indicates whether the driver is a full-time employee or not. For example, the first row of the table indicates that the bus serving the school with ID 1 is driven by the driver with ID 1, who has been working for the school district for 5 years and is a full-time employee."
    },
    "school_finance": {
        "School": "This table contains information about different schools. The `School_id` column stores a unique identifier for each school. The `School_name` column stores the name of the school. The `Location` column stores the location of the school. The `Mascot` column stores the mascot of the school. The `Enrollment` column stores the number of students enrolled in the school. The `IHSAA_Class` column stores the school's classification in the Indiana High School Athletic Association. The `IHSAA_Football_Class` column stores the school's classification in the Indiana High School Athletic Association for football. The `County` column stores the county the school is located in.",
        "budget": "This table contains budget information for schools, with each row representing a school's budget for a particular year.  The `School_id` column links to the `School` table, identifying the school the budget belongs to. The `Year` column indicates the year the budget information pertains to.  The `Budgeted` column represents the total amount budgeted for the school in that year. The `total_budget_percent_budgeted` column represents the percentage of the total budget that was budgeted. The `Invested` column represents the total amount invested by the school in that year. The `total_budget_percent_invested` column represents the percentage of the total budget that was invested. Finally, the `Budget_invested_percent` column might store the percentage of the total budget that was invested, but in a textual format, potentially with a percentage symbol.",
        "endowment": "This table contains information about endowments for different schools, with each row representing a single donation to a school's endowment fund. The `endowment_id` column stores a unique identifier for each endowment. The `School_id` column links to the `School` table, identifying the school the endowment is associated with. The `donator_name` column stores the name of the individual or organization who made the donation. The `amount` column stores the amount of the donation."
    },
    "school_player": {
        "school": "This table stores information about different schools. The `School_ID` column is a unique identifier for each school. The `School` column stores the name of the school. The `Location` column stores the location of the school. The `Enrollment` column stores the total number of students enrolled in the school. The `Founded` column stores the year in which the school was founded. The `Denomination` column stores the religious denomination of the school, if any. The `Boys_or_Girls` column stores the gender of students the school caters to. The `Day_or_Boarding` column stores whether the school is a day school, boarding school, or both. The `Year_Entered_Competition` column stores the year in which the school first entered a specific competition, likely a sporting competition. The `School_Colors` column stores the school colors.",
        "school_details": "This table stores additional details about schools, providing further information about each school. The `School_ID` column is a foreign key that references the `School_ID` column in the `school` table, linking each detail entry to its corresponding school.  The `Nickname` column stores the school's nickname. The `Colors` column stores the specific colors of the school, possibly different from the school's official colors in the `school` table. The `League` column specifies the league in which the school competes. The `Class` column indicates the class or tier within the league, likely referring to the school's competitive strength. The `Division` column indicates the division within the league, possibly indicating the school's size or level of competition.",
        "school_performance": "This table stores the academic performance of different schools across various school years.  The `School_Id` column is a foreign key that references the `School_ID` column in the `school` table, linking the school's performance records to its corresponding school. The `School_Year` column indicates the specific school year for which the data is recorded, likely represented in a format like \"YYYY-YY\". The `Class_A` and `Class_AA` columns store the names of schools that achieved specific academic rankings or classifications within the school year.",
        "player": "This table stores information about individual players, likely athletes participating in a specific sport. The `Player_ID` column is a unique identifier for each player. The `Player` column stores the player's name. The `Team` column indicates the team for which the player currently plays. The `Age` column stores the player's age. The `Position` column stores the player's position on the team. The `School_ID` column is a foreign key that references the `School_ID` column in the `school` table, linking each player to the school they are associated with."
    },
    "scientist_1": {
        "Scientists": "Stores information about scientists working on projects. The `SSN` column represents the Social Security Number of each scientist, serving as a unique identifier. The `Name` column stores the full name of the scientist as a string of up to 30 characters.",
        "Projects": "Contains information about different projects. The `Code` column stores a unique 4-character code assigned to each project. The `Name` column holds the project name as a string of up to 50 characters. The `Hours` column stores the total estimated number of hours allocated to the project.",
        "AssignedTo": "Represents the assignment of scientists to projects. The `Scientist` column stores the SSN of the scientist assigned to the project, linking to the `Scientists` table. The `Project` column stores the project code of the project the scientist is assigned to, linking to the `Projects` table. This table establishes a many-to-many relationship between scientists and projects, allowing multiple scientists to work on the same project and a single scientist to work on multiple projects."
    },
    "ship_1": {
        "captain": "This table stores information about the captains of ships. The `Captain_ID` column is a unique identifier for each captain. The `Name` column stores the captain's name. The `Ship_ID` column refers to the ID of the ship that the captain is in charge of, establishing a relationship with the `Ship` table. The `age` column stores the captain's age, and `Class` column stores the captain's class, likely denoting their experience or skill level. Finally, the `Rank` column stores the captain's rank within the navy or organization.",
        "Ship": "This table stores information about various ships. The `Ship_ID` column is a unique identifier for each ship. The `Name` column stores the name of the ship. The `Type` column indicates the type of ship, such as a frigate, destroyer, or cruiser. The `Built_Year` column stores the year the ship was built. The `Class` column likely denotes the ship's class, potentially indicating its size or capabilities. Finally, the `Flag` column stores the flag or nationality of the ship."
    },
    "ship_mission": {
        "mission": "The mission table stores information about various space missions. Each row represents a unique mission, identified by the primary key Mission_ID. The Ship_ID column links each mission to a specific ship from the \"ship\" table. The Code column stores the mission's unique code name. Launched_Year indicates the year the mission was launched. Location stores the mission's starting location, while Speed_knots represents the ship's speed in knots during the mission. Finally, Fate describes the outcome of the mission.",
        "ship": "The ship table stores information about different spaceships. Each row represents a unique ship, identified by the primary key Ship_ID. The Name column contains the ship's name. Type specifies the type of spacecraft, such as a shuttle or a probe. Nationality indicates the country or organization that owns the ship. Tonnage represents the ship's weight or size."
    },
    "shop_membership": {
        "member": "Stores information about each member of the gym. The Member_ID is a unique identifier for each member. The Card_Number stores the member's card number, used for identification and access. The Name column stores the member's full name. Hometown stores the city or town where the member resides. Finally, the Level column stores the membership level of the member, likely indicating different tiers of membership with varying benefits and costs.",
        "branch": "Stores information about the different branches of the gym. The Branch_ID is a unique identifier for each branch. The Name column stores the name of the branch, such as \"Downtown\" or \"Northside.\" The Open_year stores the year when the branch was opened. The Address_road stores the street address of the branch. City stores the city where the branch is located. Finally, membership_amount stores the cost of membership at that specific branch, which could vary depending on factors like location or membership type.",
        "membership_register_branch": "Stores information about where each member registered for their membership. The Member_ID identifies the member, linking to the member table. Branch_ID identifies the branch where the member registered, linking to the branch table. Register_Year stores the year when the member registered for their membership.",
        "purchase": "Stores information about the purchases made by members at different branches. The Member_ID identifies the member who made the purchase. The Branch_ID identifies the branch where the purchase was made. The Year stores the year when the purchase was made. Finally, Total_pounds stores the total amount spent by the member on the purchase in pounds."
    },
    
    "soccer_2": {
        "College": "Stores information about different colleges. The `cName` column stores the name of the college, which is the primary key and is unique for each college. The `state` column stores the two-letter abbreviation of the state where the college is located. The `enr` column stores the total number of students enrolled at the college.",
        "Player": "Stores information about players who are trying out for college teams. The `pID` column stores the unique ID of each player, which serves as the primary key. The `pName` column stores the player's name. The `yCard` column stores the player's year card, likely representing their class year in high school (e.g., 'JR' for junior). The `HS` column stores the high school ID of the player, possibly referring to a unique identifier for their high school.",
        "Tryout": "Stores information about players who have tried out for specific colleges. The `pID` and `cName` columns together form the primary key, ensuring that each player's tryout at a specific college is uniquely identified. The `pID` column references the player's ID from the `Player` table, linking the tryout record to the player's information. The `cName` column references the college name from the `College` table, connecting the tryout record to the college's information. The `pPos` column stores the position the player tried out for at the college. The `decision` column stores the decision regarding the player's tryout, likely indicating whether they were accepted or rejected."
    },
    "solvency_ii": {
        "Addresses": "Stores information regarding the addresses used in various events. The `Address_ID` column stores the unique identification number for each address, while `address_details` contains the full address string, including street, city, state, zip code, and country.",
        "Locations": "Stores details related to various locations. The `Location_ID` column serves as a unique identifier for each location, and the `Other_Details` column stores additional information about the location, such as its description or type.",
        "Products": "Stores information about different products. The `Product_ID` column is a unique identifier for each product. The `Product_Type_Code` column holds the code indicating the type of product, such as \"Food\" or \"Electronics\". `Product_Name` stores the name of the product, and the `Product_Price` column holds the price of the product, represented as a decimal value.",
        "Parties": "Stores information about different parties involved in events. The `Party_ID` column serves as a unique identifier for each party. `Party_Details` contains a description of the party, possibly including their name, organization, or contact information.",
        "Assets": "Stores details about different assets. The `Asset_ID` column acts as a unique identifier for each asset. `Other_Details` stores further information about the asset, such as its description or type.",
        "Channels": "Stores details about different communication channels. The `Channel_ID` column is a unique identifier for each channel. The `Other_Details` column stores further information about the channel, such as its description or type.",
        "Finances": "Stores details related to financial aspects of events. The `Finance_ID` column serves as a unique identifier for each financial record. The `Other_Details` column stores additional information about the financial aspect, such as the amount involved or the type of transaction.",
        "Events": "Stores information about different events. The `Event_ID` column is a unique identifier for each event. The `Address_ID` column links each event to its corresponding address stored in the Addresses table. `Channel_ID` stores the ID of the communication channel used for the event. The `Event_Type_Code` column holds the code indicating the type of event, such as \"Meeting\" or \"Conference\". The `Finance_ID` column links the event to the relevant financial record in the Finances table. Lastly, the `Location_ID` column connects the event to its corresponding location stored in the Locations table.",
        "Products_in_Events": "Stores information about products used in specific events. The `Product_in_Event_ID` column acts as a unique identifier for each product usage record. The `Event_ID` column links the product usage to a specific event in the Events table, while the `Product_ID` column identifies the product used in the event from the Products table.",
        "Parties_in_Events": "Stores information about parties involved in specific events. The `Party_ID` column identifies the party from the Parties table, and the `Event_ID` column links the party to a specific event in the Events table. The `Role_Code` column specifies the role of the party in the event, such as \"Organizer\" or \"Participant\".",
        "Agreements": "Stores details about agreements related to events. The `Document_ID` column serves as a unique identifier for each agreement. The `Event_ID` column links the agreement to a specific event in the Events table.",
        "Assets_in_Events": "Stores information about assets used in specific events. The `Asset_ID` column identifies the asset from the Assets table, and the `Event_ID` column links the asset to a specific event in the Events table. This table essentially connects assets to events, providing information about which assets were used in which events."
    },
    "sports_competition": {
        "club": "Stores information about various clubs participating in the competition. The 'Club_ID' column uniquely identifies each club. The 'name' column contains the name of the club. The 'Region' column specifies the region where the club is located. Finally, the 'Start_year' column indicates the year the club was established.",
        "club_rank": "This table represents the rankings of clubs based on their performance in different competitions. The 'Rank' column indicates the club's position in the ranking. The 'Club_ID' column is a foreign key referencing the 'Club_ID' in the 'club' table, linking the ranking to a specific club. The 'Gold', 'Silver', and 'Bronze' columns store the number of gold, silver, and bronze medals won by the club, respectively. The 'Total' column represents the total number of medals won by the club.",
        "player": "This table holds information about players participating in the competition. 'Player_ID' uniquely identifies each player. The 'name' column contains the name of the player. The 'Position' column specifies the player's position on the team. The 'Club_ID' column is a foreign key referencing the 'Club_ID' in the 'club' table, associating the player with a specific club. 'Apps' represents the number of appearances made by the player. 'Tries', 'Goals', and 'Points' columns record the number of tries, goals, and total points scored by the player, respectively.",
        "competition": "This table maintains details about the competitions. The 'Competition_ID' uniquely identifies each competition. The 'Year' column indicates the year the competition took place. The 'Competition_type' column specifies the type of competition, such as a league or tournament. The 'Country' column specifies the country where the competition was held.",
        "competition_result": "This table stores the results of matches between clubs in various competitions. 'Competition_ID' is a foreign key referencing the 'Competition_ID' in the 'competition' table, associating the match with a specific competition. 'Club_ID_1' and 'Club_ID_2' are foreign keys referencing the 'Club_ID' in the 'club' table, identifying the participating clubs in the match. The 'Score' column records the final score of the match, potentially in a format like \"Club_ID_1 score - Club_ID_2 score\"."
    },
    "station_weather": {
        "train": "This table stores information about different train routes. The `id` column is a unique identifier for each train route. The `train_number` column is a unique number assigned to each train. The `name` column contains the name of the train route. The `origin` and `destination` columns specify the starting and ending points of the train route. The `time` column stores the departure time of the train, and the `interval` column indicates the frequency of the train service, such as hourly or every 30 minutes.",
        "station": "This table stores information about different train stations. The `id` column is a unique identifier for each station. The `network_name` column contains the name of the train network that the station is part of. The `services` column lists the train services that operate at the station. The `local_authority` column specifies the local governing body responsible for the station.",
        "route": "This table establishes a connection between trains and stations, defining the route a train takes. The `train_id` column references the `id` column in the `train` table, identifying the specific train route. The `station_id` column references the `id` column in the `station` table, indicating the specific station on the route. Each row in this table represents a station that a particular train stops at.",
        "weekly_weather": "This table provides weekly weather information for different train stations. The `station_id` column references the `id` column in the `station` table, linking the weather data to a specific station. The `day_of_week` column specifies the day of the week for which the weather information is provided. The `high_temperature` and `low_temperature` columns store the maximum and minimum temperatures expected on that day. The `precipitation` column indicates the expected amount of precipitation in inches. The `wind_speed_mph` column provides the average wind speed in miles per hour."
    },
    "store_1": {
        "artists": "Stores information about all the music artists in the database. The `id` column is a unique identifier for each artist, and `name` stores the artist's name.",
        "albums": "Contains information about all the albums in the database. The `id` column is a unique identifier for each album. `title` stores the album's name, and `artist_id` is a foreign key that links the album to the corresponding artist in the `artists` table.",
        "employees": "Stores information about all the employees in the company. The `id` column is a unique identifier for each employee. `last_name` and `first_name` store the employee's last and first name. `title` specifies the employee's job title. `reports_to` is a foreign key that links the employee to their manager in the `employees` table. `birth_date` and `hire_date` store the employee's date of birth and hire date.  `address`, `city`, `state`, `country`, `postal_code`, `phone`, `fax`, and `email` store the employee's contact information.",
        "customers": "Stores information about all the customers in the database. The `id` column is a unique identifier for each customer. `first_name` and `last_name` store the customer's first and last name. `company` stores the customer's company name. `address`, `city`, `state`, `country`, `postal_code`, `phone`, `fax`, and `email` store the customer's contact information. `support_rep_id` is a foreign key that links the customer to their support representative in the `employees` table.",
        "genres": "Stores information about different music genres. The `id` column is a unique identifier for each genre. `name` stores the name of the genre.",
        "invoices": "Contains information about all the invoices issued to customers. The `id` column is a unique identifier for each invoice. `customer_id` is a foreign key that links the invoice to the corresponding customer in the `customers` table. `invoice_date` stores the date the invoice was issued. `billing_address`, `billing_city`, `billing_state`, `billing_country`, and `billing_postal_code` store the billing address details. `total` stores the total amount of the invoice.",
        "media_types": "Stores information about different media types used for music, such as CD, MP3, etc. The `id` column is a unique identifier for each media type. `name` stores the name of the media type.",
        "tracks": "Stores information about individual music tracks. The `id` column is a unique identifier for each track. `name` stores the name of the track. `album_id` is a foreign key that links the track to its corresponding album in the `albums` table. `media_type_id` is a foreign key that links the track to its media type in the `media_types` table. `genre_id` is a foreign key that links the track to its genre in the `genres` table. `composer` stores the track's composer. `milliseconds` stores the length of the track in milliseconds. `bytes` stores the size of the track in bytes. `unit_price` stores the price of the track.",
        "invoice_lines": "Contains details of individual items included in an invoice. The `id` column is a unique identifier for each invoice line. `invoice_id` is a foreign key that links the invoice line to its corresponding invoice in the `invoices` table. `track_id` is a foreign key that links the invoice line to the corresponding track in the `tracks` table. `unit_price` stores the unit price of the track for the invoice. `quantity` stores the quantity of the track included in the invoice.",
        "playlists": "Stores information about different playlists in the database. The `id` column is a unique identifier for each playlist. `name` stores the name of the playlist.",
        "playlist_tracks": "Stores the mapping between tracks and playlists. This table doesn't have any columns that store data. It only contains foreign keys: `playlist_id`, which links a playlist to the `playlists` table, and `track_id`, which links a track to the `tracks` table. This allows you to determine which tracks are included in which playlists."
    },
    "store_product": {
        "product": "This table stores information about different products. The `product_id` column is a unique identifier for each product. The `product` column contains the name of the product. The `dimensions` column stores the dimensions of the product, presumably in text format. The `dpi` column contains the dots per inch (dpi) resolution of the product, which is a numerical value. The `pages_per_minute_color` column stores the speed at which the product can print color pages per minute, which is a numerical value. The `max_page_size` column contains the maximum page size that the product can handle, likely in a text format. Finally, the `interface` column stores information about the interface of the product, perhaps in a text format, describing how the user interacts with it.",
        "store": "This table stores information about different stores. The `Store_ID` column is a unique identifier for each store. The `Store_Name` column contains the name of the store. The `Type` column stores the type of store, which could be a description of the store's category or specialty. The `Area_size` column contains the size of the store in square feet or meters, which is a numerical value. The `Number_of_product_category` column contains the number of different product categories available in the store, which is a numerical value. Finally, the `Ranking` column stores the store's ranking, perhaps based on sales, customer satisfaction, or another metric, which is an integer value.",
        "district": "This table stores information about different districts. The `District_ID` column is a unique identifier for each district. The `District_name` column contains the name of the district. The `Headquartered_City` column stores the name of the city where the district is headquartered. The `City_Population` column contains the population of the city where the district is headquartered, which is a numerical value. Finally, the `City_Area` column stores the area of the city where the district is headquartered, which is a numerical value.",
        "store_product": "This table acts as a bridge between the `store` and `product` tables, storing information about which products are available in which stores. The `Store_ID` column references the `Store_ID` from the `store` table, indicating which store the product is available in. The `Product_ID` column references the `Product_ID` from the `product` table, indicating which product is available in the store. This table helps link information about specific products to specific stores.",
        "store_district": "This table acts as a bridge between the `store` and `district` tables, storing information about which stores are located in which districts. The `Store_ID` column references the `Store_ID` from the `store` table, indicating which store is located in the district. The `District_ID` column references the `District_ID` from the `district` table, indicating which district the store is located in. This table helps link information about specific stores to specific districts."
    },
    "storm_record": {
        "storm": "The `storm` table contains information about various storms. Each row represents a single storm, and the table includes information such as the storm's unique ID (`Storm_ID`), its name (`Name`), the dates it was active (`Dates_active`), its maximum wind speed (`Max_speed`), the estimated damage it caused in millions of US dollars (`Damage_millions_USD`), and the number of fatalities (`Number_Deaths`). This table provides a comprehensive overview of storms, allowing for analysis of their impact and characteristics.",
        "region": "The `region` table stores information about different geographical regions. Each row represents a specific region with a unique ID (`Region_id`), a short code (`Region_code`) representing the region, and its name (`Region_name`). This table serves as a reference for geographical locations, allowing for the linking of storm data to specific regions.",
        "affected_region": "The `affected_region` table connects storms with the regions they impacted. Each row represents a specific storm's impact on a particular region. It includes the `Region_id` and `Storm_ID` to identify both the region and the storm, and `Number_city_affected` to indicate the number of cities within that region affected by the storm. This table provides a detailed view of the spatial impact of storms, allowing for analysis of storm effects across various regions."
    },
    "student_1": {
        "list": "This table stores information about students.  Each student has a unique combination of `LastName` and `FirstName`. The `Grade` column represents the grade level of the student, and the `Classroom` column indicates the classroom number that the student is assigned to.",
        "teachers": "This table stores information about teachers.  Each teacher has a unique combination of `LastName` and `FirstName`. The `Classroom` column indicates the classroom number that the teacher is assigned to."
    },
    "student_assessment": {
        "Addresses": "This table stores information about various addresses. The `address_id` is a unique identifier for each address. The `line_1` and `line_2` columns store the street address, with `line_1` typically containing the main street address and `line_2` containing an optional apartment number or suite number. The `city` column stores the city where the address is located. The `zip_postcode` column stores the postal code or ZIP code for the address. The `state_province_county` column stores the state, province, or county where the address is located. Finally, the `country` column stores the country where the address is located.",
        "People": "This table stores information about people. The `person_id` is a unique identifier for each person. The `first_name`, `middle_name`, and `last_name` columns store the person's full name. The `cell_mobile_number` column stores the person's cell phone number. The `email_address` column stores the person's email address. The `login_name` column stores the person's login username, which is used to access the system. The `password` column stores the person's password, which is used to verify their identity during login.",
        "Students": "This table stores information about students, which are a subset of the people in the `People` table. The `student_id` is a unique identifier for each student and is linked to the `person_id` in the `People` table. The `student_details` column stores additional information about the student, such as their year of study, major, or any other relevant details.",
        "Courses": "This table stores information about courses offered. The `course_id` is a unique identifier for each course. The `course_name` column stores the name of the course. The `course_description` column stores a brief description of the course content. The `other_details` column stores any additional information about the course, such as the instructor's name, the course schedule, or any prerequisites.",
        "People_Addresses": "This table stores the addresses associated with people. The `person_address_id` is a unique identifier for each address associated with a person. The `person_id` and `address_id` columns link this table to the `People` and `Addresses` tables, respectively. The `date_from` and `date_to` columns indicate the period during which the person resided at that address. If the person still lives at that address, the `date_to` column will be NULL.",
        "Student_Course_Registrations": "This table stores information about students registered for courses. The `student_id` and `course_id` columns link this table to the `Students` and `Courses` tables, respectively. The `registration_date` column stores the date on which the student registered for the course.",
        "Student_Course_Attendance": "This table stores information about student attendance in courses. The `student_id` and `course_id` columns link this table to the `Student_Course_Registrations` table. The `date_of_attendance` column stores the date on which the student attended the course.",
        "Candidates": "This table stores information about candidates, which are a subset of the people in the `People` table. The `candidate_id` is a unique identifier for each candidate and is linked to the `person_id` in the `People` table. The `candidate_details` column stores additional information about the candidate, such as their resume, interview date, or any other relevant details.",
        "Candidate_Assessments": "This table stores information about candidate assessments. The `candidate_id` and `qualification` columns link this table to the `Candidates` table. The `assessment_date` column stores the date on which the candidate took the assessment. The `asessment_outcome_code` column stores the outcome of the assessment, such as \"Pass\" or \"Fail\"."
    },
    "swimming": {
        "swimmer": "Stores information about swimmers participating in events. The `ID` column represents a unique identifier for each swimmer. The `name` column stores the swimmer's name. The `Nationality` column indicates the swimmer's country of origin. The remaining columns, `meter_100` to `meter_700` represent the swimmer's best time in each distance, measured in meters. For example, `meter_100` stores the swimmer's best time for a 100-meter race. The `Time` column likely stores the swimmer's best overall time across all distances.",
        "stadium": "Stores information about stadiums hosting swimming events. The `ID` column is a unique identifier for each stadium. The `name` column stores the stadium's name. The `Capacity` column indicates the stadium's seating capacity. The `City` and `Country` columns represent the location of the stadium. Finally, the `Opening_year` column stores the year the stadium was opened.",
        "event": "Stores information about swimming events. The `ID` column is a unique identifier for each event. The `Name` column stores the name of the event, for example, \"100-meter freestyle\". The `Stadium_ID` column references the stadium where the event took place, linking to the `stadium` table via a foreign key relationship. The `Year` column stores the year the event took place.",
        "record": "Stores records of swimmers' performances in events. The `ID` column is a unique identifier for each record. The `Result` column stores the swimmer's time in the event. The `Swimmer_ID` column references the swimmer who achieved the record, linking to the `swimmer` table via a foreign key relationship. Similarly, the `Event_ID` column references the event in which the record was set, linking to the `event` table via a foreign key relationship.  The combination of `Swimmer_ID` and `Event_ID` is the primary key, ensuring that each record is uniquely identified by the swimmer and the event in which they achieved the record."
    },
    "theme_gallery": {
        "artist": "Stores information about artists participating in exhibitions. The `Artist_ID` column uniquely identifies each artist. The `Name` column stores the artist's full name. The `Country` column specifies the country of origin for the artist. The `Year_Join` column indicates the year when the artist joined the platform or started participating in exhibitions. The `Age` column represents the current age of the artist.",
        "exhibition": "Stores information about different exhibitions held. The `Exhibition_ID` column uniquely identifies each exhibition. The `Year` column specifies the year in which the exhibition was held. The `Theme` column describes the central theme or concept of the exhibition. The `Artist_ID` column links each exhibition to the participating artist, referencing the `Artist_ID` from the `artist` table. The `Ticket_Price` column indicates the cost of an entry ticket for the exhibition.",
        "exhibition_record": "Records details about specific instances of exhibitions. The `Exhibition_ID` column references the corresponding exhibition from the `exhibition` table. The `Date` column specifies the specific date on which the exhibition was held. The `Attendance` column records the number of attendees who visited the exhibition on that particular date."
    },
    "tracking_grants_for_research": {
        "Document_Types": "Stores information regarding different types of documents used for grants. The `document_type_code` column contains a unique code for each type of document. The `document_description` column provides a brief description of the document type.",
        "Documents": "Contains details about the individual documents submitted for each grant. The `document_id` is a unique identifier for each document. The `document_type_code` references the `Document_Types` table, specifying the type of document. The `grant_id` links the document to a specific grant in the `Grants` table. The `sent_date` stores the date when the document was sent, and `response_received_date` stores the date when a response was received. The `other_details` column allows for additional information about the document.",
        "Grants": "Stores information about grants awarded to different organizations. `grant_id` is a unique identifier for each grant. The `organisation_id` references the `Organisations` table, linking the grant to a specific organization. `grant_amount` stores the monetary value of the grant. `grant_start_date` and `grant_end_date` mark the grant's duration. `other_details` provides space for any additional information related to the grant.",
        "Organisation_Types": "Contains information about different types of organizations that can receive grants. `organisation_type` is a unique code representing each type. `organisation_type_description` provides a textual description of the organization type.",
        "Organisations": "Stores information about each organization that receives grants. `organisation_id` is a unique identifier for each organization. `organisation_type` references the `Organisation_Types` table, specifying the type of organization. `organisation_details` contains additional information about the organization.",
        "Project_Outcomes": "Records the outcomes of projects related to grants. `project_id` references the `Projects` table, linking the outcome to a specific project. `outcome_code` references the `Research_Outcomes` table, indicating the type of outcome achieved. `outcome_details` provides a textual description of the outcome.",
        "Project_Staff": "Details the staff involved in each project related to grants. `staff_id` references the `Research_Staff` table, identifying the staff member. `project_id` references the `Projects` table, linking the staff to a specific project. `role_code` references the `Staff_Roles` table, specifying the staff member's role on the project. `date_from` and `date_to` indicate the duration of the staff member's involvement in the project. `other_details` allows for any additional information related to the staff member's role.",
        "Projects": "Stores information about individual projects associated with grants. `project_id` is a unique identifier for each project. `organisation_id` references the `Organisations` table, linking the project to the organization receiving the grant. `project_details` contains a description of the project's objectives and activities.",
        "Research_Outcomes": "Contains information about different possible outcomes for research projects. `outcome_code` is a unique code for each type of outcome. `outcome_description` provides a textual description of the outcome.",
        "Research_Staff": "Stores details about staff members involved in research projects. `staff_id` is a unique identifier for each staff member. `employer_organisation_id` references the `Organisations` table, indicating the organization employing the staff member. `staff_details` provides additional information about the staff member.",
        "Staff_Roles": "Defines different roles that staff members can have in research projects. `role_code` is a unique identifier for each role. `role_description` provides a textual description of the role.",
        "Tasks": "Stores information about specific tasks within projects related to grants. `task_id` is a unique identifier for each task. `project_id` references the `Projects` table, linking the task to a specific project. `task_details` contains a description of the task.  The `eg` column is likely a boolean value indicating if Agree Objectives is the task detail."
    },
    "tracking_orders": {
        "Customers": "Stores information about all the customers in the database. The `customer_id` is a unique identifier for each customer. The `customer_name` column stores the name of the customer and the `customer_details` column holds additional information about the customer, such as their address or contact information.",
        "Invoices": "This table contains information about all the invoices generated by the company. Each invoice is identified by a unique `invoice_number`. The `invoice_date` column stores the date and time when the invoice was generated. The `invoice_details` column stores details about the invoice, such as the invoice items, their prices, and any discounts or taxes applied.",
        "Orders": "This table stores information about all the orders placed by customers. Each order is identified by a unique `order_id`. The `customer_id` column links the order to the corresponding customer in the Customers table. The `order_status` column indicates the current status of the order, such as \"pending,\" \"shipped,\" or \"completed.\" The `date_order_placed` column stores the date and time when the order was placed. The `order_details` column stores any additional information about the order, such as special instructions or shipping preferences.",
        "Products": "This table stores information about all the products sold by the company. Each product is identified by a unique `product_id`. The `product_name` column stores the name of the product and the `product_details` column contains additional details about the product, such as its description, specifications, or price.",
        "Order_Items": "This table stores information about the individual items included in each order. Each item is identified by a unique `order_item_id`. The `product_id` column links the item to the corresponding product in the Products table. The `order_id` column links the item to the corresponding order in the Orders table. The `order_item_status` column indicates the status of the item, such as \"pending,\" \"shipped,\" or \"returned.\" The `order_item_details` column contains additional information about the item, such as its quantity or price.",
        "Shipments": "This table stores information about all shipments made by the company. Each shipment is identified by a unique `shipment_id`. The `order_id` column links the shipment to the corresponding order in the Orders table. The `invoice_number` column links the shipment to the corresponding invoice in the Invoices table. The `shipment_tracking_number` column stores the tracking number assigned to the shipment by the shipping carrier. The `shipment_date` column stores the date and time when the shipment was made. The `other_shipment_details` column contains any additional information about the shipment, such as its destination or shipping method.",
        "Shipment_Items": "This table stores information about the individual items included in each shipment. The `order_item_id` column links the item to the corresponding item in the Order_Items table. The `shipment_id` column links the item to the corresponding shipment in the Shipments table."
    },
    "tracking_share_transactions": {
        "Investors": "This table stores information about investors, including their unique identifier (investor_id) and a general description of their details (Investor_details). The Investor_details column could contain information such as their name, address, contact information, or any other relevant details about the investor.",
        "Lots": "This table stores information about lots owned by investors. It includes the unique lot identifier (lot_id), the associated investor ID (investor_id) referencing the Investors table, and a general description of the lot details (lot_details). The lot_details column could contain information such as the location, size, or type of the lot.",
        "Ref_Transaction_Types": "This table serves as a reference table for transaction types. It contains a unique transaction type code (transaction_type_code) and a corresponding description (transaction_type_description). This table helps classify different types of transactions, such as purchases, sales, dividends, etc.",
        "Transactions": "This table records all financial transactions related to investors. It includes a unique transaction identifier (transaction_id), the associated investor ID (investor_id), the transaction type code (transaction_type_code) referencing the Ref_Transaction_Types table, the date of the transaction (date_of_transaction), the amount involved (amount_of_transaction), the number of shares associated with the transaction (share_count), and any other relevant details (other_details). This table provides a comprehensive record of all financial activity for each investor.",
        "Sales": "This table holds additional details specifically related to sales transactions. It includes a unique sales transaction identifier (sales_transaction_id) that acts as a foreign key referencing the Transactions table, and a general description of the sales details (sales_details). This table could contain information such as the buyer, the sale price, or any other relevant information specific to the sales transaction.",
        "Purchases": "This table holds additional details specifically related to purchase transactions. It includes a unique purchase transaction identifier (purchase_transaction_id) that acts as a foreign key referencing the Transactions table, and a general description of the purchase details (purchase_details). This table could contain information such as the seller, the purchase price, or any other relevant information specific to the purchase transaction.",
        "Transactions_Lots": "This table establishes a relationship between transactions and lots, indicating which lots are involved in specific transactions. It includes the transaction ID (transaction_id) and the lot ID (lot_id) as foreign keys referencing the Transactions and Lots tables respectively. This table allows tracking which lots were involved in each transaction."
    },
    "tracking_software_problems": {
        "Problem_Category_Codes": "This table stores information about the different categories of problems that can be reported. The `problem_category_code` column stores a unique code for each category, and the `problem_category_description` column provides a textual description of the category. For example, one row might contain the code 'HW' and the description 'Hardware Issue'.",
        "Problem_Log": "This table contains a log of all the actions taken on a particular problem.  Each row represents a single log entry, and the `problem_log_id` uniquely identifies each entry. The `assigned_to_staff_id` indicates the staff member currently responsible for the problem. `problem_id` connects the log entry to the specific problem it relates to, and `problem_category_code` specifies the category the problem falls under. The `problem_status_code` indicates the current status of the problem (e.g., 'Open', 'Closed'). `log_entry_date` records the date and time the entry was made, while `log_entry_description` provides a description of the action taken or the current status of the problem. `log_entry_fix` details the specific solution or fix applied to the problem if it is resolved. Finally, `other_log_details` allows for the storage of any additional relevant information about the action taken or the problem.",
        "Problem_Status_Codes": "This table stores information about the various statuses a problem can have. The `problem_status_code` column holds a unique code for each status, while `problem_status_description` provides a textual description of the status. For example, one row might have the code 'OPEN' and the description 'Problem is open and awaiting action'.",
        "Product": "This table stores information about the products that are supported. The `product_id` column uniquely identifies each product, `product_name` contains the name of the product, and `product_details` stores additional information about the product. For example, one row might contain the product ID '1', the product name 'Laptop', and the product details 'Dell XPS 13'.",
        "Staff": "This table stores information about all the staff members in the system. The `staff_id` column uniquely identifies each staff member, `staff_first_name` and `staff_last_name` store their first and last names, and `other_staff_details` provides additional information about the staff member. For example, one row might contain the staff ID '101', the first name 'John', the last name 'Doe', and other staff details 'Technical Support Manager'.",
        "Problems": "This table stores information about the problems that have been reported. The `problem_id` column uniquely identifies each problem, and `product_id` connects the problem to the product it relates to. `closure_authorised_by_staff_id` specifies the staff member who authorized the closure of the problem. `reported_by_staff_id` indicates the staff member who reported the problem, and `date_problem_reported` records the date and time the problem was reported. `date_problem_closed` specifies the date and time the problem was closed. `problem_description` provides a detailed description of the problem, and `other_problem_details` allows for the storage of any additional relevant information about the problem."
    },
    "train_station": {
        "station": "The `station` table stores information about different railway stations. The `Station_ID` column acts as a unique identifier for each station. The `Name` column stores the name of the station. The `Annual_entry_exit` column stores the number of passengers entering and exiting the station annually. The `Annual_interchanges` column stores the number of passengers who change trains at this station annually. The `Total_Passengers` column stores the total number of passengers using the station annually. The `Location` column stores the geographic location of the station. The `Main_Services` column stores the types of train services available at the station, and the `Number_of_Platforms` column stores the number of platforms at the station.",
        "train": "The `train` table stores information about different trains. The `Train_ID` column acts as a unique identifier for each train. The `Name` column stores the name of the train. The `Time` column stores the scheduled departure time of the train. The `Service` column stores the type of service offered by the train.",
        "train_station": "The `train_station` table stores information about which stations a train stops at. It is a connecting table that links the `train` and `station` tables together. The `Train_ID` column identifies a particular train, while the `Station_ID` column identifies a particular station."
    },
    "university_basketball": {
        "basketball_match": "This table stores information about basketball matches, including team details, performance statistics, and conference-specific data. Each row represents a distinct team, identified by the `Team_ID`. The `School_ID` links to the corresponding university entry in the `university` table, providing additional information about the team's affiliation. `Team_Name` indicates the name of the basketball team. The columns `ACC_Regular_Season`, `ACC_Percent`, `ACC_Home`, `ACC_Road`, `All_Games`, `All_Games_Percent`, `All_Home`, `All_Road`, and `All_Neutral` store various performance statistics, likely encompassing win-loss records, percentages, and performance in different categories like regular season, conference games, home games, road games, and neutral site games. The `All_Games_Percent` column seems to represent the overall win percentage across all games. This table allows for analyzing team performance in different contexts, comparing conference and non-conference results, and tracking team progress throughout the season.",
        "university": "This table contains information about various universities, focusing on general attributes and affiliations. Each row represents a unique university identified by the `School_ID`. The `School` column holds the name of the university. The `Location` column specifies the city and state where the university is located. The `Founded` column indicates the year the university was established. The `Affiliation` column likely identifies the university's affiliation, such as public or private. `Enrollment` represents the total student enrollment at the university. The `Nickname` column stores the university's athletic mascot name. Finally, the `Primary_conference` column indicates the primary athletic conference the university belongs to. This table serves as a comprehensive repository of university data, allowing for analysis of university attributes and relationships with athletic affiliations."
    },
    "voter_2": {
        "Student": "This table stores information about each student in the database. The StuID column represents the unique student ID assigned to each student. The LName and Fname columns store the last and first names of the student, respectively. The Age column indicates the student's age. The Sex column represents the student's gender, using a single character code. The Major column stores the student's major, which is likely a foreign key referencing another table that contains a list of available majors. The Advisor column holds the student's advisor's ID, likely another foreign key referencing a faculty or advisor table. The city_code column represents the student's city of residence, likely referencing a table of city codes and corresponding city names.",
        "Voting_record": "This table records the voting history of students during various elections. The StuID column references the Student table, indicating the student who cast the vote. The Registration_Date column stores the date when the student registered to vote. The Election_Cycle column indicates the specific election period for which the voting record applies. The remaining columns, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, and Class_Senator_Vote, record the votes cast for each respective position during the election cycle. These columns likely contain foreign keys referencing the Student table, indicating the student who received the vote."
    },
    "wedding": {
        "people": "Stores information about individuals, including their unique identifier (People_ID), name, country of origin, gender (Is_Male), and age. This table is likely used to track personal details of individuals relevant to the database's purpose.",
        "church": "Contains information about different churches, including their unique identifier (Church_ID), name, the organization responsible for establishing the church, the year the church opened (Open_Date), and the name of any previous church it may have been a continuation of (Continuation_of). This table could be used to track church data, including historical information.",
        "wedding": "Records wedding information, linking couples to the church where they were married.  The primary key is composed of the Church_ID, Male_ID, and Female_ID, ensuring each wedding record is unique. The columns store the church's ID (Church_ID), the unique ID of the male participant (Male_ID), the unique ID of the female participant (Female_ID), and the year of the wedding (Year). This table allows for tracking marriages and linking them to the relevant church and individuals involved."
    },
    "wine_1": {
        "grapes": "Stores information regarding different types of grapes used in winemaking. The ID column is the unique identifier for each grape variety. The Grape column stores the name of the grape variety. The Color column specifies the color of the grapes, indicating whether they are red, white, or another color.",
        "appellations": "Stores information about different wine appellations, which are geographical regions known for producing specific types of wines. The No column is a unique identifier for each appellation. The Appelation column stores the name of the appellation. The County, State, and Area columns specify the location of the appellation. The isAVA column indicates whether the appellation is an American Viticultural Area (AVA), a designated winegrowing region in the United States.",
        "wine": "Stores detailed information about specific wines, including their grape variety, winery, appellation, state, name, year, price, score, case production, and recommended drinking window. The No column is a unique identifier for each wine record. The Grape column specifies the type of grape used to make the wine, referencing the corresponding record in the grapes table. The Winery column indicates the winery that produced the wine. The Appelation column specifies the appellation where the grapes were grown, referencing the corresponding record in the appellations table. The State column indicates the state where the winery is located. The Name column stores the name of the wine. The Year column indicates the year the grapes were harvested and the wine was made. The Price column specifies the price of the wine. The Score column represents the wine's rating, typically on a point scale. The Cases column indicates the number of cases of wine produced. The Drink column specifies the recommended drinking window for the wine."
    },
    "workshop_paper": {
        "workshop": "This table stores information about different workshops. The `Workshop_ID` column is a unique identifier for each workshop. The `Date` column specifies the date on which the workshop was conducted. The `Venue` column indicates the location where the workshop took place. Finally, the `Name` column stores the name or title of the workshop.",
        "submission": "This table stores details about submissions made to workshops. The `Submission_ID` column serves as a unique identifier for each submission. The `Scores` column holds the numerical score received by the submission. The `Author` column contains the name of the person or group who submitted the work. Lastly, the `College` column specifies the institution associated with the submission.",
        "Acceptance": "This table links workshop submissions with workshops and indicates the acceptance status of each submission. The `Submission_ID` column references the corresponding submission from the `submission` table, while the `Workshop_ID` column references the relevant workshop from the `workshop` table. The `Result` column indicates the outcome of the submission, such as \"Accepted\" or \"Rejected.\""
    },
    "wrestler": {
        "wrestler": "Stores information about wrestlers and their championship reigns. The `Wrestler_ID` column is a unique identifier for each wrestler. The `Name` column stores the wrestler's name. The `Reign` column specifies the championship title the wrestler held. The `Days_held` column records the number of days the wrestler held the championship. The `Location` column denotes the location where the championship was won. The `Event` column specifies the event where the championship was won.",
        "Elimination": "Stores information about the eliminations that occurred in a wrestling match. The `Elimination_ID` column is a unique identifier for each elimination. The `Wrestler_ID` column references the wrestler who was eliminated from the match, linked to the `wrestler` table. The `Team` column indicates the team the eliminated wrestler belonged to. The `Eliminated_By` column specifies the wrestler who eliminated the wrestler. The `Elimination_Move` column stores the move used to eliminate the wrestler. The `Time` column records the time of the elimination in the match."
    },
    "chinook_1": {
        "Album": "The Album table stores information about all the albums in the database. The `AlbumId` column is the unique identifier for each album. The `Title` column stores the name of the album. The `ArtistId` column is a foreign key that links the album to the `Artist` table, indicating which artist created the album.",
        "Artist": "The Artist table stores information about all the artists in the database. The `ArtistId` column is the unique identifier for each artist. The `Name` column stores the name of the artist.",
        "Customer": "The Customer table stores information about all the customers in the database. The `CustomerId` column is the unique identifier for each customer. The `FirstName` and `LastName` columns store the first and last names of the customer respectively. The `Company` column stores the name of the company the customer works for. The `Address`, `City`, `State`, `Country`, and `PostalCode` columns store the customer's address information. The `Phone`, `Fax`, and `Email` columns store the customer's contact information. The `SupportRepId` column is a foreign key that links the customer to the `Employee` table, indicating which employee is their support representative.",
        "Employee": "The Employee table stores information about all the employees in the database. The `EmployeeId` column is the unique identifier for each employee. The `LastName` and `FirstName` columns store the last and first names of the employee respectively. The `Title` column stores the employee's job title. The `ReportsTo` column is a foreign key that links the employee to another employee in the `Employee` table, indicating who their manager is. The `BirthDate` and `HireDate` columns store the employee's birth date and hire date respectively. The `Address`, `City`, `State`, `Country`, and `PostalCode` columns store the employee's address information. The `Phone`, `Fax`, and `Email` columns store the employee's contact information.",
        "Genre": "The Genre table stores information about all the music genres in the database. The `GenreId` column is the unique identifier for each genre. The `Name` column stores the name of the genre.",
        "Invoice": "The Invoice table stores information about all the invoices generated for customers. The `InvoiceId` column is the unique identifier for each invoice. The `CustomerId` column is a foreign key that links the invoice to the `Customer` table, indicating which customer the invoice is for. The `InvoiceDate` column stores the date the invoice was generated. The `BillingAddress`, `BillingCity`, `BillingState`, `BillingCountry`, and `BillingPostalCode` columns store the billing address information for the invoice. The `Total` column stores the total amount of the invoice.",
        "InvoiceLine": "The InvoiceLine table stores information about the individual items on each invoice. The `InvoiceLineId` column is the unique identifier for each line item. The `InvoiceId` column is a foreign key that links the line item to the `Invoice` table, indicating which invoice it belongs to. The `TrackId` column is a foreign key that links the line item to the `Track` table, indicating which track is being purchased. The `UnitPrice` column stores the price of the track. The `Quantity` column stores the number of times the track is purchased on this invoice.",
        "MediaType": "The MediaType table stores information about the different media types that tracks can be stored in. The `MediaTypeId` column is the unique identifier for each media type. The `Name` column stores the name of the media type.",
        "Playlist": "The Playlist table stores information about all the playlists in the database. The `PlaylistId` column is the unique identifier for each playlist. The `Name` column stores the name of the playlist.",
        "PlaylistTrack": "The PlaylistTrack table stores information about which tracks are included in each playlist. The `PlaylistId` and `TrackId` columns are foreign keys that link the playlist and track tables respectively, indicating which playlist the track is included in.",
        "Track": "The Track table stores information about all the tracks in the database. The `TrackId` column is the unique identifier for each track. The `Name` column stores the name of the track. The `AlbumId` column is a foreign key that links the track to the `Album` table, indicating which album the track is part of. The `MediaTypeId` column is a foreign key that links the track to the `MediaType` table, indicating the media type the track is stored in. The `GenreId` column is a foreign key that links the track to the `Genre` table, indicating the genre of the track. The `Composer` column stores the name of the composer of the track. The `Milliseconds` and `Bytes` columns store the length of the track in milliseconds and the size of the track in bytes respectively. The `UnitPrice` column stores the price of the track."
    },
    "college_1": {
        "CLASS": "The CLASS table stores information about classes offered at the institution. The CLASS_CODE column represents the unique identifier for each class. The CRS_CODE column indicates the course to which the class belongs. CLASS_SECTION specifies the section of the course, allowing multiple classes for the same course. CLASS_TIME stores the time schedule for the class. CLASS_ROOM indicates the location where the class is held. Finally, PROF_NUM identifies the professor teaching the class, referencing the EMP_NUM from the EMPLOYEE table.",
        "COURSE": "The COURSE table contains information about the courses offered at the institution. The CRS_CODE column represents the unique identifier for each course. DEPT_CODE indicates the department offering the course. CRS_DESCRIPTION provides a brief description of the course's content. CRS_CREDIT specifies the number of credit hours associated with the course.",
        "DEPARTMENT": "The DEPARTMENT table stores information about the various departments within the institution. The DEPT_CODE column serves as the unique identifier for each department. DEPT_NAME represents the name of the department. SCHOOL_CODE indicates the school to which the department belongs. EMP_NUM identifies the employee who is the head of the department, referencing the EMP_NUM from the EMPLOYEE table. DEPT_ADDRESS stores the physical address of the department. DEPT_EXTENSION provides the phone extension for the department.",
        "EMPLOYEE": "The EMPLOYEE table contains information about all employees working at the institution. The EMP_NUM column serves as the unique identifier for each employee. EMP_LNAME and EMP_FNAME represent the last and first names of the employee respectively. EMP_INITIAL stores the middle initial of the employee. EMP_JOBCODE represents the job code or position of the employee. EMP_HIREDATE indicates the date when the employee was hired. EMP_DOB represents the date of birth of the employee.",
        "ENROLL": "The ENROLL table stores information about student enrollment in classes. The CLASS_CODE column references the specific class that the student is enrolled in. STU_NUM represents the student's unique identifier, referencing the STU_NUM from the STUDENT table. ENROLL_GRADE stores the grade earned by the student in the class.",
        "PROFESSOR": "The PROFESSOR table stores information specific to professors at the institution. The EMP_NUM column references the employee ID from the EMPLOYEE table, identifying the professor. DEPT_CODE indicates the department to which the professor belongs. PROF_OFFICE stores the office location of the professor. PROF_EXTENSION provides the phone extension for the professor. PROF_HIGH_DEGREE represents the highest academic degree obtained by the professor.",
        "STUDENT": "The STUDENT table stores information about all students at the institution. The STU_NUM column acts as the unique identifier for each student. STU_LNAME and STU_FNAME represent the last and first names of the student respectively. STU_INIT stores the middle initial of the student. STU_DOB represents the date of birth of the student. STU_HRS indicates the number of credit hours the student has completed. STU_CLASS represents the student's current class standing. STU_GPA indicates the student's grade point average. STU_TRANSFER indicates whether the student is a transfer student. DEPT_CODE represents the department the student is majoring in. STU_PHONE represents the student's phone number. PROF_NUM represents the advisor's employee number, referencing the EMP_NUM from the EMPLOYEE table."
    },
    "company_1": {
        "works_on": "This table stores information about the employees working on different projects. It contains a record for each employee working on each project.  The 'Essn' column stores the employee's social security number, acting as a primary key for the employee. 'Pno' stores the project number, acting as a primary key for the project. Finally, 'Hours' stores the number of hours the employee has worked on the project.",
        "employee": "This table stores information about each employee in the company. The 'Fname' column stores the first name of the employee, 'Minit' stores the middle initial, and 'Lname' stores the last name. 'Ssn' is the employee's social security number and serves as the primary key. 'Bdate' stores the employee's birthdate. 'Address' stores the employee's residential address. 'Sex' stores the employee's gender. 'Salary' stores the employee's current salary. 'Super_ssn' stores the social security number of the employee's supervisor. Finally, 'Dno' stores the department number the employee belongs to.",
        "department": "This table stores information about each department in the company. 'Dname' stores the department's name, 'Dnumber' is the department number and serves as the primary key. 'Mgr_ssn' stores the social security number of the department manager. Finally, 'Mgr_start_date' stores the date the manager started managing the department.",
        "project": "This table stores information about each project in the company. 'Pname' stores the project name, 'Pnumber' is the project number and serves as the primary key. 'Plocation' stores the location where the project is being carried out. Finally, 'Dnum' stores the department number responsible for the project.",
        "dependent": "This table stores information about the dependents of the employees. 'Essn' stores the employee's social security number, acting as a primary key for the employee. 'Dependent_name' stores the name of the dependent, 'Sex' stores their gender, 'Bdate' stores their birthdate, and 'Relationship' stores their relationship with the employee.",
        "dept_locations": "This table stores information about the different locations where a department operates. 'Dnumber' stores the department number, acting as a primary key for the department. 'Dlocation' stores the location where the department operates."
    },
    "epinions_1": {
        "item": "Stores information about items. The `i_id` column represents the unique ID of each item, while the `title` column stores the title or name of the item.",
        "review": "Stores user reviews for items. The `a_id` column is a unique identifier for each review, `u_id` refers to the user who wrote the review, and `i_id` identifies the item being reviewed. The `rating` column stores the numerical rating given by the user, and `rank` is another numerical value potentially representing the user's ranking of the item within a broader context.",
        "useracct": "Stores information about users. The `u_id` column represents the unique ID of each user, and `name` stores the user's name.",
        "trust": "Stores trust relationships between users. The `source_u_id` column identifies the user expressing trust, `target_u_id` identifies the user being trusted, and `trust` represents the numerical level of trust the source user has in the target user."
    },
    "flight_4": {
        "routes": "This table stores information about all the flight routes in the database. The `rid` column is a unique identifier for each route. The `dst_apid` and `src_apid` columns store the airport IDs of the destination and source airports, respectively. The `dst_ap` and `src_ap` columns store the IATA codes for the destination and source airports, respectively. The `alid` column stores the airline ID of the airline that operates the route. The `airline` column stores the IATA code of the airline that operates the route. The `codeshare` column stores information about whether the route is codeshared with other airlines. The `routes` table is linked to the `airports` table via the `src_apid` and `dst_apid` columns and to the `airlines` table via the `alid` column.",
        "airports": "This table stores information about all the airports in the database. The `apid` column is a unique identifier for each airport. The `name` column stores the name of the airport. The `city` column stores the city where the airport is located. The `country` column stores the country where the airport is located. The `x` and `y` columns store the latitude and longitude coordinates of the airport, respectively. The `elevation` column stores the elevation of the airport in meters above sea level. The `iata` column stores the IATA code of the airport. The `icao` column stores the ICAO code of the airport.",
        "airlines": "This table stores information about all the airlines in the database. The `alid` column is a unique identifier for each airline. The `name` column stores the name of the airline. The `iata` column stores the IATA code of the airline. The `icao` column stores the ICAO code of the airline. The `callsign` column stores the callsign of the airline. The `country` column stores the country where the airline is headquartered. The `active` column stores information about whether the airline is currently active or not."
    },
    "small_bank_1": {
        "ACCOUNTS": "Stores information about customers and their names. The `custid` column represents a unique customer ID, while the `name` column stores the customer's full name.",
        "SAVINGS": "Stores the savings account balance for each customer. The `custid` column represents a unique customer ID, referencing the `custid` from the `ACCOUNTS` table, ensuring that each customer's savings balance is linked to their corresponding account information. The `balance` column represents the current balance in the customer's savings account.",
        "CHECKING": "Stores the checking account balance for each customer. The `custid` column represents a unique customer ID, referencing the `custid` from the `ACCOUNTS` table, ensuring that each customer's checking balance is linked to their corresponding account information. The `balance` column represents the current balance in the customer's checking account."
    },
    "soccer_1": {
        "Player_Attributes": "This table stores attributes and ratings of players at different points in time. The `id` is the unique identifier for each attribute record. `player_fifa_api_id` and `player_api_id` link the attributes to the corresponding player in the `Player` table. `date` records the date when these attributes were observed. `overall_rating` and `potential` are the player's overall rating and potential rating, respectively. `preferred_foot` indicates the player's preferred foot for kicking the ball. `attacking_work_rate` and `defensive_work_rate` represent the player's work rate in attack and defense. The remaining columns represent various player attributes, like `crossing`, `finishing`, `heading_accuracy`, `short_passing`, etc., rated on a scale of 0 to 100. `gk_diving`, `gk_handling`, `gk_kicking`, `gk_positioning`, and `gk_reflexes` are specific attributes for goalkeepers.",
        "sqlite_sequence": "This table is used by SQLite to store the sequence numbers for automatically incremented integer primary keys. It is an internal table and not meant to be used directly.",
        "Player": "This table stores basic information about players. The `id` is the unique identifier for each player. `player_api_id` and `player_fifa_api_id` are unique identifiers used in other databases. `player_name` is the player's full name. `birthday` records the player's birth date. `height` and `weight` represent the player's height in centimeters and weight in kilograms.",
        "League": "This table stores information about football leagues. The `id` is the unique identifier for each league. `country_id` links the league to the corresponding country in the `Country` table. `name` is the full name of the league.",
        "Country": "This table stores information about countries. The `id` is the unique identifier for each country. `name` is the full name of the country.",
        "Team": "This table stores information about football teams. The `id` is the unique identifier for each team. `team_api_id` and `team_fifa_api_id` are unique identifiers used in other databases. `team_long_name` is the team's full name. `team_short_name` is the team's abbreviated name.",
        "Team_Attributes": "This table stores attributes and playing styles of teams at different points in time. The `id` is the unique identifier for each attribute record. `team_fifa_api_id` and `team_api_id` link the attributes to the corresponding team in the `Team` table. `date` records the date when these attributes were observed. The remaining columns represent various attributes of a team's playing style, like `buildUpPlaySpeed`, `buildUpPlayDribbling`, `chanceCreationPassing`, etc., rated on a scale of 0 to 100. These attributes are further categorized into classes, like `buildUpPlaySpeedClass` which can be \"Slow\", \"Balanced\", or \"Fast\", based on the attribute value."
    },
    "twitter_1": {
        "follows": "This table stores information about the relationships between users. Each row represents a 'following' relationship, where a user with `f1` (the follower) is following another user with `f2` (the followee). Both `f1` and `f2` are foreign keys referencing the `uid` column in the `user_profiles` table, ensuring data integrity and linking followers to their respective user profiles. The table is defined with a composite primary key consisting of both `f1` and `f2`, ensuring that each follow relationship is unique.",
        "tweets": "This table stores information about tweets made by users. Each row represents a single tweet, containing its unique `id`, the `uid` of the user who authored the tweet, the `text` of the tweet (limited to 140 characters), and the `createdate` when the tweet was posted. The `uid` is a foreign key referencing the `uid` column in the `user_profiles` table, linking tweets to the corresponding user profiles. The table has a primary key defined as `id`, ensuring that each tweet has a unique identifier.",
        "user_profiles": "This table stores information about each user. Each row represents a unique user, containing their `uid` (unique user ID), `name`, `email`, `partitionid` (likely used for data partitioning or distribution), and `followers` (the number of followers the user has). The table has a primary key defined as `uid`, ensuring that each user has a unique identifier."
    }
}